/*
 * zh_DirScan(), zh_DirRemoveAll(), zh_FileDelete()
 *
 * Copyright 2008 Przemyslaw Czerpak
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file LICENSE.txt.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA (or visit https://www.gnu.org/licenses/).
 *
 * As a special exception, the Ziher Project gives permission for
 * additional uses of the text contained in its release of Ziher.
 *
 * The exception is that, if you link the Ziher libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Ziher library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Ziher
 * Project under the name Ziher.  If you copy code from other
 * Ziher Project or Free Software Foundation releases into a copy of
 * Ziher, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Ziher, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */

#include "directory.zhh"
#include "file_io.zhh"

STATIC FUNCTION zh_doScan( cPath, cMask, cAttr, cPathSep )

   LOCAL aFile
   LOCAL lMatch
   LOCAL aResult := {}

   FOR EACH aFile IN zh_vfDirectory( cPath + zh_osFileMask(), cAttr + "D" )
      lMatch := zh_FileMatch( aFile[ F_NAME ], cMask )
      IF "D" $ aFile[ F_ATTR ]
         IF lMatch .AND. "D" $ cAttr
            AAdd( aResult, aFile )
         ENDIF
         IF !( aFile[ F_NAME ] == "." .OR. aFile[ F_NAME ] == ".." .OR. aFile[ F_NAME ] == "" )
            AEval( zh_DoScan( cPath + aFile[ F_NAME ] + cPathSep, cMask, cAttr, cPathSep ), ;
               {| x | x[ F_NAME ] := aFile[ F_NAME ] + cPathSep + x[ F_NAME ], ;
               AAdd( aResult, x ) } )
         ENDIF
      ELSEIF lMatch
         AAdd( aResult, aFile )
      ENDIF
   NEXT

   RETURN aResult

FUNCTION zh_DirScan( cPath, cFileMask, cAttr )
   RETURN zh_DoScan( zh_DirSepAdd( zh_defaultValue( cPath, "" ) ), ;
      iif( ZH_ISSTRING( cFileMask ), cFileMask, zh_osFileMask() ), ;
      zh_defaultValue( cAttr, "" ), ;
      zh_ps() )

FUNCTION zh_DirRemoveAll( cDir )

   LOCAL aFile, cPath, cFile, nAttr

   IF zh_vfDirExists( cDir )
      cPath := zh_DirSepAdd( cDir )
      FOR EACH aFile IN zh_vfDirectory( cPath + zh_osFileMask(), "HSDL" )
         IF "D" $ aFile[ F_ATTR ] .AND. ! "L" $ aFile[ F_ATTR ]
            IF !( aFile[ F_NAME ] == "." .OR. aFile[ F_NAME ] == ".." .OR. aFile[ F_NAME ] == "" )
               IF ! zh_DirRemoveAll( cPath + aFile[ F_NAME ] )
                  RETURN .F.
               ENDIF
            ENDIF
         ELSE
            cFile := cPath + aFile[ F_NAME ]
            IF "R" $ aFile[ F_ATTR ] .AND. zh_vfAttrGet( cFile, @nAttr )
               zh_vfAttrSet( cFile, zh_bitAnd( nAttr, zh_bitNot( ZH_FA_READONLY ) ) )
            ENDIF
            IF ! zh_vfErase( cFile ) == 0
               RETURN .F.
            ENDIF
         ENDIF
      NEXT
      RETURN zh_vfDirRemove( cDir ) == 0
   ENDIF

   RETURN .T.

FUNCTION zh_FileDelete( cFileMask, cAttr )

   LOCAL lAny := .F., aFile, cPath, cFile, cAttrMask, nAttr

   IF ZH_ISSTRING( cFileMask ) .AND. ! cFileMask == "" .AND. ;
      ! zh_vfDirExists( cFileMask )
      cPath := zh_FNameDir( cFileMask )
      cAttrMask := StrTran( zh_defaultValue( cAttr, "" ), "D" ) + "L"
      FOR EACH aFile IN zh_vfDirectory( cFileMask, cAttrMask )
         cFile := cPath + aFile[ F_NAME ]
         IF "R" $ aFile[ F_ATTR ] .AND. zh_vfAttrGet( cFile, @nAttr )
            zh_vfAttrSet( cFile, zh_bitAnd( nAttr, zh_bitNot( ZH_FA_READONLY ) ) )
         ENDIF
         IF zh_vfErase( cFile ) == 0
            lAny := .T.
         ENDIF
      NEXT
   ENDIF

   RETURN lAny
