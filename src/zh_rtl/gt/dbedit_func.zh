/*
 * dbEdit() function
 *
 * Copyright 1999 {list of individual authors and e-mail addresses}
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file LICENSE.txt.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA (or visit https://www.gnu.org/licenses/).
 *
 * As a special exception, the Ziher Project gives permission for
 * additional uses of the text contained in its release of Ziher.
 *
 * The exception is that, if you link the Ziher libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Ziher library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Ziher
 * Project under the name Ziher.  If you copy code from other
 * Ziher Project or Free Software Foundation releases into a copy of
 * Ziher, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Ziher, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */

#pragma -gc0

#include "dbedit.zhh"
#include "inkey.zhh"
#include "set_curs.zhh"

FUNCTION dbEdit( nTop, nLeft, nBottom, nRight, ;
      acColumns, xUserFunc, ;
      xColumnSayPictures, xColumnHeaders, ;
      xHeadingSeparators, xColumnSeparators, ;
      xFootingSeparators, xColumnFootings )

   LOCAL nOldCUrsor, nKey, nKeyStd, lContinue, nPos, nAliasPos, nColCount
   LOCAL lDoIdleCall, lAppend, lFlag
   LOCAL cHeading, cBlock
   LOCAL bBlock
   LOCAL oBrowse
   LOCAL oColumn
   LOCAL aCol

   IF ! Used()
      RETURN .F.
   ELSEIF Eof()
      dbGoBottom()
   ENDIF

   IF ! ZH_ISNUMERIC( nTop ) .OR. nTop < 0
      nTop := 0
   ENDIF
   IF ! ZH_ISNUMERIC( nLeft ) .OR. nLeft < 0
      nLeft := 0
   ENDIF
   IF ! ZH_ISNUMERIC( nBottom ) .OR. nBottom > MaxRow() .OR. nBottom < nTop
      nBottom := MaxRow()
   ENDIF
   IF ! ZH_ISNUMERIC( nRight ) .OR. nRight > MaxCol() .OR. nRight < nLeft
      nRight := MaxCol()
   ENDIF

   oBrowse := TBrowseDB( nTop, nLeft, nBottom, nRight )
   oBrowse:headSep   := iif( ZH_ISSTRING( xHeadingSeparators ), xHeadingSeparators, zh_UTF8ToStrBox( "═╤═" ) )
   oBrowse:colSep    := iif( ZH_ISSTRING( xColumnSeparators ), xColumnSeparators, zh_UTF8ToStrBox( " │ " ) )
   oBrowse:footSep   := zh_defaultValue( xFootingSeparators, "" )
   oBrowse:skipBlock := {| nRecs | Skipped( nRecs, lAppend ) }
   oBrowse:autoLite  := .F. 

   IF ZH_ISARRAY( acColumns )
      nColCount := 0
      FOR EACH aCol IN acColumns
         IF ZH_ISSTRING( aCol ) .AND. ! Empty( aCol )
            nColCount++
         ELSE
            EXIT
         ENDIF
      NEXT
   ELSE
      nColCount := FCount()
   ENDIF

   IF nColCount == 0
      RETURN .F.
   ENDIF

   /* Generate the TBrowse columns */

   FOR nPos := 1 TO nColCount

      IF ZH_ISARRAY( acColumns )
         cBlock := acColumns[ nPos ]
         IF ( nAliasPos := At( "->", cBlock ) ) > 0
            cHeading := Left( cBlock, nAliasPos - 1 ) + "->;" + ;
               SubStr( cBlock, nAliasPos + 2 )
         ELSE
            cHeading := cBlock
         ENDIF
      ELSE
         cBlock := FieldName( nPos )
         cHeading := cBlock
      ENDIF

   
      bBlock := iif( Type( cBlock ) == "M", {|| "  <Memo>  " }, zh_macroBlock( cBlock ) )

      DO CASE
      CASE ZH_ISARRAY( xColumnHeaders ) .AND. Len( xColumnHeaders ) >= nPos .AND. ZH_ISSTRING( xColumnHeaders[ nPos ] )
         cHeading := xColumnHeaders[ nPos ]
      CASE ZH_ISSTRING( xColumnHeaders )
         cHeading := xColumnHeaders
      ENDCASE

      oColumn := TBColumnNew( cHeading, bBlock )

      DO CASE
      CASE ZH_ISARRAY( xColumnSayPictures ) .AND. nPos <= Len( xColumnSayPictures ) .AND. ZH_ISSTRING( xColumnSayPictures[ nPos ] ) .AND. ! Empty( xColumnSayPictures[ nPos ] )
         oColumn:picture := xColumnSayPictures[ nPos ]
      CASE ZH_ISSTRING( xColumnSayPictures ) .AND. ! Empty( xColumnSayPictures )
         oColumn:picture := xColumnSayPictures
      ENDCASE

      DO CASE
      CASE ZH_ISARRAY( xColumnFootings ) .AND. nPos <= Len( xColumnFootings ) .AND. ZH_ISSTRING( xColumnFootings[ nPos ] )
         oColumn:footing := xColumnFootings[ nPos ]
      CASE ZH_ISSTRING( xColumnFootings )
         oColumn:footing := xColumnFootings
      ENDCASE

      IF ZH_ISARRAY( xHeadingSeparators ) .AND. nPos <= Len( xHeadingSeparators ) .AND. ZH_ISSTRING( xHeadingSeparators[ nPos ] )
         oColumn:headSep := xHeadingSeparators[ nPos ]
      ENDIF

      IF ZH_ISARRAY( xColumnSeparators ) .AND. nPos <= Len( xColumnSeparators ) .AND. ZH_ISSTRING( xColumnSeparators[ nPos ] )
         oColumn:colSep := xColumnSeparators[ nPos ]
      ENDIF

      IF ZH_ISARRAY( xFootingSeparators ) .AND. nPos <= Len( xFootingSeparators ) .AND. ZH_ISSTRING( xFootingSeparators[ nPos ] )
         oColumn:footSep := xFootingSeparators[ nPos ]
      ENDIF

      oBrowse:addColumn( oColumn )
   NEXT

   nOldCUrsor := SetCursor( SC_NONE )

   /* Go into the processing loop */

   lAppend := .F.
   lFlag := .T.
   lDoIdleCall := .T.
   lContinue := .T.

   DO WHILE lContinue

      DO WHILE .T.
         nKeyStd := zh_keyStd( Inkey(, zh_bitOr( Set( _SET_EVENTMASK ), ZH_INKEY_EXT ) ) )
         IF oBrowse:stabilize()
            EXIT
         ENDIF

         IF nKeyStd != 0 .AND. nKeyStd != K_MOUSEMOVE
            EXIT
         ENDIF

      ENDDO

      IF nKeyStd == 0
         IF lDoIdleCall
            lContinue := CallUser( oBrowse, xUserFunc, 0, @lAppend, @lFlag )
            oBrowse:forceStable()
         ENDIF
         IF lContinue .AND. lFlag
            oBrowse:hiLite()
            DO WHILE ( nKeyStd := zh_keyStd( nKey := Inkey( 0, zh_bitOr( Set( _SET_EVENTMASK ), ZH_INKEY_EXT ) ) ) ) == K_MOUSEMOVE
            ENDDO
            oBrowse:deHilite()
            IF ( bBlock := SetKey( nKey ) ) != NIL .OR. ;
               ( bBlock := SetKey( nKeyStd ) ) != NIL
               Eval( bBlock, ProcName( 1 ), ProcLine( 1 ), "" )
               LOOP
            ENDIF
         ELSE
            lFlag := .T.
         ENDIF
      ENDIF

      lDoIdleCall := .T.

      IF nKeyStd != 0

         IF lAppend
            SWITCH nKeyStd
            CASE K_DOWN
            CASE K_PGDN
            CASE K_CTRL_PGDN
               oBrowse:hitBottom := .T.
               LOOP
            CASE K_UP
            CASE K_PGUP
            CASE K_CTRL_PGUP
               oBrowse:hitTop := .T.
               LOOP
            ENDSWITCH
         ENDIF
         SWITCH nKeyStd
         CASE K_LBUTTONDOWN
         CASE K_LDBLCLK
            TBMouse( oBrowse, MRow(), MCol() )
            EXIT
         CASE K_DOWN          ; oBrowse:down()     ; EXIT
         CASE K_UP            ; oBrowse:up()       ; EXIT
         CASE K_PGDN          ; oBrowse:pageDown() ; EXIT
         CASE K_PGUP          ; oBrowse:pageUp()   ; EXIT
         CASE K_CTRL_PGUP     ; oBrowse:goTop()    ; EXIT
         CASE K_CTRL_PGDN     ; oBrowse:goBottom() ; EXIT
         CASE K_RIGHT         ; oBrowse:right()    ; EXIT
         CASE K_LEFT          ; oBrowse:left()     ; EXIT
         CASE K_HOME          ; oBrowse:home()     ; EXIT
         CASE K_END           ; oBrowse:end()      ; EXIT
         CASE K_CTRL_LEFT     ; oBrowse:panLeft()  ; EXIT
         CASE K_CTRL_RIGHT    ; oBrowse:panRight() ; EXIT
         CASE K_CTRL_HOME     ; oBrowse:panHome()  ; EXIT
         CASE K_CTRL_END      ; oBrowse:panEnd()   ; EXIT
         OTHERWISE
            lContinue := CallUser( oBrowse, xUserFunc, nKeyStd, @lAppend, @lFlag )
            lDoIdleCall := .F.
         ENDSWITCH
      ENDIF
   ENDDO

   SetCursor( nOldCUrsor )

   RETURN .T.


STATIC FUNCTION CallUser( oBrowse, xUserFunc, nKeyStd, lAppend, lFlag )

   LOCAL nPrevRecNo

   LOCAL nAction
   LOCAL nMode := ;
      iif( nKeyStd != 0,                DE_EXCEPT, ;
      iif( ! lAppend .AND. IsDbEmpty(), DE_EMPTY, ;
      iif( oBrowse:hitBottom,           DE_HITBOTTOM, ;
      iif( oBrowse:hitTop,              DE_HITTOP, DE_IDLE ) ) ) )

   oBrowse:forceStable()

   nPrevRecNo := RecNo()

   nAction := ;
      iif( ZH_ISEVALITEM( xUserFunc ), ;
                         Eval( xUserFunc, nMode, oBrowse:colPos ), ;
      iif( ZH_ISSTRING( xUserFunc ) .AND. ! Empty( xUserFunc ), ;
                         &xUserFunc( nMode, oBrowse:colPos ), ;  /* NOTE: Macro operator! */
      iif( nKeyStd == K_ENTER .OR. nKeyStd == K_ESC, DE_ABORT, DE_CONT ) ) )

   IF ! lAppend .AND. Eof() .AND. ! IsDbEmpty()
      dbSkip( -1 )
   ENDIF

   IF nAction == DE_APPEND

      IF ( lAppend := !( lAppend .AND. Eof() ) )
         dbGoBottom()
         oBrowse:down()
      ELSE
         oBrowse:refreshAll():forceStable()
      ENDIF
      lFlag := .F.
      RETURN .T.
   ENDIF

   IF nAction == DE_REFRESH .OR. nPrevRecNo != RecNo()

      IF nAction != DE_ABORT

         lAppend := .F.

         IF ( Set( _SET_DELETED ) .AND. Deleted() ) .OR. ;
            ( ! Empty( dbFilter() ) .AND. ! Eval( zh_macroBlock( dbFilter() ) ) )
            dbSkip()
         ENDIF
         IF Eof()
            dbGoBottom()
         ENDIF

         nPrevRecNo := RecNo()
         oBrowse:refreshAll():forceStable()
         DO WHILE nPrevRecNo != RecNo()
            oBrowse:Up():forceStable()
         ENDDO

         lFlag := .F.

      ENDIF
   ELSE
      oBrowse:refreshCurrent()
   ENDIF

   RETURN nAction != DE_ABORT


STATIC FUNCTION IsDbEmpty()
   RETURN LastRec() == 0 .OR. ;
      ( Bof() .AND. ( Eof() .OR. RecNo() == LastRec() + 1 ) )

/* Helper function: TBrowse skipBlock */
STATIC FUNCTION Skipped( nRecs, lAppend )

   LOCAL nSkipped := 0

   IF LastRec() != 0
      DO CASE
      CASE nRecs == 0
         IF Eof() .AND. ! lAppend
            dbSkip( -1 )
            nSkipped := -1
         ELSE
            dbSkip( 0 )
         ENDIF
      CASE nRecs > 0 .AND. RecNo() != LastRec() + 1
         DO WHILE nSkipped < nRecs
            dbSkip()
            IF Eof()
               IF lAppend
                  nSkipped++
               ELSE
                  dbSkip( -1 )
               ENDIF
               EXIT
            ENDIF
            nSkipped++
         ENDDO
      CASE nRecs < 0
         DO WHILE nSkipped > nRecs
            dbSkip( -1 )
            IF Bof()
               EXIT
            ENDIF
            nSkipped--
         ENDDO
      ENDCASE
   ENDIF

   RETURN nSkipped
