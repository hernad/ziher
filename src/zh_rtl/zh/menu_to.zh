/*
 * PROMPT/MENU TO commands
 *
 * Released to Public Domain by Phil Barnett <philb@iag.net>
 *
 */

#pragma -gc0

/* NOTE: Recursive use is supported. */

#include "color.zhh"
#include "inkey.zhh"
#include "memvar.zhh"
#include "set_curs.zhh"

#define _ITM_ROW     1
#define _ITM_COL     2
#define _ITM_PROMPT  3
#define _ITM_MSG     4
#define _ITM_COLOR   5

THREAD STATIC t_aLevel   := {}
THREAD STATIC t_nPointer := 1

/* NOTE: <cColor> parameter is a Ziher extension. */

FUNCTION __AtPrompt( nRow, nCol, cPrompt, cMsg, cColor )

   IF t_nPointer < 1
      t_nPointer := 1
   ENDIF

   // add the current level empty array.
   DO WHILE Len( t_aLevel ) < t_nPointer
      AAdd( t_aLevel, {} )
   ENDDO

   // add to the static array
   AAdd( t_aLevel[ t_nPointer ], { ;
      nRow, ;      // _ITM_ROW
      nCol, ;      // _ITM_COL
      cPrompt, ;   // _ITM_PROMPT
      cMsg, ;      // _ITM_MSG
      cColor } )   // _ITM_COLOR

   // put this prompt on the screen right now
   DispOutAt( nRow, nCol, cPrompt, cColor )

   RETURN .F.

FUNCTION __MenuTo( bBlock, cVariable )

   LOCAL nKey, nKeyStd
   LOCAL cKey
   LOCAL y
   LOCAL q
   LOCAL n
   LOCAL lExit
   LOCAL nArrLen
   LOCAL xMsg
   LOCAL nMsgCol
   LOCAL nMsgRow
   LOCAL lMsgCenter
   LOCAL nSaveCursor
   LOCAL cSaveReadVar

   LOCAL lDeclared
   LOCAL bAction
   LOCAL nMouseClik

   LOCAL nPointer
   LOCAL cColor
   LOCAL cColorSelect
   LOCAL cColorNormal
   LOCAL nHiLited

   // Detect if a memvar was passed
   lDeclared := ! __mvExist( cVariable )

   IF lDeclared
      __mvPublic( cVariable )
   ENDIF

   n := Eval( bBlock )

   // if no prompts were defined, exit with 0

   IF t_nPointer < 1 .OR. t_nPointer > Len( t_aLevel )

      n := 0

   ELSE

      t_nPointer++
      nPointer := t_nPointer

      nArrLen := Len( t_aLevel[ nPointer - 1 ] )

      // put choice in a valid range

      IF ! ZH_ISNUMERIC( n ) .OR. n < 1
         n := 1
      ENDIF

      IF n > nArrLen
         n := nArrLen
      ENDIF

      nHiLited := 0
      nSaveCursor := SetCursor( iif( Set( _SET_INTENSITY ), SC_NONE, NIL ) )
      cSaveReadVar := ReadVar( zh_asciiUpper( cVariable ) )
      xMsg := ""
      nMsgCol := 0
      nMsgRow := Set( _SET_MESSAGE )
      lMsgCenter := Set( _SET_MCENTER )
      lExit := .F.

      DO WHILE n != 0

         // should we display messages?
         IF nMsgRow > 0

            IF ! Empty( xMsg )
               DispOutAt( nMsgRow, nMsgCol, Space( zh_ULen( xMsg ) ) )
            ENDIF

            xMsg := t_aLevel[ nPointer - 1 ][ n ][ _ITM_MSG ]

            // Codeblock messages (yes, they are documented!)
            IF ZH_ISEVALITEM( xMsg )
               xMsg := Eval( xMsg )
            ENDIF

            zh_default( @xMsg, "" )

            IF lMsgCenter
               nMsgCol := Int( ( MaxCol() - zh_ULen( xMsg ) ) / 2 )
            ENDIF

            DispOutAt( nMsgRow, nMsgCol, xMsg )

         ENDIF

         // save the current row
         q := n

         cColor := t_aLevel[ t_nPointer - 1 ][ n ][ _ITM_COLOR ]
         cColorNormal := zh_ColorIndex( iif( Empty( zh_ColorIndex( cColor, CLR_STANDARD ) ), SetColor(), cColor ), CLR_STANDARD )
         IF Set( _SET_INTENSITY )
            cColorSelect := zh_ColorIndex( iif( Empty( zh_ColorIndex( cColor, CLR_ENHANCED ) ), SetColor(), cColor ), CLR_ENHANCED )
         ELSE
            cColorSelect := cColorNormal
         ENDIF

         // avoid flicker
         IF nHiLited != n
            nHiLited := n
            // highlight the prompt
            DispOutAt( ;
               t_aLevel[ nPointer - 1 ][ n ][ _ITM_ROW ], ;
               t_aLevel[ nPointer - 1 ][ n ][ _ITM_COL ], ;
               t_aLevel[ nPointer - 1 ][ n ][ _ITM_PROMPT ], ;
               cColorSelect )

         ENDIF

         IF lExit
            EXIT
         ENDIF

         nKey := nKeyStd := 0
         DO WHILE nKey == 0

            // wait for a keystroke
            nKeyStd := zh_keyStd( nKey := Inkey( 0, zh_bitOr( Set( _SET_EVENTMASK ), ZH_INKEY_EXT ) ) )

            IF ( bAction := SetKey( nKey ) ) != NIL .OR. ;
               ( bAction := SetKey( nKeyStd ) ) != NIL

               Eval( bBlock, n )
               Eval( bAction, ProcName( 1 ), ProcLine( 1 ), zh_asciiUpper( cVariable ) )
               n := Eval( bBlock )

               DO CASE
               CASE n < 1
                  n := 1
               CASE n > nArrLen
                  n := nArrLen
               ENDCASE

               nKey := nKeyStd := 0

            ENDIF
         ENDDO

         // check for keystrokes
         SWITCH nKeyStd
         CASE K_MOUSEMOVE
            EXIT
         CASE K_LBUTTONDOWN
         CASE K_LDBLCLK
            IF ( nMouseClik := HitTest( t_aLevel[ nPointer - 1 ], ;
               MRow(), MCol() ) ) > 0
               n := nMouseClik
            ENDIF
            IF nKeyStd == K_LDBLCLK
               lExit := .T.
            ENDIF
            EXIT
         CASE K_DOWN
         CASE K_RIGHT
            IF ++n > nArrLen
               n := iif( Set( _SET_WRAP ), 1, nArrLen )
            ENDIF
            EXIT
         CASE K_UP
         CASE K_LEFT
            IF --n < 1
               n := iif( Set( _SET_WRAP ), nArrLen, 1 )
            ENDIF
            EXIT
         CASE K_HOME
            n := 1
            EXIT
         CASE K_END
            n := nArrLen
            EXIT
         CASE K_ENTER
         CASE K_PGUP
         CASE K_PGDN
            lExit := .T.
            EXIT
         CASE K_ESC
            n := 0
            EXIT
         OTHERWISE
            // did user hit a hot key?
            IF ! ( cKey := Upper( zh_keyChar( nKeyStd ) ) ) == ""
               FOR y := 1 TO nArrLen
                  IF zh_LeftEqI( LTrim( t_aLevel[ nPointer - 1 ][ y ][ _ITM_PROMPT ] ), cKey )
                     n := y
                     lExit := .T.
                     EXIT
                  ENDIF
               NEXT
            ENDIF
         ENDSWITCH

         IF n != 0
            // avoid flicker
            IF nHiLited != n
               nHiLited := 0
               DispOutAt( ;
                  t_aLevel[ nPointer - 1 ][ q ][ _ITM_ROW ], ;
                  t_aLevel[ nPointer - 1 ][ q ][ _ITM_COL ], ;
                  t_aLevel[ nPointer - 1 ][ q ][ _ITM_PROMPT ], ;
                  cColorNormal )
            ENDIF
         ENDIF

      ENDDO

      ReadVar( cSaveReadVar )
      SetCursor( nSaveCursor )

      t_nPointer := nPointer
      t_nPointer--
      ASize( t_aLevel, t_nPointer - 1 )

   ENDIF

   Eval( bBlock, n )

   IF lDeclared
      __mvXRelease( cVariable )
   ENDIF

   SetPos( MaxRow() - 1, 0 )

   RETURN n

STATIC FUNCTION HitTest( aMenu, nMRow, nMCol )

   LOCAL aMenuItem

   FOR EACH aMenuItem IN aMenu
      IF nMRow == aMenuItem[ _ITM_ROW ] .AND. ;
         nMCol >= aMenuItem[ _ITM_COL ] .AND. ;
         nMCol < aMenuItem[ _ITM_COL ] + zh_ULen( aMenuItem[ _ITM_PROMPT ] )

         RETURN aMenuItem:__enumIndex()
      ENDIF
   NEXT

   RETURN 0

