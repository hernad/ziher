/* A Bison parser, made by GNU Bison 3.0.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         zh_comp_yyparse
#define yylex           zh_comp_yylex
#define yyerror         zh_comp_yyerror
#define yydebug         zh_comp_yydebug
#define yynerrs         zh_comp_yynerrs


/* Copy the first part of user declarations.  */
#line 5 "ziher.y" /* yacc.c:339  */

/*
 * Compiler YACC rules and actions
 *
 * Copyright 1999 Antonio Linares <alinares@fivetech.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 * (or visit their website at https://www.gnu.org/licenses/).
 *
 */

/* TODO list
 * 1) Change the pcode generated by ::cVar from Self:cVar to QSELF():cVar
 *    The major problem to solve is how to support QSELF() inside a codeblock.
 */


#include "zh_comp.h"

/* Compile using: bison -d -v ziher.y */

/* to pacify some meaningless warnings */
#if defined( __BORLANDC__ )
#  if ! defined( __STDC__ )
#     define __STDC__
#  endif
#  pragma warn -aus
#  pragma warn -ccc
#  pragma warn -rch
#elif defined( _MSC_VER )
#  pragma warning( disable : 4244 )
#  pragma warning( disable : 4702 )
#endif

#undef alloca
#define alloca  zh_xgrab
#undef malloc
#define malloc  zh_xgrab
#undef realloc
#define realloc zh_xrealloc
#undef free
#define free    zh_xfree

/* NOTE: these symbols are used internally in bison.simple
 */
#undef YYFREE
#define YYFREE zh_xfree
#undef YYMALLOC
#define YYMALLOC zh_xgrab

#define NO_YYERROR

/* NOTE: these symbols are defined explicitly to pacify warnings */
#define YYENABLE_NLS          0
#define YYLTYPE_IS_TRIVIAL    0

/* NOTE: increase the maximum size of bison stack size */
#define YYMAXDEPTH 100000

static void zh_compLoopStart( ZH_COMP_DECL, ZH_BOOL );
static void zh_compLoopEnd( ZH_COMP_DECL );
static void zh_compLoopLoop( ZH_COMP_DECL );
static void zh_compLoopExit( ZH_COMP_DECL );
static void zh_compLoopHere( ZH_COMP_DECL );
static long zh_compLoopCount( ZH_COMP_DECL );

static void * zh_compElseIfGen( ZH_COMP_DECL, void * pFirstElseIf, ZH_SIZE nOffset ); /* generates a support structure for ELSEIFs pcode fixups */
static void zh_compElseIfFix( ZH_COMP_DECL, void * pIfElseIfs ); /* implements the ELSEIFs pcode fixups */

static void zh_compRTVariableAdd( ZH_COMP_DECL, PZH_EXPR, ZH_BOOL );
static void zh_compRTVariableGen( ZH_COMP_DECL, const char * );

static PZH_EXPR zh_compArrayDimPush( PZH_EXPR pInitValue, ZH_COMP_DECL );
static void zh_compVariableDim( const char *, PZH_EXPR, ZH_COMP_DECL );

static void zh_compForStart( ZH_COMP_DECL, const char *szVarName, int iForEachDir );
static void zh_compForEnd( ZH_COMP_DECL, const char *szVarName );
static void zh_compEnumStart( ZH_COMP_DECL, PZH_EXPR pVars, PZH_EXPR pExprs, int descend );
static void zh_compEnumNext( ZH_COMP_DECL, PZH_EXPR pExpr, int descend );
static void zh_compEnumEnd( ZH_COMP_DECL, PZH_EXPR pExpr );

static void zh_compSwitchStart( ZH_COMP_DECL, PZH_EXPR );
static void zh_compSwitchAdd( ZH_COMP_DECL, PZH_EXPR );
static void zh_compSwitchEnd( ZH_COMP_DECL );

static PZH_EXPR zh_compCheckMethod( ZH_COMP_DECL, PZH_EXPR pExpr );
static PZH_EXPR zh_compCheckPassByRef( ZH_COMP_DECL, PZH_EXPR pExpr );

static void zh_compErrStru( ZH_COMP_DECL, int iError );
static void zh_compErrUnclosed( ZH_COMP_DECL, const char * szStru );

#ifdef ZH_YYDEBUG
   #define YYDEBUG        1 /* Parser debug information support */
#endif

/* Controls if passing by reference '@' is allowed */
#define ZH_PASSBYREF_OFF      0
#define ZH_PASSBYREF_FUNCALL  1
#define ZH_PASSBYREF_ARRAY    2

static void zh_compDebugStart( void ) { }


#line 191 "zh_comp_y.c" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "zh_comp_y.h".  */
#ifndef YY_ZH_COMP_YY_ZIHERY_H_INCLUDED
# define YY_ZH_COMP_YY_ZIHERY_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int zh_comp_yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    FUNCTION = 258,
    PROCEDURE = 259,
    IDENTIFIER = 260,
    RETURN = 261,
    NIL = 262,
    LOCAL = 263,
    STATIC = 264,
    IIF = 265,
    IF = 266,
    ELSE = 267,
    ELSEIF = 268,
    END = 269,
    ENDIF = 270,
    ENDERR = 271,
    LITERAL = 272,
    TRUEVALUE = 273,
    FALSEVALUE = 274,
    NUM_DOUBLE = 275,
    INASSIGN = 276,
    NUM_LONG = 277,
    ANNOUNCE = 278,
    EXTERN = 279,
    DYNAMIC = 280,
    AND = 281,
    OR = 282,
    NOT = 283,
    PUBLIC = 284,
    EQ = 285,
    NE1 = 286,
    NE2 = 287,
    INC = 288,
    DEC = 289,
    ALIASOP = 290,
    DOCASE = 291,
    CASE = 292,
    OTHERWISE = 293,
    ENDCASE = 294,
    ENDDO = 295,
    MEMVAR = 296,
    WHILE = 297,
    LOOP = 298,
    EXIT = 299,
    INIT = 300,
    FOR = 301,
    NEXT = 302,
    TO = 303,
    STEP = 304,
    LE = 305,
    GE = 306,
    FIELD = 307,
    IN = 308,
    PARAMETERS = 309,
    PLUSEQ = 310,
    MINUSEQ = 311,
    MULTEQ = 312,
    DIVEQ = 313,
    POWER = 314,
    EXPEQ = 315,
    MODEQ = 316,
    PRIVATE = 317,
    BEGINSEQ = 318,
    BREAK = 319,
    RECOVER = 320,
    RECOVERUSING = 321,
    ALWAYS = 322,
    ENDSEQ = 323,
    DO = 324,
    WITH = 325,
    SELF = 326,
    LINE = 327,
    MACROVAR = 328,
    MACROTEXT = 329,
    AS_ARRAY = 330,
    AS_BLOCK = 331,
    AS_CHARACTER = 332,
    AS_CLASS = 333,
    AS_DATE = 334,
    AS_LOGICAL = 335,
    AS_NUMERIC = 336,
    AS_OBJECT = 337,
    AS_VARIANT = 338,
    AS_ARRAY_ARRAY = 339,
    AS_BLOCK_ARRAY = 340,
    AS_CHARACTER_ARRAY = 341,
    AS_CLASS_ARRAY = 342,
    AS_DATE_ARRAY = 343,
    AS_LOGICAL_ARRAY = 344,
    AS_NUMERIC_ARRAY = 345,
    AS_OBJECT_ARRAY = 346,
    DECLARE = 347,
    OPTIONAL = 348,
    DECLARE_CLASS = 349,
    DECLARE_MEMBER = 350,
    PROCREQ = 351,
    CBSTART = 352,
    DOIDENT = 353,
    FOREACH = 354,
    DESCEND = 355,
    DOSWITCH = 356,
    ENDSWITCH = 357,
    WITHOBJECT = 358,
    ENDWITH = 359,
    NUM_DATE = 360,
    TIMESTAMP = 361,
    EPSILON = 362,
    HASHOP = 363,
    THREAD_STATIC = 364,
    POST = 365,
    UNARY = 366,
    PRE = 367
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE YYSTYPE;
union YYSTYPE
{
#line 125 "ziher.y" /* yacc.c:355  */

   const char * string; /* to hold a string returned by lex */
   int     iNumber;     /* to hold a temporary integer number */
   ZH_SIZE sNumber;     /* to hold a temporary ZH_SIZE values */
   ZH_MAXINT lNumber;   /* to hold a temporary long number */
   ZH_BOOL bTrue;
   PZH_EXPR asExpr;
   void * pVoid;        /* to hold any memory structure we may need */
   struct
   {
      ZH_MAXINT lNumber;   /* to hold a long number returned by lex */
      ZH_UCHAR  bWidth;    /* to hold the width of the value */
   } valLong;
   struct
   {
      double   dNumber;    /* to hold a double number returned by lex */
      ZH_UCHAR bWidth;     /* to hold the width of the value */
      ZH_UCHAR bDec;       /* to hold the number of decimal points in the value */
   } valDouble;
   struct
   {
      long     date;
      long     time;
   } valTimeStamp;
   struct
   {
      char *   string;
      ZH_SIZE  length;
      ZH_BOOL  dealloc;
   } valChar;
   struct
   {
      char *   string;
      ZH_SIZE  length;
      int      flags;   /* Flag for early {|| &macro} (1) or late {|| &(macro)} (2) binding */
   } asCodeblock;
   PZH_VARTYPE asVarType;

#line 383 "zh_comp_y.c" /* yacc.c:355  */
};
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif



int zh_comp_yyparse (PZH_COMP pComp);

#endif /* !YY_ZH_COMP_YY_ZIHERY_H_INCLUDED  */

/* Copy the second part of user declarations.  */
#line 164 "ziher.y" /* yacc.c:358  */

/* This must be placed after the above union - the union is
 * typedef-ined to YYSTYPE
 */
extern int  yylex( YYSTYPE *, ZH_COMP_DECL );    /* main lex token function, called by yyparse() */
extern void yyerror( ZH_COMP_DECL, const char * );     /* parsing error management function */

#line 404 "zh_comp_y.c" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  281
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   8221

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  135
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  247
/* YYNRULES -- Number of rules.  */
#define YYNRULES  656
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  991

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   367

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     124,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,   114,   119,   122,     2,
     127,   128,   117,   115,   126,   116,     2,   118,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   131,   125,
     112,   111,   113,     2,   123,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   133,     2,   132,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   129,   134,   130,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   120,   121
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   294,   294,   295,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   312,   315,   320,   328,
     328,   329,   329,   330,   330,   331,   331,   334,   335,   336,
     337,   340,   341,   344,   345,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   370,   371,   379,   380,   381,   382,   383,
     384,   390,   391,   392,   393,   394,   395,   396,   397,   399,
     399,   405,   406,   407,   420,   420,   441,   443,   441,   447,
     449,   447,   453,   454,   455,   456,   457,   458,   458,   464,
     467,   475,   494,   494,   497,   498,   499,   500,   502,   515,
     516,   519,   520,   523,   524,   527,   528,   531,   532,   533,
     534,   535,   536,   537,   538,   539,   540,   541,   542,   543,
     544,   545,   546,   547,   548,   553,   554,   557,   560,   563,
     564,   569,   572,   577,   583,   588,   593,   594,   597,   602,
     605,   616,   619,   624,   627,   630,   631,   634,   637,   638,
     643,   646,   651,   652,   655,   660,   663,   666,   667,   674,
     675,   680,   681,   682,   683,   684,   685,   686,   687,   688,
     689,   690,   691,   692,   693,   696,   697,   700,   701,   702,
     703,   704,   705,   706,   707,   708,   709,   710,   711,   712,
     713,   714,   715,   716,   717,   718,   719,   728,   729,   730,
     731,   732,   733,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   758,   762,   765,   766,   770,   773,   776,   777,   780,
     781,   784,   785,   786,   787,   788,   791,   792,   797,   798,
     799,   805,   806,   809,   812,   817,   820,   829,   830,   831,
     832,   833,   834,   835,   836,   837,   838,   839,   840,   841,
     842,   843,   844,   845,   846,   847,   848,   849,   850,   851,
     852,   853,   854,   855,   856,   857,   858,   859,   860,   863,
     864,   865,   866,   867,   868,   871,   872,   875,   876,   879,
     880,   881,   882,   883,   884,   885,   892,   893,   894,   895,
     896,   897,   898,   899,   900,   901,   902,   903,   904,   905,
     906,   907,   908,   909,   910,   911,   912,   918,   919,   922,
     925,   926,   929,   930,   931,   934,   937,   940,   943,   946,
     949,   952,   955,   958,   959,   960,   961,   962,   963,   966,
     967,   968,   969,   970,   971,   974,   975,   978,   979,   980,
     981,   982,   983,   984,   985,   986,   989,   995,   996,   997,
    1000,  1001,  1004,  1004,  1010,  1011,  1012,  1013,  1016,  1017,
    1020,  1021,  1025,  1028,  1024,  1031,  1030,  1072,  1073,  1077,
    1078,  1080,  1083,  1092,  1096,  1099,  1099,  1101,  1101,  1103,
    1103,  1105,  1105,  1115,  1116,  1119,  1120,  1128,  1129,  1131,
    1135,  1142,  1160,  1160,  1189,  1195,  1198,  1199,  1200,  1203,
    1203,  1210,  1211,  1214,  1215,  1218,  1218,  1221,  1222,  1225,
    1225,  1244,  1244,  1245,  1246,  1247,  1248,  1248,  1251,  1252,
    1255,  1256,  1257,  1258,  1261,  1261,  1280,  1280,  1335,  1336,
    1337,  1338,  1341,  1342,  1343,  1344,  1345,  1346,  1347,  1350,
    1351,  1354,  1357,  1358,  1359,  1360,  1361,  1362,  1365,  1366,
    1367,  1368,  1369,  1370,  1373,  1374,  1375,  1376,  1377,  1378,
    1379,  1380,  1383,  1386,  1389,  1392,  1395,  1398,  1401,  1404,
    1405,  1406,  1407,  1411,  1413,  1410,  1418,  1418,  1422,  1424,
    1422,  1432,  1434,  1432,  1443,  1451,  1452,  1453,  1454,  1455,
    1456,  1457,  1458,  1459,  1462,  1466,  1470,  1473,  1479,  1486,
    1487,  1488,  1489,  1490,  1491,  1492,  1493,  1494,  1497,  1497,
    1500,  1501,  1509,  1510,  1509,  1521,  1522,  1521,  1534,  1534,
    1534,  1536,  1536,  1541,  1546,  1540,  1560,  1569,  1573,  1574,
    1575,  1576,  1577,  1578,  1579,  1580,  1581,  1585,  1598,  1603,
    1584,  1651,  1652,  1655,  1656,  1659,  1667,  1668,  1669,  1670,
    1671,  1672,  1673,  1674,  1675,  1676,  1679,  1680,  1683,  1684,
    1687,  1688,  1691,  1692,  1697,  1703,  1713,  1696,  1732,  1733,
    1737,  1736,  1749,  1756,  1764,  1765,  1766,  1767,  1768,  1769,
    1770,  1771,  1772,  1776,  1775,  1786,  1787,  1796,  1796,  1799,
    1799,  1802,  1804,  1807,  1807,  1807,  1812,  1821,  1832,  1840,
    1811,  1875,  1876,  1877,  1878,  1879,  1880,  1881,  1882,  1883,
    1886,  1887,  1895,  1896,  1899,  1909,  1915,  1916,  1919,  1930,
    1948,  1952,  1960,  1961,  1964,  1965,  1966,  1967,  1968,  1971,
    1972,  1973,  1974,  1975,  1979,  1978,  2001,  2002,  2003,  2004,
    2005,  2006,  2007,  2008,  2009,  2012,  2013
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "FUNCTION", "PROCEDURE", "IDENTIFIER",
  "RETURN", "NIL", "LOCAL", "STATIC", "IIF", "IF", "ELSE", "ELSEIF", "END",
  "ENDIF", "ENDERR", "LITERAL", "TRUEVALUE", "FALSEVALUE", "NUM_DOUBLE",
  "INASSIGN", "NUM_LONG", "ANNOUNCE", "EXTERN", "DYNAMIC", "AND", "OR",
  "NOT", "PUBLIC", "EQ", "NE1", "NE2", "INC", "DEC", "ALIASOP", "DOCASE",
  "CASE", "OTHERWISE", "ENDCASE", "ENDDO", "MEMVAR", "WHILE", "LOOP",
  "EXIT", "INIT", "FOR", "NEXT", "TO", "STEP", "LE", "GE", "FIELD", "IN",
  "PARAMETERS", "PLUSEQ", "MINUSEQ", "MULTEQ", "DIVEQ", "POWER", "EXPEQ",
  "MODEQ", "PRIVATE", "BEGINSEQ", "BREAK", "RECOVER", "RECOVERUSING",
  "ALWAYS", "ENDSEQ", "DO", "WITH", "SELF", "LINE", "MACROVAR",
  "MACROTEXT", "AS_ARRAY", "AS_BLOCK", "AS_CHARACTER", "AS_CLASS",
  "AS_DATE", "AS_LOGICAL", "AS_NUMERIC", "AS_OBJECT", "AS_VARIANT",
  "AS_ARRAY_ARRAY", "AS_BLOCK_ARRAY", "AS_CHARACTER_ARRAY",
  "AS_CLASS_ARRAY", "AS_DATE_ARRAY", "AS_LOGICAL_ARRAY",
  "AS_NUMERIC_ARRAY", "AS_OBJECT_ARRAY", "DECLARE", "OPTIONAL",
  "DECLARE_CLASS", "DECLARE_MEMBER", "PROCREQ", "CBSTART", "DOIDENT",
  "FOREACH", "DESCEND", "DOSWITCH", "ENDSWITCH", "WITHOBJECT", "ENDWITH",
  "NUM_DATE", "TIMESTAMP", "EPSILON", "HASHOP", "THREAD_STATIC", "POST",
  "'='", "'<'", "'>'", "'$'", "'+'", "'-'", "'*'", "'/'", "'%'", "UNARY",
  "PRE", "'&'", "'@'", "'\\n'", "';'", "','", "'('", "')'", "'{'", "'}'",
  "':'", "']'", "'['", "'|'", "$accept", "Main", "Source", "Line",
  "Function", "$@1", "$@2", "$@3", "$@4", "Params", "AsType",
  "AsArrayType", "StrongType", "AsArray", "ParamList", "Statement", "$@5",
  "$@6", "$@7", "$@8", "$@9", "$@10", "$@11", "CompTimeStr", "CrlfStmnt",
  "$@12", "LineStat", "Statements", "EmptyStats", "ExtList", "DynList",
  "IdentName", "NumValue", "DateValue", "TimeStampValue", "NumAlias",
  "NilValue", "NilAlias", "LiteralValue", "LiteralAlias", "CodeBlockAlias",
  "Logical", "LogicalAlias", "SelfValue", "SelfAlias", "Array",
  "ArrayAlias", "ArrayAt", "ArrayAtAlias", "Hash", "HashAlias", "HashList",
  "Variable", "VarAlias", "MacroVar", "MacroVarAlias", "MacroExpr",
  "MacroExprAlias", "MacroAny", "FieldAlias", "FieldVarAlias", "AliasId",
  "AliasVar", "AliasExpr", "VariableAt", "VariableAtAlias", "FunIdentCall",
  "FunCall", "FunRef", "FunCallAlias", "ArgList", "Argument",
  "RefArgument", "ExtArgument", "ObjectData", "SendId", "ObjectRef",
  "ObjectDataAlias", "ObjectMethod", "ObjectMethodAlias",
  "SimpleExpression", "Expression", "ExtExpression", "EmptyExpression",
  "LValue", "LeftExpression", "PostOp", "ExprPostOp", "ExprPreOp",
  "ExprUnary", "ExprEqual", "ExprAssign", "ExprPlusEq", "ExprMinusEq",
  "ExprMultEq", "ExprDivEq", "ExprModEq", "ExprExpEq", "ExprOperEq",
  "ExprMath", "ExprBool", "ExprRelation", "ArrayIndex", "IndexList",
  "ElemList", "BlockHead", "@13", "BlockVars", "BlockVarList",
  "BlockExpList", "CodeBlock", "@14", "$@15", "@16", "BlockEnd", "ExpList",
  "PareExpList", "PareExpListAlias", "IfInline", "IfInlineAlias",
  "VarDefs", "$@17", "$@18", "$@19", "$@20", "VarList", "ExtVarList",
  "ExtVarDef", "VarDef", "@21", "DimList", "DimIndex", "FieldsDef", "$@22",
  "FieldList", "InAlias", "MemvarDef", "$@23", "MemvarList", "Declaration",
  "$@24", "$@25", "$@26", "DecDataList", "ClassInfo", "DecMethod", "$@27",
  "DecData", "$@28", "DecList", "DecListExt", "DummyArgList",
  "DummyArgument", "FormalList", "OptList", "ExecFlow", "ErrEndFor",
  "ErrEndCase", "ErrEndIf", "ErrEndWith", "ErrEndSeq", "ErrEndWhile",
  "ErrEndSwitch", "IfEndif", "IfBegin", "$@29", "@30", "IfElse", "$@31",
  "IfElseIf", "$@32", "@33", "$@34", "@35", "EndIf", "EndIfID", "DoCase",
  "EndCase", "EndCaseID", "DoCaseStart", "$@36", "DoCaseBegin", "Cases",
  "$@37", "@38", "$@39", "@40", "Otherwise", "$@41", "$@42", "$@43",
  "DoWhile", "@44", "$@45", "WhileBegin", "EndWhile", "EndWhileID",
  "ForNext", "@46", "@47", "@48", "ForAssign", "StepExpr", "ForStatements",
  "EndForID", "ForVar", "ForList", "ForExpr", "ForArgs", "ForEach", "$@49",
  "@50", "@51", "Descend", "DoSwitch", "$@52", "EndSwitch", "EndSwitchID",
  "SwitchStart", "$@53", "SwitchBegin", "SwitchCases", "$@54", "$@55",
  "SwitchDefault", "$@56", "$@57", "BeginSeq", "@58", "@59", "$@60",
  "$@61", "EndSeqID", "BlockSeq", "AlwaysSeq", "Always", "RecoverSeq",
  "RecoverEmpty", "RecoverUsing", "DoProc", "DoArgs", "DoArgList",
  "DoArgument", "WithObject", "@62", "EndWithID", "Crlf", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,    61,    60,    62,    36,    43,    45,    42,    47,    37,
     366,   367,    38,    64,    10,    59,    44,    40,    41,   123,
     125,    58,    93,    91,   124
};
# endif

#define YYPACT_NINF -678

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-678)))

#define YYTABLE_NINF -644

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
    4696,   166,  8077,  8077,  -678,   170,  -678,   365,   540,   -68,
    6981,  -678,  -678,  -678,    36,    45,  8077,  8077,  8077,   571,
    6981,  6981,  -678,   732,  -678,   170,   170,  7481,  -678,  -678,
      73,  -678,  1401,  2120,  -678,   170,   239,  -678,   107,  -678,
    -678,  8077,  -678,  8077,    89,   122,  -678,   174,  7481,  -678,
    -678,  6981,  -678,  -678,  -678,     9,  -678,  -678,  7106,  6481,
    3317,   253,  4830,  -678,  -678,  -678,    14,   108,   108,   108,
    2328,    26,  3317,    31,  3317,  3317,    53,  3317,    60,  3317,
      75,  3317,   240,  3317,    76,  3317,   108,  2328,   252,  2328,
     276,  2328,   307,  4557,  3317,   108,   196,   283,  3317,  -678,
      22,  3317,    41,   183,  3317,    55,  3317,  2268,  -678,  -678,
    -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,   166,
      81,    66,  2328,   114,  3317,  -678,  -678,  -678,  -678,  -678,
    -678,  1035,  -678,  5211,  1667,  -678,  6981,  -678,  -678,  -678,
    5338,  1173,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,
    -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,   198,
     203,  6981,  -678,   166,  8077,  8077,  6981,  6981,    73,  6981,
    6981,  8077,   479,   522,  1071,  1352,  1524,  1974,  7538,  2172,
    3139,  2623,  7772,   834,  2881,   -49,  1483,  3018,  3208,  7617,
    -678,  4293,  7655,  -678,  7726,   560,  -678,  -678,  -678,  -678,
    -678,  -678,  -678,  -678,  2823,   207,  7734,  2926,  -678,  -678,
    -678,   134,  -678,   250,  -678,  8055,  -678,  -678,   166,  8077,
    -678,  -678,    29,   152,   181,   -16,   108,    39,    88,    34,
      90,    72,   221,    17,    92,   337,  8077,  8077,  8055,   321,
    6981,  -678,  -678,  -678,   174,    28,   211,   897,  4256,   269,
     166,   287,   288,  7863,  6606,  -678,   281,   -16,    99,  -678,
      -5,  6981,  4097,  8077,  6981,  -678,  8077,    84,  -678,   294,
    7481,   124,  -678,  -678,  -678,  4372,  -678,   147,  -678,  -678,
    -678,  -678,   166,  -678,  -678,  -678,  -678,  -678,  -678,  6731,
    6856,  -678,    49,  -678,  -678,  -678,  -678,  -678,  -678,  -678,
    -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,
    -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,
    -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  6731,
    -678,  -678,    36,    45,   374,  -678,   376,  -678,   383,  -678,
    -678,   400,  -678,   407,  -678,    75,  -678,   240,  -678,   414,
    -678,  -678,  -678,  -678,  -678,   417,   419,  -678,   422,  -678,
    -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,
    -678,  6731,  -678,  3317,  -678,  -678,  -678,  -678,  -678,  6981,
    -678,  -678,  6981,  6981,  6981,  6981,  6981,  6981,  6981,  3317,
    -678,  -678,  -678,  -678,  -678,  -678,  6981,  -678,  -678,  -678,
    -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,
     166,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,
    -678,  -678,  -678,  -678,  -678,  -678,  -678,  1385,  1554,  -678,
    -678,  -678,  -678,  -678,  -678,  5465,  -678,  -678,  -678,  -678,
    -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,
    -678,  -678,  1716,  1244,   280,  5592,  -678,  -678,  -678,  -678,
    -678,  -678,  -678,  -678,  -678,   267,  -678,  -678,  -678,   166,
     336,   166,   342,  4097,  -678,  3599,   303,  -678,   303,  3547,
    2684,  -678,  -678,   344,  -678,  -678,  -678,  -678,  8077,  -678,
    -678,  -678,  -678,  -678,  -678,  -678,  -678,  8077,  -678,  -678,
    -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  6981,  6981,
    6981,  6981,  6981,  6981,  6981,  6981,  6981,  6981,  6981,  6981,
    6981,  6981,  6981,  6981,  6981,  6981,   166,  -678,   166,  8077,
    -678,  8077,  -678,  3599,   351,  -678,  -678,  -678,  4256,   364,
    -678,  -678,  6981,  -678,  4256,     0,   364,   351,  6981,   166,
    4097,  -678,   394,  -678,  -678,  8077,   166,  -678,  -678,  -678,
    -678,  -678,   461,   166,  -678,  4256,   349,   367,  7231,   268,
     398,  -678,   420,  7726,  3947,   368,  -678,  7356,  7481,  4097,
    -678,   303,   286,  -678,  -678,    65,    70,   -16,    39,    74,
      34,  6981,  -678,  6981,  6731,  -678,  -678,   172,  -678,  7726,
    -678,  7726,  -678,  6856,   358,   216,   222,  -678,  7726,  7726,
    7726,  7726,  7726,  7726,  7726,  7726,  -678,  7726,   371,  6354,
    -678,  6981,  -678,  -678,  1385,  -678,  -678,  6981,   166,  -678,
    -678,  1244,  -678,  -678,  -678,  6981,  -678,  1824,  -678,  -678,
    7885,  -678,  7885,  -678,  6981,   481,  1604,    94,  8077,  -678,
    -678,  7231,  -678,  -678,   687,  7726,  2684,  2684,  2684,  2052,
    2052,   445,  2684,  2052,  2052,  2052,   329,   329,   190,   190,
     190,  7726,  -678,  -678,  -678,  -678,   485,  1604,  8055,   166,
    -678,  8077,  -678,  7726,  -678,  8077,  8077,   166,  -678,   166,
    7726,  5084,  -678,   491,  -678,  1265,   269,   897,  -678,  -678,
    -678,  8077,  2039,  -678,  -678,  -678,  -678,  7959,  -678,  7231,
    8077,  7726,  -678,   385,  -678,  -678,  6227,  -678,  -678,  7609,
    -678,  -678,  6731,  -678,  -678,  6856,  -678,  -678,  6981,   379,
    4957,    27,  6227,   280,  6981,  -678,   280,  -678,  6981,  -678,
     166,  6227,  7726,   166,  6981,  -678,  -678,  -678,   392,   402,
    4256,   404,  7726,   505,  -678,  -678,  6981,   397,  -678,   412,
    5719,  6981,  -678,  -678,  -678,  4256,   494,  -678,  4256,  -678,
    -678,  -678,   166,  2597,  8077,  4256,   423,   424,   426,  4256,
    -678,  -678,  -678,  -678,   155,  -678,  -678,   430,   428,   426,
    -678,  4256,  -678,   344,  7356,   448,  1828,  6981,  -678,  -678,
    7726,  -678,   434,  -678,  -678,  -678,  -678,   280,  -678,  5973,
     280,  5973,  -678,   166,  -678,  7726,   166,  7981,  -678,   166,
    6981,  7726,  6981,  7231,  -678,  7726,  -678,  6981,  -678,   373,
    -678,  8077,  4256,  6482,  -678,  4256,  3184,   467,  -678,  8077,
     166,  4256,  2464,  -678,  -678,  -678,  -678,  -678,  -678,  -678,
    -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  5719,
    -678,  5846,  -678,  -678,  -678,  1873,  5846,  5846,   166,  -678,
    -678,  4256,  -678,  7726,  7726,   436,     5,  -678,  8077,  -678,
     166,   166,  6607,  -678,  6981,  -678,   166,  8077,  4256,   426,
    3446,  -678,  -678,  -678,  -678,   439,   166,  -678,  5719,  -678,
    5846,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,
    -678,  -678,  -678,  -678,  5846,  -678,  -678,  6981,  -678,  -678,
     495,  6100,  6100,  6981,  -678,  -678,   229,  -678,  -678,  6732,
    -678,  8077,  4256,   -42,  -678,  -678,  -678,  -678,   207,   166,
    -678,  -678,   166,  -678,  -678,   237,  6981,  -678,  6981,  -678,
    6857,  -678,  -678,  6227,  -678,  1972,  6227,  -678,  -678,   241,
    6981,  -678,  2209,  -678,  6227,  -678,  -678,  -678,  -678,  -678,
    -678,  -678,  -678,  -678,  -678,  -678,  -678,   256,  -678,  -678,
    8077,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,
    -678
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,     0,     0,     0,   107,    74,   131,   385,   387,     0,
       0,   133,   136,   137,   125,   126,   116,   114,   115,    76,
       0,     0,   518,   415,   536,   110,   111,     0,   109,   108,
     409,   112,   391,    79,   606,    69,     0,   139,     0,   152,
     153,     0,   113,     0,     0,   123,   362,   632,     0,   124,
     593,     0,   127,   128,   389,     0,   655,   656,     0,   287,
       0,     0,     0,     8,     6,     7,   150,   296,   298,   299,
       0,   297,     0,   300,     0,     0,   302,     0,   303,     0,
     304,     0,   305,     0,   306,     0,   310,     0,   157,     0,
     158,     0,   309,     0,     0,   307,   308,   311,     0,   223,
     313,     0,   315,     0,     0,   316,     0,     0,    92,    92,
      92,    92,   333,   334,   335,   336,   337,   338,    92,   372,
     301,   312,     0,   314,     0,    82,    83,    84,     5,    92,
     464,     0,   465,     0,     0,   466,     0,   467,   469,   470,
       0,   580,   468,    92,   471,     4,     9,   117,   119,   116,
     114,   115,   121,   118,   110,   111,   122,   120,   123,    19,
      21,     0,    73,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   247,   249,   250,   248,   251,   253,   254,   256,
     257,   258,   280,   261,   262,   309,   259,   260,   263,   264,
     284,   267,   269,   279,   379,     0,   273,   274,   275,   271,
     272,   276,   277,   278,   252,   483,   281,   266,   130,   129,
      87,     0,   103,     0,   105,     0,   320,   321,     0,     0,
      72,    71,   150,   157,   158,   290,   308,   294,   313,   293,
     316,     0,     0,   295,   314,   159,     0,     0,     0,   620,
       0,    68,   157,   158,   632,     0,   421,     0,    31,     0,
       0,    90,     0,   364,     0,   631,   150,   567,   312,   568,
       0,     0,     0,     0,     0,   155,     0,     0,   236,     0,
       0,     0,   237,   230,   360,   288,   229,     0,   241,   242,
     240,     1,     0,    14,    12,    13,    11,    10,   151,   287,
       0,   203,     0,   205,   206,   175,   176,   177,   197,   132,
     204,   181,   134,   207,   182,   184,   138,   209,   183,   140,
     211,   186,   142,   143,   187,   144,   188,   147,   210,   185,
     212,   194,   198,   154,   178,   199,   156,   179,   200,   287,
      60,   215,     0,     0,   175,   162,     0,   166,     0,   167,
     169,     0,   168,     0,   170,     0,   171,     0,   172,     0,
     173,   161,   164,   165,   195,     0,   202,   163,     0,   174,
     196,   213,    58,   214,   221,   189,   226,    57,   218,   191,
     244,   287,   216,     0,   192,   246,    59,   217,   193,     0,
     317,   318,     0,     0,     0,     0,     0,     0,     0,     0,
     319,    63,    62,    65,    66,    64,     0,   375,   135,   208,
     382,    61,   220,   180,   201,   384,    56,   219,   190,    55,
       0,   488,   496,   495,   497,   473,   477,   472,   476,   478,
     475,   498,   499,   501,   502,   500,   503,     0,     0,   479,
     494,    98,    97,    95,    99,     0,    96,    94,   510,   474,
     511,   522,   528,   509,   513,   512,   515,   516,   514,   517,
     506,   508,     0,     0,     0,     0,   585,   586,   584,   588,
     589,   587,   591,   592,   590,     0,   582,   583,    67,     0,
       0,     0,     0,     0,    93,    31,     0,   393,     0,     0,
     322,   324,   323,     0,   225,    44,    39,    36,     0,    37,
      38,    35,    40,    42,    49,    50,    46,     0,    47,    48,
      45,    51,   255,    43,   282,   265,   268,   270,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   283,     0,     0,
      85,     0,    86,    31,    77,   395,   397,   519,    31,     0,
     552,   551,     0,   160,    31,   413,     0,    80,     0,     0,
       0,   630,     0,    16,   419,     0,     0,   423,   426,    32,
     434,   425,     0,     0,   365,    31,     0,   366,   634,   150,
     284,   640,   279,     0,   281,   633,   636,     0,     0,     0,
     644,     0,     0,   381,   145,   231,   232,   233,   235,   225,
     234,     0,   146,   287,   287,   141,    15,     0,   227,   288,
     285,   286,   357,     0,   356,     0,     0,   239,   326,   327,
     328,   329,   330,   332,   331,   325,   238,   370,   373,     0,
     486,     0,   480,   491,     0,   481,   100,     0,     0,   525,
     504,     0,   531,   505,   533,     0,   603,     0,   601,    20,
      27,    22,    27,    75,     0,   401,    33,     0,     0,   386,
     388,   287,    41,    52,   345,   346,   347,   352,   353,   350,
     351,   344,   355,   348,   349,   354,   339,   340,   341,   342,
     343,   380,   484,    88,   104,   106,   398,    33,     0,     0,
     417,     0,   416,   547,   411,     0,     0,     0,   392,     0,
     621,     0,    70,     0,    17,   438,   436,     0,   430,   432,
     424,     0,   442,    91,    89,   368,   363,     0,   635,   637,
       0,   571,   572,   574,   569,   594,     0,   390,   243,     0,
     148,   361,   287,   222,   358,     0,   224,   245,     0,     0,
       0,     0,     0,     0,     0,   482,     0,   529,     0,   507,
       0,     0,   597,     0,     0,   581,   602,    28,     0,    29,
      31,     0,   406,     0,   404,    34,     0,   405,   394,     0,
       0,     0,   400,   396,    78,    31,     0,   414,    31,   410,
      81,   607,     0,   113,     0,    31,     0,   439,   440,    31,
     431,   433,   422,   436,     0,   428,   445,     0,   443,   444,
     367,    31,   638,   570,     0,   578,     0,   287,   228,   359,
     371,   374,     0,   377,   376,   487,   489,     0,   523,     0,
       0,     0,   534,     0,   604,   599,     0,     0,    53,     0,
       0,   407,     0,   287,   485,   399,   418,     0,   412,   625,
      18,     0,    31,    31,   452,    31,     0,     0,   437,     0,
       0,    31,     0,   369,   573,   579,   575,   647,   648,   646,
     650,   651,   649,   653,   652,   654,   645,   149,   378,     0,
     492,     0,   530,   526,   532,     0,     0,     0,     0,    24,
      30,    31,    26,   403,   408,     0,   553,   628,     0,   608,
       0,     0,    31,   458,   287,   453,     0,     0,    31,   441,
       0,   429,   427,   435,   446,   447,     0,   490,     0,   524,
       0,   539,   540,   538,   542,   543,   541,   544,   545,   546,
     535,   537,   598,   605,     0,    54,   383,     0,   548,   629,
     622,     0,     0,   287,   459,   451,     0,   449,   420,    31,
     455,     0,    31,     0,   576,   493,   527,   600,   554,     0,
     624,   609,     0,   626,   627,     0,   287,   454,   287,   456,
      31,   461,   448,     0,   549,     0,     0,   460,   450,     0,
     287,   462,     0,   577,     0,   612,   613,   611,   615,   616,
     614,   618,   617,   619,   610,   623,   457,     0,   558,   559,
     556,   561,   560,   563,   564,   562,   565,   555,   550,   463,
     557
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -678,  -678,  -678,   171,   507,  -678,  -678,  -678,  -678,   -72,
     948,  -105,  -159,  -591,  -678,   194,  -678,  -678,  -678,  -678,
    -678,  -678,  -678,  -678,   119,  -678,  -428,   -77,  1100,  -678,
    -678,    -2,  1807,  1852,  1976,   478,   297,   492,   608,   493,
     496,   901,   497,   937,   498,  1017,   506,  1230,   509,  1378,
     510,  -678,  2051,   514,   195,   516,   279,   518,   381,   352,
    -678,  8097,  2134,  2234,  2392,  -678,  -163,  2563,  -242,  -678,
    -247,  -646,  -228,   -53,  2637,  -254,  -678,  -678,  2682,  -678,
    -225,  3934,  -567,  -487,  -678,  2896,  -678,  2909,  2976,  -678,
    -678,  3005,  -678,  -678,  -678,  -678,  -678,  -678,  3154,  -678,
    -678,  -678,  4066,  -678,  -678,  -678,  -678,  -678,  -678,  -678,
    1578,  -678,  -678,  -678,  -678,    -8,   688,   521,  1624,   529,
    -678,  -678,  -678,  -678,  -678,  -103,   350,   -55,  -198,  -678,
      91,  -678,  -678,  -678,  -678,  -678,  -678,  -678,   388,   204,
    -678,  -678,  -678,  -678,  -678,  -531,  -678,  -663,  -678,  -678,
    -678,  -677,  -313,   -66,  -658,  -678,   -74,  -138,  -104,  -130,
    -121,  -106,  -116,  -678,  -678,  -678,  -678,   206,  -678,  -678,
    -678,  -678,  -678,  -678,  -418,  -678,  -678,  -431,  -678,  -678,
    -678,  -678,  -678,  -678,  -678,  -678,  -678,   185,  -678,  -678,
    -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,
    -678,  -678,  -678,  -325,  -678,    63,  -678,  -152,  -678,  -678,
    -678,  -678,  -678,  -678,  -678,  -678,     6,  -678,  -678,  -678,
    -678,  -678,  -678,  -678,     7,  -678,  -678,  -678,  -678,  -678,
    -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,  -678,
     401,  -678,  -537,  -678,  -678,  -678,  3728
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    61,    62,   432,    64,   469,   471,   470,   472,   748,
     558,   754,   559,   503,   749,   433,   240,   161,   215,   679,
     238,   689,   528,   252,   162,   163,   434,   730,   962,   211,
     213,    66,   172,   173,   174,    70,   175,    72,   176,    74,
      75,   177,    77,   178,    79,   179,    81,   180,    83,   181,
      85,   271,   182,    87,   183,    89,   184,    91,   185,    93,
      94,   297,   186,   187,   188,    98,    99,   189,   190,   101,
     597,   272,   273,   598,   191,   280,   103,   104,   192,   106,
     193,   599,   602,   276,   231,   195,   390,   196,   197,   198,
     110,   199,   112,   113,   114,   115,   116,   117,   200,   201,
     202,   203,   361,   292,   277,   119,   253,   566,   567,   618,
     204,   396,   729,   619,   804,   267,   206,   122,   207,   124,
     125,   164,   165,   263,   237,   476,   534,   535,   477,   753,
     646,   647,   126,   236,   545,   687,   127,   219,   539,   436,
     695,   555,   701,   784,   697,   250,   702,   699,   779,   776,
     787,   926,   927,   777,   778,   129,   421,   422,   445,   423,
     424,   425,   426,   130,   131,   526,   760,   427,   732,   428,
     621,   859,   734,   898,   429,   430,   132,   450,   451,   133,
     218,   134,   452,   627,   861,   738,   900,   453,   628,   809,
     740,   135,   741,   865,   136,   910,   911,   137,   766,   939,
     964,   542,   918,   963,   987,   259,   260,   712,   713,   138,
     795,   896,   953,   846,   139,   465,   466,   467,   140,   261,
     141,   637,   813,   868,   638,   743,   867,   142,   239,   829,
     920,   955,   974,   549,   941,   942,   879,   880,   881,   143,
     255,   575,   576,   144,   716,   856,   437
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     159,   160,   205,   460,   446,   759,   274,   626,   484,   622,
     625,   462,   570,   447,   210,   212,   214,   536,   449,   502,
     463,   630,   633,   504,   698,   222,   571,   626,   448,   572,
     505,   708,   506,   507,   781,   464,   724,   461,   785,   246,
     536,   247,   249,   802,   789,   552,   256,   527,   577,   288,
    -289,   890,   400,   685,   917,   755,   435,   366,   278,   166,
     444,   299,   478,   455,   288,   952,   302,   459,   295,   370,
     295,   208,   295,   295,   364,   295,   370,   295,   329,   295,
     209,   295,   605,   295,   290,   295,   755,   295,   306,   295,
     375,   334,   295,   540,     4,   309,   295,   147,   148,   295,
     288,   400,   295,   484,   295,   323,   720,   589,   235,  -223,
     312,   317,   149,   150,   151,  -307,   398,   290,   152,   607,
     295,   578,   295,   366,   606,   375,   686,   405,   454,   245,
     153,   525,   154,   155,   400,   616,   264,    28,    29,   251,
    -289,   289,    31,   156,   220,   221,   -92,   -92,  -312,   405,
     290,   157,    56,    57,   241,   290,   289,   803,   799,   290,
     581,   371,   475,   475,   290,  -315,   780,   290,   371,   483,
    -311,    63,   792,  -291,   290,   603,   891,   875,   889,   -92,
     -92,   604,    42,   541,   895,   158,   290,   323,   290,    49,
     -92,   -92,   289,   290,    65,    88,  -150,  -157,  -150,   290,
     739,  -157,  -292,  -157,   128,  -223,   735,  -223,   290,   290,
     525,   330,   583,   475,   290,   362,   326,   538,   248,   367,
     756,   290,   223,   290,   376,   290,   757,   391,   392,   393,
     394,   242,   290,   283,   544,   538,   475,   395,   -92,   -92,
     401,   290,   406,    88,   254,   556,   945,   290,   409,   515,
     591,   565,   569,   281,   592,   242,   285,    88,    56,    57,
     529,   475,   468,  -291,   582,   242,   286,   242,   585,   242,
     242,   959,   242,   594,   242,   315,   242,   595,   242,    90,
     242,   839,   242,   977,   242,   840,   242,   323,    88,   242,
      56,    57,  -292,   242,   -92,   -92,   242,    71,   722,   242,
     723,   242,   626,   288,   635,   636,   224,   522,   523,   524,
     857,   326,    39,    40,   373,   243,   288,   242,   364,   242,
     -92,   -92,   446,   446,    71,   -23,   570,    90,    88,   290,
     -25,   447,   447,   525,  -566,    88,   449,   449,   554,   243,
     571,    90,   722,   572,   726,    71,   448,   448,   722,   243,
     727,   243,   389,   243,   243,   946,   243,   947,   243,    71,
     243,    55,   243,   946,   243,   957,   243,   946,   243,   976,
     243,   278,    90,   243,    56,    57,   531,   243,   444,   444,
     243,    92,   946,   243,   989,   243,  -117,   278,   515,   168,
     336,   548,  -639,  -639,  -639,   289,   560,   925,  -117,  -117,
    -117,   243,   562,   243,    56,    57,   525,  -566,   289,   288,
     533,   299,    90,   289,   718,   527,   563,   244,   302,    90,
    -117,  -117,  -117,  -117,   584,  -117,  -117,    56,    57,   648,
      71,   -92,   -92,   533,   329,   306,   925,    71,   877,   878,
     290,   279,   309,    92,   520,   521,   522,   523,   524,   317,
     758,   296,   398,   296,   400,   296,   296,   405,   296,   925,
     296,   925,   296,   640,   296,   586,   296,   570,   296,   642,
     296,   289,   296,   925,   296,   296,  -117,   678,   703,   296,
     536,   571,   296,   706,   572,   296,   652,   296,    56,    57,
     681,   725,  -117,   707,   709,   653,  -117,   728,  -117,   460,
    -296,   446,  -402,   296,   515,   296,   761,   462,   772,   801,
     447,   794,  -296,  -296,    92,   449,   463,   693,    56,    57,
     816,    92,  -641,  -641,  -641,   448,   820,   674,   817,   675,
     822,   464,   819,   461,  -296,  -296,  -296,  -296,   823,  -296,
    -296,   721,   827,  -298,  -642,  -642,  -642,   484,   845,    90,
     836,   835,   837,   696,   842,  -298,  -298,   444,   841,   858,
     890,  -119,   940,   459,   916,   933,   569,    71,   242,   284,
     751,   335,   762,  -119,  -119,  -119,   256,  -298,  -298,  -298,
    -298,   379,  -298,  -298,   242,   337,   339,   543,   547,   340,
     342,   344,  -121,   380,   381,  -119,  -119,  -119,  -119,   346,
    -119,  -119,   348,   350,  -121,  -121,  -121,   351,    73,   352,
    -296,   353,   290,   733,   357,   382,   383,   384,   385,   736,
     386,   387,   359,   763,   677,   546,  -121,  -121,  -121,  -121,
      88,  -121,  -121,   958,   624,    73,   788,   631,   750,   988,
     750,   714,   844,   745,   746,   551,   475,     0,     0,     0,
      88,  -119,   243,  -298,     0,   290,    73,     0,   851,     0,
       0,     0,     0,     0,     0,     0,     0,  -119,   243,   798,
      73,  -119,     0,  -119,     0,   853,   475,     0,     0,   765,
     855,     0,  -121,   767,   768,     0,     0,     0,   121,     0,
     854,   389,   852,   775,     0,   696,     0,     0,  -121,   783,
     775,   338,  -121,     0,  -121,   791,     0,   569,   793,     0,
       0,     0,     0,   508,    90,   233,     0,   510,   511,   512,
       0,     0,   850,     0,     0,     0,   807,   905,     0,     0,
     810,     0,    71,     0,    90,   907,   258,   513,   514,     0,
       0,    73,     0,   265,   908,     0,   515,     0,    73,   909,
     121,     0,    71,  -118,   279,     0,     0,     0,   298,     0,
       0,   906,     0,     0,     0,  -118,  -118,  -118,     0,     0,
     279,   832,   833,    88,     0,   322,     0,   325,     0,   328,
       0,   356,     0,     0,     0,     0,     0,  -118,  -118,  -118,
    -118,   904,  -118,  -118,     0,     0,     0,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,     0,     0,     0,
     404,     0,     0,     0,    88,   871,    92,   969,     0,   876,
       0,   121,     0,     0,   981,   971,     0,     0,   121,   882,
       0,     0,   983,     0,   888,     0,    92,   783,     0,   973,
     888,   984,     0,  -118,     0,     0,   986,     0,     0,   972,
       0,   970,     0,     0,     0,  -157,   985,    90,   982,  -118,
       0,     0,     0,  -118,     0,  -118,     0,  -157,  -157,   323,
       0,     0,     0,   533,     0,    71,   919,     0,    73,     0,
       0,   968,     0,     0,     0,   929,    88,     0,   932,  -157,
    -157,  -157,  -157,     0,  -157,  -157,     0,     0,    90,     0,
       0,    76,     4,     0,     0,   147,   148,     0,     0,   938,
       0,    88,     0,     0,     0,     0,    71,     0,     0,     0,
     149,   150,   151,     0,     0,    88,   152,    88,    76,   950,
       0,     0,     0,     0,     0,     0,    88,    78,   153,     0,
     154,   155,   574,     0,     0,    28,    29,     0,     0,    76,
      31,   156,     0,     0,     0,    88,     0,     0,   258,   157,
       0,  -157,     0,    76,    78,  -157,     0,  -157,     0,     0,
      90,     0,     0,     0,     0,     0,     0,     0,   990,     0,
       0,     0,     0,     0,     0,    78,     0,     0,    71,     0,
      42,     0,     0,   158,   341,    90,     0,    49,     0,    78,
      92,     0,     0,     0,    88,     0,    88,     0,     0,    90,
       0,    90,     0,    71,     0,     0,     0,    80,     0,     0,
      90,    56,    57,     0,     0,     0,     0,    71,     0,    71,
     343,     0,     0,     0,    76,     0,     0,     0,    71,    90,
       0,    76,     0,    73,    80,     0,     0,   410,   411,   412,
     413,   414,     0,     0,    88,     0,    88,    71,     0,     0,
       0,    88,    88,    73,     0,    80,     0,     0,     0,     0,
      78,     0,    92,     0,   415,   416,     0,    78,     0,    80,
       0,     0,   417,     0,     0,     0,     0,     0,    90,     0,
      90,     0,  -299,    88,     0,    88,     0,    92,     0,     0,
       0,     0,     0,   418,  -299,  -299,    71,     0,    71,    88,
     345,    92,     0,    92,     0,     0,    88,    88,     0,     0,
       0,     0,    92,   121,     0,     0,  -299,  -299,  -299,  -299,
       0,  -299,  -299,     0,     0,     0,     0,   419,    90,   420,
      90,    92,     0,   121,     0,    90,    90,     0,    88,     0,
      80,    88,     0,     0,     0,     0,    71,    80,    71,    88,
       0,     0,     0,    71,    71,     0,     0,     0,     0,     0,
       0,    76,     0,     0,     0,     0,     0,    90,     0,    90,
       0,     0,     0,     0,     0,     0,    73,   456,   439,   457,
      92,     0,    92,    90,     0,    71,     0,    71,     0,     0,
      90,    90,  -299,     0,   290,     0,     0,    78,     0,     0,
       0,    71,   415,   416,     0,     0,     0,     0,    71,    71,
     417,     0,     0,     0,     0,     0,     0,    73,     0,     0,
      82,     0,    90,     0,     0,    90,     0,     0,     0,     0,
      92,   418,    92,    90,     0,     0,     0,    92,    92,     0,
      71,     0,     0,    71,     0,     0,   574,    82,   438,   439,
     440,    71,     0,     0,     0,     0,   258,     0,     0,     0,
       4,     0,     0,   147,   148,   458,     0,   420,    82,    92,
       0,    92,   632,   443,   416,     0,     0,    80,   149,   150,
     151,   417,    82,     0,   152,    92,     0,     0,     0,    73,
       0,     0,    92,    92,     0,     0,   153,   121,   154,   155,
       0,     0,   418,    28,    29,     0,     0,     0,    31,   156,
       0,     0,     0,   347,    73,     0,     0,   157,     0,     0,
       0,     0,     0,     0,    92,     0,    76,    92,    73,     0,
      73,     0,     0,     0,     0,    92,   419,     0,   420,    73,
       0,     0,     0,     0,     0,     0,    76,     0,   773,     0,
       0,   158,     0,    82,     0,    49,     0,     0,    73,     0,
      82,     0,    78,  -297,     0,     0,     0,     0,    84,   121,
       0,     0,     0,     0,     0,  -297,  -297,   299,   774,     0,
       0,     0,    78,     0,     0,     0,     0,   574,     0,   412,
     413,   414,     0,     0,   121,    84,     0,  -297,  -297,  -297,
    -297,     0,  -297,  -297,     0,     0,     0,    73,   121,    73,
     121,     0,  -122,   645,   415,   416,    84,     0,     0,   121,
       0,     0,   417,     0,  -122,  -122,  -122,     0,     0,     0,
      84,     0,     0,     0,     0,     0,     0,     0,   121,     0,
       0,     0,    80,   418,     0,     0,  -122,  -122,  -122,  -122,
       0,  -122,  -122,     0,     0,     0,     0,    73,     0,    73,
       0,   349,    80,     0,    73,    73,     0,     0,     0,    76,
       0,   676,     0,  -297,     0,   290,   680,   419,     0,   420,
       0,     0,   684,     0,     0,     0,     0,   121,     0,   121,
      82,     0,     0,     0,  -307,     0,    73,     0,    73,     0,
       0,    84,  -122,   705,     0,    78,  -307,  -307,    84,     0,
      76,     0,    73,     0,     0,     0,     0,     0,  -122,    73,
      73,     0,  -122,     0,  -122,     0,     0,     0,  -307,  -307,
    -307,  -307,     0,  -307,  -307,  -300,     0,   121,     0,   121,
       0,     0,     0,     0,   121,   121,    78,  -300,  -300,   302,
       0,    73,     0,     0,    73,     0,   410,   623,   412,   413,
     414,     0,    73,     0,     0,     0,     0,     0,   120,  -300,
    -300,  -300,  -300,     0,  -300,  -300,   121,     0,   121,     0,
       0,     0,    76,   415,   416,    80,     0,     0,     0,     0,
       0,   417,   121,     0,     0,   120,     0,     0,     0,   121,
     121,     0,     0,     0,  -307,     0,   290,    76,     0,     0,
       0,     0,   418,     0,   123,     0,   120,     0,    78,     0,
       0,    76,     0,    76,     0,     0,    80,     0,     0,     0,
     120,   121,    76,     0,   121,     0,     0,     0,    84,     0,
       0,   234,   121,    78,     0,  -300,   419,   290,   420,     0,
       0,    76,     0,     0,     0,    82,     0,    78,     0,    78,
       0,   355,   234,     0,     0,     0,     0,     0,    78,   485,
       0,   438,   439,   440,     0,    82,   123,     0,   494,   495,
     496,   497,   498,   499,   500,   501,     0,    78,   818,     0,
       0,     0,     0,     0,   441,   442,   443,   416,    80,     0,
      76,   120,    76,   826,   417,     0,   828,   358,   120,   731,
       0,     0,     0,   834,     0,     0,     0,   838,     0,     0,
     438,   439,   440,    80,     0,   418,     0,     0,     0,   843,
       0,     0,     0,     0,     0,     0,    78,    80,    78,    80,
       0,     0,     0,   629,   442,   443,   416,   123,    80,     0,
      76,     0,    76,   417,   123,     0,     0,    76,    76,   419,
       0,   420,     0,     0,     0,     0,     0,    80,     0,     0,
     883,   885,     0,   886,   418,     0,     0,     0,     0,   893,
       0,   771,     0,     0,     0,     0,    78,     0,    78,    76,
       0,    76,     0,    78,    78,     0,     0,    67,    82,     0,
       0,     0,     0,    84,     0,    76,   796,     0,   419,   915,
     420,     0,    76,    76,     0,     0,    80,     0,    80,     0,
     924,     0,   805,    84,    67,    78,   930,    78,   456,   439,
     457,   812,   847,   439,   848,     0,     0,     0,   120,    82,
       0,    78,    68,     0,    76,    67,     0,    76,    78,    78,
     824,   744,   636,   415,   416,    76,     0,   415,   416,    67,
       0,   417,     0,     0,     0,   417,    80,   949,    80,    68,
     951,     0,     0,    80,    80,     0,     0,   901,   439,   902,
      78,     0,   418,    78,   234,     0,   418,     0,   961,     0,
      68,    78,     0,     0,     0,     0,     0,     0,     0,   862,
       0,   864,   415,   903,    68,    80,     0,    80,     0,     0,
     417,    82,     0,     0,     0,     0,   458,     0,   420,     0,
     419,    80,   849,     0,     0,     0,     0,     0,    80,    80,
      67,   418,     0,     0,     0,     0,    82,    67,     0,     0,
       0,     0,     0,     0,     0,     0,    84,     0,     0,   897,
      82,   899,    82,     0,     0,     0,   912,   913,     0,     0,
      80,    82,     0,    80,     0,   419,    69,   420,     0,     0,
       0,    80,     0,     0,     0,    68,   965,   439,   966,     0,
      82,     0,    68,     0,     0,  -302,     0,    84,   935,     0,
     936,     0,     0,    69,     0,     0,     0,  -302,  -302,   306,
       0,   415,   416,   120,   937,     0,     0,     0,     0,   417,
       0,   943,   944,     0,    69,     0,     0,     0,     0,  -302,
    -302,  -302,  -302,   120,  -302,  -302,     0,     0,    69,    82,
     967,    82,     0,     0,     4,     0,     0,   147,   148,     0,
       0,    86,     0,     0,     0,     0,   975,     0,     0,   123,
       0,     0,   149,   150,   151,     0,     0,     0,   152,    84,
       0,     0,     0,     0,   419,     0,   420,    67,    86,   123,
     153,     0,   154,   155,     0,     0,     0,    28,    29,    82,
       0,    82,    31,   156,    84,     0,    82,    82,     0,    86,
       0,   157,   513,   514,     0,  -302,     0,   290,    84,    69,
      84,   515,     0,    86,     0,     0,    69,     0,     0,    84,
       0,     0,    68,     0,     0,     0,     0,     0,    82,     0,
      82,     0,   773,     0,    95,   158,     0,     0,    84,    49,
       0,  -120,     0,     0,    82,     0,   786,     0,     0,     0,
       0,    82,    82,  -120,  -120,  -120,   120,     0,     0,     0,
       0,   225,   774,     0,   517,   518,   519,   520,   521,   522,
     523,   524,     0,     0,     0,  -120,  -120,  -120,  -120,     0,
    -120,  -120,   257,    82,    86,     0,    82,    84,     0,    84,
       0,    86,     0,  -304,    82,     0,    95,   120,     0,     0,
       0,     0,   234,     0,     0,  -304,  -304,   312,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   978,   439,   979,     0,  -304,  -304,  -304,
    -304,  -120,  -304,  -304,    96,     0,     0,    84,     0,    84,
       0,     0,    67,   123,    84,    84,    69,  -120,   415,   416,
       0,  -120,     0,  -120,     0,     0,   980,     0,     0,     0,
       0,   226,    67,     0,     0,     0,     0,    95,     0,   120,
       0,     0,     0,     0,    95,     0,    84,   418,    84,     0,
       0,     0,   226,     0,     0,     0,     0,    68,     0,   379,
       0,     0,    84,     0,   120,     0,    96,     0,     0,    84,
      84,   380,   381,  -304,     0,   290,     0,    68,   120,     0,
     120,   419,     0,   420,     0,   123,     0,     0,     0,   120,
       0,    86,     0,   382,   383,   384,   385,     0,   386,   387,
       0,    84,     0,     4,    84,     0,   147,   148,   120,     0,
     123,     0,    84,     0,     0,     0,     0,     0,     0,     0,
       0,   149,   150,   151,   123,     0,   123,   152,     0,     0,
       0,     0,     0,     0,     0,   123,     0,    96,     0,   153,
       0,   154,   155,     0,    96,     0,    28,    29,     0,   388,
       0,    31,   156,     0,   123,    67,     0,   120,     0,   120,
     157,     0,    97,     0,     0,     0,     0,     0,     0,   389,
       0,    39,    40,     0,   587,     0,     0,     0,     0,     0,
       0,    69,     0,     0,     0,     0,     0,     0,     0,   227,
       0,    42,     0,     0,   158,     0,    67,     0,    49,     0,
      68,    69,     0,   123,     0,   123,     0,   120,     0,   120,
      97,     0,     0,     0,   120,   120,     0,     0,     0,     0,
      55,     0,     0,     0,    97,   264,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     4,
       0,    68,   147,   148,     0,     0,   120,     0,   120,     0,
       0,     0,     0,   123,     0,   123,    86,   149,   150,   151,
     123,   123,   120,   152,     0,     0,     0,     0,    67,   120,
     120,     0,     0,     0,   226,   153,    86,   154,   155,     0,
       0,     0,    28,    29,     0,     0,     0,    31,   156,     0,
       0,     0,   123,    67,   123,    97,   157,     0,     0,     0,
       0,   120,    97,     0,   120,     0,     0,    67,   123,    67,
       0,     0,   120,    68,     0,   123,   123,     0,    67,     0,
       0,     0,     0,     0,    69,     0,     0,   773,     0,     0,
     158,     0,     0,   100,    49,     0,     0,    67,    68,    95,
       0,   894,     0,     0,     0,     0,     0,   123,     0,     0,
     123,     0,    68,     0,    68,     0,     0,   887,   123,    95,
     228,     0,     0,    68,     0,    69,     0,     0,     0,     0,
       0,     0,     4,     0,     0,   147,   148,     0,     0,     0,
       0,   228,    68,     0,     0,     0,    67,     0,    67,     0,
     149,   150,   151,     0,     0,   100,   152,     0,     0,    86,
       0,     0,     0,     0,     0,     0,     0,   102,   153,     0,
     154,   155,     0,     0,  -306,    28,    29,     0,     0,     0,
      31,   156,     0,     0,     0,     0,  -306,  -306,   317,   157,
       0,    68,   588,    68,   229,     0,    67,    69,    67,    96,
      86,     0,     0,    67,    67,     0,     0,     0,  -306,  -306,
    -306,  -306,   105,  -306,  -306,   102,     0,     0,     0,    96,
      42,     0,    69,   158,     0,     0,   100,    49,     0,   102,
       0,     0,     0,   100,     0,    67,    69,    67,    69,   230,
       0,    68,   257,    68,   510,   511,   512,    69,    68,    68,
     831,    67,     0,     0,     0,     0,     0,     0,    67,    67,
     230,     0,     0,     0,   513,   514,    69,     0,     0,     0,
       0,     0,    86,   515,   105,     0,     0,     0,     0,     0,
      68,     0,    68,    95,  -306,     0,   290,     0,     0,     0,
      67,     0,     0,    67,     0,     0,    68,    86,     0,     0,
     102,    67,     0,    68,    68,     0,     0,   102,     0,     0,
       0,    86,     0,    86,     0,    69,     0,    69,     0,     0,
       0,     0,    86,     0,     0,   516,   517,   518,   519,   520,
     521,   522,   523,   524,     0,    68,     0,     0,    68,     0,
       0,    86,   226,     0,     0,   105,    68,     0,     0,     0,
       0,     0,   105,     0,     0,    95,     0,    97,     0,     0,
       0,     0,     0,   228,     0,    69,     0,    69,     0,     0,
       0,     0,    69,    69,  -301,     0,     0,    97,     0,     0,
      95,     0,     0,    96,     0,     0,  -301,  -301,   398,     0,
      86,     0,    86,     0,    95,     0,    95,     0,     0,     0,
       0,     0,     0,     0,    69,    95,    69,     0,  -301,  -301,
    -301,  -301,     0,  -301,  -301,     0,     0,     0,     0,     0,
      69,     0,     0,     0,    95,     0,   107,    69,    69,     0,
       0,     0,  -158,     0,     0,     0,     0,   590,     0,   108,
      86,     0,    86,     0,  -158,  -158,   326,    86,    86,     0,
       0,     0,     0,   232,     0,    96,     0,     0,     0,    69,
       0,     0,    69,     0,     0,     0,  -158,  -158,  -158,  -158,
      69,  -158,  -158,    95,   232,    95,     0,  -314,     0,    86,
      96,    86,   230,     0,  -301,     0,   290,     0,   107,  -314,
    -314,   405,     0,     0,    96,    86,    96,     0,     0,     0,
      97,   108,    86,    86,     0,    96,   109,     0,     0,     0,
       0,  -314,  -314,  -314,  -314,     0,  -314,  -314,     0,     0,
       0,     0,     0,    95,    96,    95,     0,     0,   100,     0,
      95,    95,     0,     0,    86,   111,     0,    86,  -158,     0,
       0,    97,  -158,     0,  -158,    86,     0,     0,   100,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   107,
       0,     0,    95,     0,    95,     0,   107,     0,   109,  -308,
       0,     0,   108,    96,     0,    96,     0,     0,    95,   108,
       0,  -308,  -308,     0,     0,    95,    95,  -314,     0,   290,
       0,     0,     0,     0,     0,     0,     0,   111,     0,     0,
       0,     0,   102,  -308,  -308,  -308,  -308,     0,  -308,  -308,
       0,     0,     0,    97,     0,     0,     0,    95,     0,     0,
      95,     0,   102,    96,     0,    96,     0,     0,    95,     0,
      96,    96,     0,     0,     0,     0,     0,     0,    97,   109,
       0,     0,     0,     0,     0,     0,   109,   105,     0,     0,
       0,     0,    97,     0,    97,     0,     0,     0,     0,     0,
       0,     0,    96,    97,    96,     0,     0,   105,   111,     0,
       0,   228,     0,     0,     0,   111,     0,     0,    96,  -308,
       0,   290,    97,     0,   118,    96,    96,     0,     0,     0,
    -305,     0,     0,     0,     0,     0,   232,     0,     0,     0,
       0,     0,  -305,  -305,   315,     0,     0,     0,     0,     0,
       0,     0,   100,     0,     0,     0,     0,    96,     0,     4,
      96,     0,   147,   148,  -305,  -305,  -305,  -305,    96,  -305,
    -305,    97,     0,    97,     0,     0,     0,   149,   150,   151,
       0,     0,     0,   152,     0,   102,   118,     0,     0,     0,
       0,     0,     0,     0,     0,   153,     0,   154,   155,  -311,
       0,     0,    28,    29,     0,     0,     0,    31,   156,     0,
       0,  -311,  -311,   364,     0,     0,   157,     0,     0,     0,
       0,    97,     0,    97,   100,     0,   102,     0,    97,    97,
     230,     0,     0,  -311,  -311,  -311,  -311,     0,  -311,  -311,
    -305,     0,     0,     0,     0,     0,     0,   773,     0,   100,
     158,     0,     0,     0,    49,     0,     0,   118,     0,     0,
      97,     0,    97,   100,   118,   100,     0,     0,     0,     0,
       0,   105,     0,     0,   100,     0,    97,   887,     0,     0,
       0,     0,     0,    97,    97,     0,     0,     0,     0,     0,
       0,     0,     4,   100,     0,   147,   148,     0,   102,     0,
       0,   107,     0,     0,     0,     0,     0,     0,     0,  -311,
     149,   150,   151,     0,   108,    97,   152,     0,    97,     0,
       0,   107,     0,   102,     0,     0,    97,     0,   153,     0,
     154,   155,     0,     0,   108,    28,    29,   102,     0,   102,
      31,   156,   100,   105,   100,     0,     0,     0,   102,   157,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      39,    40,     0,     0,     0,     0,     0,   102,   105,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      42,   109,   105,   158,   105,     0,     0,    49,     0,     0,
       0,     0,   100,   105,   100,     0,     0,     0,     0,   100,
     100,   109,     0,     0,     0,     0,     0,     0,     0,    55,
     111,     0,   105,     0,     0,     0,   102,     0,   102,     0,
       0,     4,     0,     0,   147,   148,     0,     0,     0,     0,
     111,   100,     0,   100,     0,     0,     0,     0,     0,   149,
     150,   151,     0,     0,   232,   152,     0,   100,     0,     0,
       0,     0,     0,     0,   100,   100,     0,   153,     0,   154,
     155,   105,     0,   105,    28,    29,   102,     0,   102,    31,
     156,     0,     0,   102,   102,     0,     0,     0,   157,     0,
       0,     0,     0,     0,     0,   107,   100,     0,     0,   100,
       0,     0,     0,     0,     0,     0,     0,   100,   108,     0,
       0,     0,     0,     0,     0,   102,     0,   102,     0,    42,
       0,   105,   158,   105,     0,     0,    49,     0,   105,   105,
       0,   102,     0,     0,     0,     0,     0,     0,   102,   102,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   931,
       0,     0,     0,   508,   509,     0,     0,   510,   511,   512,
     105,     0,   105,     0,     0,     0,     0,   107,     0,   118,
     102,     0,     0,   102,     0,   109,   105,   513,   514,     0,
     108,   102,     0,   105,   105,     0,   515,     0,     0,   118,
       0,     0,   107,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   108,   107,     0,   107,     0,
       0,     0,     0,     0,     0,   105,     0,   107,   105,   108,
       0,   108,     0,     0,     0,     0,   105,     0,     0,     0,
     108,     0,     0,     0,     0,     0,   107,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   109,     0,   108,
       0,     0,     0,   651,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,     0,   109,     0,     0,     0,   111,     0,     0,     0,
       0,     0,     0,     0,     0,   107,   109,   107,   109,     0,
       0,     0,     0,     0,     0,     0,     0,   109,   108,     0,
     108,   111,     0,     0,     0,     0,     0,     0,   145,   146,
       0,     0,   644,     0,     0,   111,   109,   111,     0,     0,
       0,     0,     0,     0,     0,     0,   111,     0,     0,     0,
       0,     0,     0,     0,     0,   107,     0,   107,     0,     0,
       0,     0,   107,   107,     0,   111,     0,     0,   108,     0,
     108,     0,     0,   118,     0,   108,   108,     0,     0,     0,
       0,     0,     0,     0,     0,   109,     0,   109,     0,     0,
     287,     0,     0,     0,   107,     0,   107,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   108,     0,   108,
     107,     0,     0,     0,   111,     0,   111,   107,   107,     0,
       0,     0,     0,   108,     0,     0,     0,     0,     0,     0,
     108,   108,     0,     0,     0,   109,     0,   109,     0,     0,
       0,     0,   109,   109,     0,   118,     0,   397,     0,   107,
       0,     0,   107,     0,     0,     0,     0,     0,     0,     0,
     107,     0,   108,     0,   111,   108,   111,     0,     0,     0,
     118,   111,   111,   108,   109,     0,   109,     0,     0,     0,
       0,     0,     0,     0,   118,     0,   118,     0,     0,     0,
     109,   474,     0,     0,     0,   118,     0,   109,   109,     0,
       0,     0,     0,   111,     0,   111,     0,     0,     0,     0,
       0,     0,     0,     0,   118,     0,     0,     0,     0,   111,
       0,     0,     0,     0,     0,     0,   111,   111,     0,   109,
       0,     0,   109,     0,     0,     0,     0,     0,     0,   530,
     109,   532,     0,     0,   194,     0,   537,     0,     0,     0,
       0,     0,     0,     0,   216,   217,     0,     0,   111,     0,
       0,   111,     0,   118,     0,   118,     0,     0,  -312,   111,
       0,     0,     0,   553,     0,   557,     0,     0,   561,     0,
    -312,  -312,   400,     0,     0,   262,     0,     0,     0,     0,
     580,     0,   194,   275,     0,     0,     0,     0,     0,     0,
       0,     0,  -312,  -312,  -312,  -312,     0,  -312,  -312,     0,
     596,     0,     0,   118,     0,   118,     0,     0,     0,     0,
     118,   118,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,     0,   118,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   118,     0,
     194,  -643,  -643,  -643,     0,   118,   118,     0,  -312,     0,
     290,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   473,     0,     0,     0,     0,
     479,   480,     0,   481,   482,     0,     0,   118,     0,     0,
     118,     0,     0,     0,     0,     0,     0,     0,   118,     0,
       0,     0,     0,   508,   509,     0,     0,   510,   511,   512,
       0,     0,     0,   291,   293,   294,     0,   300,   620,   303,
       0,     0,   307,     0,   310,     0,   313,   513,   514,     0,
     318,     0,   320,     0,     0,     0,   515,     0,   331,     0,
       0,     0,   363,     0,     0,     0,   368,     0,   372,     0,
       0,   377,     0,     0,   550,     0,     0,     0,     0,     0,
       0,     0,   634,     0,     0,     0,   399,   402,   573,   407,
       0,     0,     0,     0,     0,   579,     0,   639,   194,   641,
       0,   643,     0,     0,   649,     0,   650,     0,   516,   517,
     518,   519,   520,   521,   522,   523,   524,     0,     0,     0,
       0,    56,    57,     0,   601,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   291,   293,
     294,   300,   303,   307,   310,   313,     0,   318,   320,     0,
       0,   331,     0,   363,   672,   368,   673,   372,   377,     0,
       0,     0,     0,     0,     0,     0,     0,   682,     0,     0,
     399,     0,   402,   407,   688,     0,     0,   691,   692,     0,
     694,     0,     0,     0,   700,     0,     0,     0,     0,     0,
       0,   704,   363,     0,   368,   372,   377,     0,     0,   402,
     407,     0,     0,     0,     0,     0,     0,   715,     0,   717,
       0,     0,     0,   608,  -315,     0,   609,   610,   611,   612,
     613,   614,   615,     0,   402,     0,  -315,  -315,   370,     0,
     617,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,  -315,  -315,
    -315,  -315,     0,  -315,  -315,     0,   737,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   508,   509,
       0,     0,   510,   511,   512,     0,     0,   764,     0,     0,
       0,   313,     0,     0,     0,   769,     0,   770,     0,     0,
     371,     0,   513,   514,  -315,   782,   290,     0,     0,     0,
       0,   515,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   654,   655,   656,   657,   658,   659,   660,   661,
     662,   663,   664,   665,   666,   667,   668,   669,   670,   671,
       0,   806,     0,     0,   808,     0,     0,     0,   811,     0,
       0,   814,     0,     0,     0,     0,   683,     0,     0,     0,
     593,     0,   690,   516,   517,   518,   519,   520,   521,   522,
     523,   524,     0,     0,     0,     0,     0,     0,     0,     0,
     830,     0,   573,     0,     0,     0,     0,     0,     0,     0,
       0,   711,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   719,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   860,     0,   601,   863,     0,
       0,   866,     0,     0,   869,     0,     0,   872,     0,     0,
       0,     0,     0,     0,     0,   194,     0,     0,     0,     0,
       0,   194,     4,     0,     6,   147,   148,     9,   892,   742,
       0,     0,     0,     0,    11,    12,    13,   332,   752,   333,
     149,   150,   151,     0,     0,     0,   152,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   914,     0,   153,     0,
     154,   155,     0,     0,     0,    28,    29,     0,   921,   922,
      31,   156,     0,     0,   928,     0,     0,     0,     0,   157,
       0,     0,     0,     0,   934,     0,     0,     0,    37,     0,
      39,    40,     0,     0,     0,     0,     0,     0,     0,     0,
     402,     0,     0,   573,     0,     0,     0,     0,     0,     0,
      42,     0,     0,   158,    46,     0,   372,    49,     0,   601,
       0,     0,   800,     0,     0,     0,     0,   954,   194,     0,
     956,     0,   194,     0,     0,     0,     0,     0,   815,    55,
       0,     0,     0,     0,   264,     0,    59,     0,     0,     0,
     821,     0,     0,     0,     0,   825,    -3,     1,     0,     2,
       3,     4,     5,     6,     7,     8,     9,    10,     0,     0,
       0,     0,     0,    11,    12,    13,    14,     0,    15,    16,
      17,    18,     0,     0,     0,    19,     0,     0,   711,    20,
      21,     0,    22,     0,     0,     0,     0,    23,    24,    25,
      26,     0,    27,     0,    28,    29,     0,     0,    30,    31,
      32,     0,     0,     0,   873,     0,   874,     0,    33,    34,
      35,   194,     0,     0,     0,    36,     0,    37,    38,    39,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,     0,    51,
       0,    52,    53,     0,     0,    54,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    55,     0,
      56,    57,     0,    58,     0,    59,     0,    60,     0,     0,
      -2,   282,     0,     2,     3,     4,     5,     6,     7,     8,
       9,    10,     0,     0,     0,     0,     0,    11,    12,    13,
      14,   194,    15,    16,    17,    18,     0,     0,     0,    19,
       0,     0,     0,    20,    21,     0,    22,     0,     0,     0,
       0,    23,    24,    25,    26,     0,    27,     0,    28,    29,
       0,     0,    30,    31,    32,     0,     0,     0,     0,     0,
       0,     0,    33,    34,    35,     0,     0,     0,     0,    36,
       0,    37,    38,    39,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,     0,    51,     0,    52,    53,     0,     0,    54,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    55,     0,    56,    57,     0,    58,   431,    59,
       0,    60,     4,     5,     6,     7,     8,     9,    10,  -102,
    -102,  -102,  -102,  -102,    11,    12,    13,    14,     0,    15,
      16,    17,    18,     0,     0,     0,    19,     0,     0,     0,
      20,    21,     0,    22,  -102,  -102,  -102,  -102,    23,    24,
      25,    26,     0,    27,  -102,    28,    29,     0,     0,    30,
      31,    32,     0,     0,     0,     0,     0,     0,     0,    33,
      34,    35,  -102,  -102,  -102,  -102,    36,     0,    37,    38,
      39,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,  -102,
      51,  -102,    52,    53,     0,     0,    54,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
       0,    56,    57,     0,    58,   431,    59,  -102,    60,     4,
       5,     6,     7,     8,     9,    10,     0,     0,  -101,  -101,
    -101,    11,    12,    13,    14,     0,    15,    16,    17,    18,
       0,     0,     0,    19,     0,     0,     0,    20,    21,     0,
      22,     0,     0,  -101,  -101,    23,    24,    25,    26,     0,
      27,  -101,    28,    29,     0,     0,    30,    31,    32,     0,
       0,     0,     0,     0,     0,     0,    33,    34,    35,  -101,
    -101,  -101,  -101,    36,     0,    37,    38,    39,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,  -101,    51,  -101,    52,
      53,     0,     0,    54,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    55,     0,    56,    57,
       0,    58,   431,    59,     0,    60,     4,     5,     6,     7,
       8,     9,    10,     0,     0,  -520,  -520,  -520,    11,    12,
      13,    14,     0,    15,    16,    17,    18,     0,     0,     0,
      19,     0,     0,     0,    20,    21,     0,    22,  -520,  -520,
    -520,  -520,    23,    24,    25,    26,     0,    27,  -520,    28,
      29,     0,     0,    30,    31,    32,     0,     0,     0,     0,
       0,     0,     0,    33,    34,    35,     0,     0,     0,  -520,
      36,     0,    37,    38,    39,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,  -520,    51,  -520,    52,    53,     0,     0,
      54,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    55,     0,    56,    57,     0,    58,   431,
      59,     0,    60,     4,     5,     6,     7,     8,     9,    10,
       0,     0,  -595,  -595,  -595,    11,    12,    13,    14,     0,
      15,    16,    17,    18,     0,     0,     0,    19,     0,     0,
       0,    20,    21,     0,    22,  -595,  -595,  -595,  -595,    23,
      24,    25,    26,     0,    27,  -595,    28,    29,     0,     0,
      30,    31,    32,     0,     0,     0,     0,     0,     0,     0,
      33,    34,    35,     0,     0,     0,  -595,    36,     0,    37,
      38,    39,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    -595,    51,  -595,    52,    53,     0,     0,    54,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      55,     0,    56,    57,     0,    58,   431,    59,     0,    60,
       4,     5,     6,     7,     8,     9,    10,     0,     0,  -521,
    -521,  -521,    11,    12,    13,    14,     0,    15,    16,    17,
      18,     0,     0,     0,    19,     0,     0,     0,    20,    21,
       0,    22,  -521,  -521,  -521,  -521,    23,    24,    25,    26,
       0,    27,  -521,    28,    29,     0,     0,    30,    31,    32,
       0,     0,     0,     0,     0,     0,     0,    33,    34,    35,
       0,     0,     0,  -521,    36,     0,    37,    38,    39,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,  -521,    51,  -521,
      52,    53,     0,     0,    54,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    55,     0,    56,
      57,     0,    58,   431,    59,     0,    60,     4,     5,     6,
       7,     8,     9,    10,     0,     0,  -596,  -596,  -596,    11,
      12,    13,    14,     0,    15,    16,    17,    18,     0,     0,
       0,    19,     0,     0,     0,    20,    21,     0,    22,  -596,
    -596,  -596,  -596,    23,    24,    25,    26,     0,    27,  -596,
      28,    29,     0,     0,    30,    31,    32,     0,     0,     0,
       0,     0,     0,     0,    33,    34,    35,     0,     0,     0,
    -596,    36,     0,    37,    38,    39,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,  -596,    51,  -596,    52,    53,     0,
       0,    54,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    55,     0,    56,    57,     0,    58,
     431,    59,     0,    60,     4,     5,     6,     7,     8,     9,
      10,  -101,  -101,  -101,  -101,  -101,    11,    12,    13,    14,
       0,    15,    16,    17,    18,     0,     0,     0,    19,     0,
       0,     0,    20,    21,     0,    22,     0,     0,  -101,  -101,
      23,    24,    25,    26,     0,    27,  -101,    28,    29,     0,
       0,    30,    31,    32,     0,     0,     0,     0,     0,     0,
       0,    33,    34,    35,     0,     0,     0,  -101,    36,     0,
      37,    38,    39,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,  -101,    51,  -101,    52,    53,     0,     0,    54,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    55,     0,    56,    57,     0,    58,   431,    59,     0,
      60,     4,     5,     6,     7,     8,     9,    10,     0,     0,
    -101,  -101,  -101,    11,    12,    13,    14,     0,    15,    16,
      17,    18,     0,     0,     0,    19,     0,     0,     0,    20,
      21,     0,    22,  -101,  -101,  -101,  -101,    23,    24,    25,
      26,     0,    27,  -101,    28,    29,     0,     0,    30,    31,
      32,     0,     0,     0,     0,     0,     0,     0,    33,    34,
      35,     0,     0,     0,  -101,    36,     0,    37,    38,    39,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,  -101,    51,
    -101,    52,    53,     0,     0,    54,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    55,     0,
      56,    57,     0,    58,   431,    59,     0,    60,     4,     5,
       6,     7,     8,     9,    10,     0,     0,  -101,  -101,  -101,
      11,    12,    13,    14,     0,    15,    16,    17,    18,     0,
       0,     0,    19,     0,     0,     0,    20,    21,     0,    22,
       0,  -101,  -101,  -101,    23,    24,    25,    26,     0,    27,
    -101,    28,    29,     0,     0,    30,    31,    32,     0,     0,
       0,     0,     0,     0,     0,    33,    34,    35,     0,     0,
       0,  -101,    36,     0,    37,    38,    39,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,  -101,    51,  -101,    52,    53,
       0,     0,    54,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    55,     0,    56,    57,     0,
      58,   431,    59,     0,    60,     4,     5,     6,     7,     8,
       9,    10,     0,     0,  -101,  -101,  -101,    11,    12,    13,
      14,     0,    15,    16,    17,    18,     0,     0,     0,    19,
       0,     0,     0,    20,    21,     0,    22,     0,     0,  -101,
    -101,    23,    24,    25,    26,     0,    27,  -101,    28,    29,
       0,     0,    30,    31,    32,     0,     0,     0,     0,     0,
       0,     0,    33,    34,    35,     0,     0,  -101,  -101,    36,
       0,    37,    38,    39,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,  -101,    51,  -101,    52,    53,     0,     0,    54,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    55,     0,    56,    57,     0,    58,   431,    59,
       0,    60,     4,     5,     6,     7,     8,     9,    10,     0,
       0,  -101,  -101,  -101,    11,    12,    13,    14,     0,    15,
      16,    17,    18,     0,     0,     0,    19,     0,     0,     0,
      20,    21,     0,    22,     0,     0,  -101,  -101,    23,    24,
      25,    26,     0,    27,  -101,    28,    29,     0,     0,    30,
      31,    32,     0,     0,     0,     0,     0,     0,     0,    33,
      34,    35,     0,     0,     0,  -101,    36,     0,    37,    38,
      39,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,  -101,
      51,  -101,    52,    53,     0,     0,    54,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
       0,    56,    57,     0,    58,   431,    59,     0,    60,     4,
       5,     6,     7,     8,     9,    10,     0,     0,     0,     0,
    -101,    11,    12,    13,    14,     0,    15,    16,    17,    18,
       0,     0,     0,    19,     0,     0,     0,    20,    21,     0,
      22,     0,     0,     0,     0,    23,    24,    25,    26,     0,
      27,     0,    28,    29,     0,     0,    30,    31,    32,     0,
       0,     0,     0,     0,     0,     0,    33,    34,    35,     0,
       0,     0,     0,    36,     0,    37,    38,    39,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,     0,    51,     0,    52,
      53,     0,     0,    54,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    55,     0,    56,    57,
       0,    58,     0,    59,  -101,    60,     4,     0,     6,   147,
     148,     9,     0,     0,     0,     0,     0,     0,    11,    12,
      13,    14,     0,    15,   149,   150,   151,     0,     0,   167,
     152,     0,     0,     0,    20,    21,     0,     0,     0,     0,
       0,     0,   153,     0,   154,   155,     0,     0,     0,    28,
      29,     0,     0,   168,    31,   156,     0,     0,     0,     0,
       0,     0,     0,   157,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,    39,    40,     0,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,    42,     0,     0,   158,    46,     0,
       0,    49,     0,     0,     0,     0,    52,    53,   268,   269,
       0,     0,     0,     0,     0,     0,   169,   170,     0,     0,
       0,     0,     0,    55,   270,     0,     0,     0,    58,   884,
      59,     4,    60,     6,   147,   148,     9,     0,     0,     0,
       0,     0,     0,    11,    12,    13,    14,     0,    15,   149,
     150,   151,     0,     0,   167,   152,     0,     0,     0,    20,
      21,     0,     0,     0,     0,     0,     0,   153,     0,   154,
     155,     0,     0,     0,    28,    29,     0,     0,   168,    31,
     156,     0,     0,     0,     0,     0,     0,     0,   157,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,    39,
      40,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,    42,
       0,     0,   158,    46,     0,     0,    49,     0,     0,     0,
       0,    52,    53,     0,     0,     0,     0,     0,     0,     0,
       0,   169,   170,     0,     0,     0,     0,     0,    55,   270,
       0,     0,   568,    58,   923,    59,     4,    60,     6,   147,
     148,     9,     0,     0,     0,     0,     0,     0,    11,    12,
      13,    14,     0,    15,   149,   150,   151,     0,     0,   167,
     152,     0,     0,     0,    20,    21,     0,     0,     0,     0,
       0,     0,   153,     0,   154,   155,     0,     0,     0,    28,
      29,     0,     0,   168,    31,   156,     0,     0,     0,     0,
       0,     0,     0,   157,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,    39,    40,     0,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,    42,     0,     0,   158,    46,     0,
       0,    49,     0,     0,     0,     0,    52,    53,   268,     0,
       0,     0,     0,     0,     0,     0,   169,   170,     0,     0,
       0,     0,     0,    55,   270,     0,     0,     0,    58,   948,
      59,     4,    60,     6,   147,   148,     9,     0,     0,     0,
       0,     0,     0,    11,    12,    13,    14,     0,    15,   149,
     150,   151,     0,     0,   167,   152,     0,     0,     0,    20,
      21,     0,     0,     0,     0,     0,     0,   153,     0,   154,
     155,     0,     0,     0,    28,    29,     0,     0,   168,    31,
     156,     0,     0,     0,     0,     0,     0,     0,   157,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,    39,
      40,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,    42,
       0,     0,   158,    46,     0,     0,    49,     0,     0,     0,
       0,    52,    53,   600,     0,     0,     0,     0,     0,     0,
       0,   169,   170,     0,     0,     0,     0,     0,    55,   171,
       0,     0,     0,    58,   960,    59,     4,    60,     6,   147,
     148,     9,     0,     0,     0,     0,     0,     0,    11,    12,
      13,    14,     0,    15,   149,   150,   151,     0,     0,   167,
     152,     0,     0,     0,    20,    21,     0,     0,     0,     0,
       0,     0,   153,     0,   154,   155,     0,     0,     0,    28,
      29,     0,     0,   168,    31,   156,     0,     0,     0,     0,
       0,     0,     0,   157,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,    39,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,     0,     0,   158,    46,     0,
       0,    49,     0,     0,     0,     0,    52,    53,     0,     0,
       0,     0,     0,     0,     0,     0,   169,   170,     0,     0,
       0,     0,     0,    55,   171,     0,     0,     0,    58,     0,
      59,     4,    60,     6,   147,   148,     9,     0,     0,     0,
       0,     0,     0,    11,    12,    13,    14,     0,    15,   149,
     150,   151,     0,     0,   167,   152,     0,     0,     0,    20,
      21,     0,     0,     0,     0,     0,     0,   153,     0,   154,
     155,     0,     0,     0,    28,    29,     0,     0,   168,    31,
     156,     0,     0,     0,     0,     0,     0,     0,   157,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,    39,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
       0,     0,   158,    46,     0,     0,    49,     0,     0,     0,
       0,    52,    53,     0,     0,     0,     0,     0,     0,     0,
       0,   169,   170,     0,     0,     0,     0,     0,    55,   266,
       0,     0,     0,    58,     0,    59,     4,    60,     6,   147,
     148,     9,     0,     0,     0,     0,     0,     0,    11,    12,
      13,    14,     0,    15,   149,   150,   151,     0,     0,   167,
     152,     0,     0,     0,    20,    21,     0,     0,     0,     0,
       0,     0,   153,     0,   154,   155,     0,     0,     0,    28,
      29,     0,     0,   168,    31,   156,     0,     0,     0,     0,
       0,     0,     0,   157,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,    39,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,     0,     0,   158,    46,     0,
       0,    49,     0,     0,     0,     0,    52,    53,     0,     0,
       0,     0,     0,     0,     0,     0,   169,   170,     0,     0,
       0,     0,     0,    55,   270,     0,     0,     0,    58,     0,
      59,     4,    60,     6,   147,   148,     9,     0,     0,     0,
       0,     0,     0,    11,    12,    13,    14,     0,    15,   149,
     150,   151,     0,     0,   167,   152,     0,     0,     0,    20,
      21,     0,     0,     0,     0,     0,     0,   153,     0,   154,
     155,     0,     0,     0,    28,    29,     0,     0,   168,    31,
     156,     0,     0,     0,     0,     0,     0,     0,   157,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,    39,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
       0,     0,   158,    46,     0,     0,    49,     0,     0,     0,
       0,    52,    53,     0,     0,     0,     0,     0,     0,     0,
       0,   169,   170,     0,     0,     0,     0,     0,    55,   710,
       0,     0,     0,    58,     0,    59,     4,    60,     6,   147,
     148,     9,     0,     0,     0,     0,     0,     0,    11,    12,
      13,    14,     0,    15,   149,   150,   151,     0,     0,     0,
     152,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   153,     0,   154,   155,     0,     0,     0,    28,
      29,     0,     0,   168,    31,   156,     0,     0,     0,     0,
       0,     0,     0,   157,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,    39,    40,     0,     0,     0,  -303,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -303,  -303,   309,    42,     0,     0,   158,    46,     0,
       0,    49,     0,     0,     0,     0,    52,    53,     0,     0,
       0,     0,     0,  -303,  -303,  -303,  -303,     0,  -303,  -303,
       0,     0,     0,    55,     0,     0,     0,     0,    58,     0,
      59,     0,    60,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
       0,     0,     0,     0,     0,   508,   509,     0,  -313,   510,
     511,   512,     0,     0,     0,     0,     0,     0,     0,     0,
    -313,  -313,   366,     0,     0,     0,     0,     0,     0,   513,
     514,     0,     0,     0,     0,     0,     0,     0,   515,  -303,
       0,   290,  -313,  -313,  -313,  -313,  -316,  -313,  -313,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -316,  -316,
     375,     0,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,     0,
    -316,  -316,  -316,  -316,     0,  -316,  -316,   797,     0,     0,
     516,   517,   518,   519,   520,   521,   522,   523,   524,     0,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,     0,  -313,     0,
     290,     0,   508,   509,     0,  -312,   510,   511,   512,     0,
       0,     0,     0,     0,     0,     0,     0,  -312,  -312,   400,
       0,     0,     0,     0,     0,     0,   513,   514,     0,     0,
       0,     0,     0,     0,     0,   515,  -316,     0,   290,  -312,
    -312,  -312,  -312,  -310,  -312,  -312,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -310,  -310,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,     0,  -310,  -310,  -310,
    -310,     0,  -310,  -310,     0,     0,     0,   516,   517,   518,
     519,   520,   521,   522,   523,   524,     0,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,     0,  -312,     0,   290,     4,     0,
       0,   147,   148,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   149,   150,   151,     0,
       4,     0,   152,   147,   148,     0,     0,     0,     0,     0,
       0,     0,     0,  -310,   153,   290,   154,   155,   149,   150,
     151,    28,    29,     0,   152,     0,    31,   156,     0,     0,
       0,     0,     0,     0,     0,   157,   153,     0,   154,   155,
       0,     0,     0,    28,    29,     0,     0,     0,    31,   156,
       0,     0,     0,     0,     0,     0,     0,   157,     0,     0,
       0,     0,     0,     0,     0,     0,    42,     0,     0,   158,
       0,     0,     0,    49,     4,     0,     0,   147,   148,     0,
     564,     0,     0,     0,     0,     0,     0,     0,    42,     0,
       0,   158,   149,   150,   151,    49,     4,     0,   152,   147,
     148,     0,   747,     0,     0,     0,     0,     0,     0,     0,
     153,     0,   154,   155,   149,   150,   151,    28,    29,     0,
     152,     0,    31,   156,     0,     0,     0,     0,     0,     0,
       0,   157,   153,     0,   154,   155,     0,     0,     0,    28,
      29,     0,     0,     0,    31,   156,     0,     0,     0,     0,
       0,     0,     0,   157,     0,     0,     0,     0,     0,     0,
       0,     0,    42,     0,     0,   158,     0,     0,     0,    49,
       4,     0,     0,   147,   148,     0,   790,     0,     0,     0,
       0,     0,     0,     0,    42,     0,     0,   158,   149,   150,
     151,    49,     4,     0,   152,   147,   148,     0,   870,     0,
       0,     0,     0,     0,     0,     0,   153,     0,   154,   155,
     149,   150,   151,    28,    29,     0,   152,     0,    31,   156,
       0,     0,     0,     0,     0,     0,     0,   157,   153,     0,
     154,   155,     0,     0,     0,    28,    29,     0,    39,    40,
      31,   156,     0,     0,     0,     0,     0,     0,     0,   157,
       0,     0,     0,     0,     0,     0,     0,     0,    42,     0,
       0,   158,     0,     0,     0,    49,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
      42,   304,   305,   158,   308,     0,   311,    49,   314,     0,
     316,     0,   319,     0,   321,     0,   324,     0,   327,     0,
     354,   360,     0,     0,     0,   365,     0,     0,   369,     0,
       0,   374,     0,   378,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   403,
       0,   408
};

static const yytype_int16 yycheck[] =
{
       2,     3,    10,   141,   134,   651,    59,   435,   171,   427,
     428,   141,   254,   134,    16,    17,    18,   215,   134,   178,
     141,   452,   453,   182,   555,    27,   254,   455,   134,   254,
     189,   568,   191,   192,   697,   141,   603,   141,   701,    41,
     238,    43,    44,    16,   702,    17,    48,   206,    53,    35,
      21,    93,    35,    53,    49,   646,   133,    35,    60,   127,
     134,    35,   165,   140,    35,   107,    35,   141,    70,    35,
      72,    35,    74,    75,    35,    77,    35,    79,   127,    81,
      35,    83,   329,    85,   133,    87,   677,    89,    35,    91,
      35,    93,    94,    21,     5,    35,    98,     8,     9,   101,
      35,    35,   104,   266,   106,    35,   593,   270,    35,    35,
      35,    35,    23,    24,    25,   131,    35,   133,    29,   373,
     122,   126,   124,    35,   371,    35,   126,    35,   136,    22,
      41,   126,    43,    44,    35,   389,   127,    48,    49,    17,
     111,   127,    53,    54,    25,    26,   124,   125,   131,    35,
     133,    62,   124,   125,    35,   133,   127,   130,   725,   133,
     263,   127,   164,   165,   133,   131,   697,   133,   127,   171,
     131,     0,   709,    21,   133,   126,   839,   823,   836,   124,
     125,   132,    93,   111,   842,    96,   133,    35,   133,   100,
     124,   125,   127,   133,     0,     0,   131,   127,   133,   133,
     631,   131,    21,   133,     0,   131,   624,   133,   133,   133,
     126,    92,   128,   215,   133,    96,    35,   219,   129,   100,
     126,   133,    27,   133,   105,   133,   132,   108,   109,   110,
     111,    36,   133,    62,   236,   237,   238,   118,   124,   125,
     121,   133,   123,    48,    70,   247,   923,   133,   129,    59,
     126,   253,   254,     0,   130,    60,    62,    62,   124,   125,
     126,   263,   143,   111,   266,    70,    62,    72,   270,    74,
      75,   948,    77,   126,    79,    35,    81,   130,    83,     0,
      85,   126,    87,   960,    89,   130,    91,    35,    93,    94,
     124,   125,   111,    98,   124,   125,   101,     0,   126,   104,
     128,   106,   730,    35,    37,    38,    27,   117,   118,   119,
     797,    35,    73,    74,   131,    36,    35,   122,    35,   124,
     124,   125,   452,   453,    27,   127,   568,    48,   133,   133,
     127,   452,   453,   126,    53,   140,   452,   453,   127,    60,
     568,    62,   126,   568,   128,    48,   452,   453,   126,    70,
     128,    72,   131,    74,    75,   126,    77,   128,    79,    62,
      81,   122,    83,   126,    85,   128,    87,   126,    89,   128,
      91,   373,    93,    94,   124,   125,   126,    98,   452,   453,
     101,     0,   126,   104,   128,   106,    21,   389,    59,    52,
      93,    70,   124,   125,   126,   127,   127,   884,    33,    34,
      35,   122,   115,   124,   124,   125,   126,   126,   127,    35,
     215,    35,   133,   127,   128,   574,   128,    36,    35,   140,
      55,    56,    57,    58,   130,    60,    61,   124,   125,   126,
     133,   124,   125,   238,   127,    35,   923,   140,    65,    66,
     133,    60,    35,    62,   115,   116,   117,   118,   119,    35,
     648,    70,    35,    72,    35,    74,    75,    35,    77,   946,
      79,   948,    81,   127,    83,   270,    85,   709,    87,   127,
      89,   127,    91,   960,    93,    94,   111,   126,    17,    98,
     678,   709,   101,   134,   709,   104,   488,   106,   124,   125,
     126,   133,   127,   126,   126,   497,   131,   126,   133,   637,
      21,   631,    21,   122,    59,   124,    21,   637,    17,   130,
     631,   126,    33,    34,   133,   631,   637,   123,   124,   125,
     128,   140,   124,   125,   126,   631,    21,   529,   126,   531,
     133,   637,   128,   637,    55,    56,    57,    58,   126,    60,
      61,   594,    48,    21,   124,   125,   126,   710,   100,   270,
     126,   128,   126,   555,   126,    33,    34,   631,   128,   125,
      93,    21,    67,   637,   128,   126,   568,   270,   373,    62,
     642,    93,   677,    33,    34,    35,   578,    55,    56,    57,
      58,    21,    60,    61,   389,    93,    93,   235,   238,    93,
      93,    93,    21,    33,    34,    55,    56,    57,    58,    93,
      60,    61,    93,    93,    33,    34,    35,    93,     0,    93,
     131,    93,   133,   621,    93,    55,    56,    57,    58,   627,
      60,    61,    93,   678,   533,   237,    55,    56,    57,    58,
     435,    60,    61,   946,   428,    27,   702,   452,   640,   964,
     642,   578,   794,   637,   637,   244,   648,    -1,    -1,    -1,
     455,   111,   373,   131,    -1,   133,    48,    -1,   796,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,   389,   722,
      62,   131,    -1,   133,    -1,   796,   678,    -1,    -1,   681,
     796,    -1,   111,   685,   686,    -1,    -1,    -1,     0,    -1,
     796,   131,   796,   695,    -1,   697,    -1,    -1,   127,   701,
     702,    93,   131,    -1,   133,   707,    -1,   709,   710,    -1,
      -1,    -1,    -1,    26,   435,    27,    -1,    30,    31,    32,
      -1,    -1,   796,    -1,    -1,    -1,   734,   865,    -1,    -1,
     738,    -1,   435,    -1,   455,   865,    48,    50,    51,    -1,
      -1,   133,    -1,    55,   865,    -1,    59,    -1,   140,   865,
      62,    -1,   455,    21,   373,    -1,    -1,    -1,    70,    -1,
      -1,   865,    -1,    -1,    -1,    33,    34,    35,    -1,    -1,
     389,   773,   774,   578,    -1,    87,    -1,    89,    -1,    91,
      -1,    93,    -1,    -1,    -1,    -1,    -1,    55,    56,    57,
      58,   865,    60,    61,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
     122,    -1,    -1,    -1,   619,   817,   435,   955,    -1,   827,
      -1,   133,    -1,    -1,   962,   955,    -1,    -1,   140,   831,
      -1,    -1,   962,    -1,   836,    -1,   455,   839,    -1,   955,
     842,   962,    -1,   111,    -1,    -1,   962,    -1,    -1,   955,
      -1,   955,    -1,    -1,    -1,    21,   962,   578,   962,   127,
      -1,    -1,    -1,   131,    -1,   133,    -1,    33,    34,    35,
      -1,    -1,    -1,   678,    -1,   578,   878,    -1,   270,    -1,
      -1,   955,    -1,    -1,    -1,   887,   691,    -1,   890,    55,
      56,    57,    58,    -1,    60,    61,    -1,    -1,   619,    -1,
      -1,     0,     5,    -1,    -1,     8,     9,    -1,    -1,   917,
      -1,   716,    -1,    -1,    -1,    -1,   619,    -1,    -1,    -1,
      23,    24,    25,    -1,    -1,   730,    29,   732,    27,   931,
      -1,    -1,    -1,    -1,    -1,    -1,   741,     0,    41,    -1,
      43,    44,   254,    -1,    -1,    48,    49,    -1,    -1,    48,
      53,    54,    -1,    -1,    -1,   760,    -1,    -1,   270,    62,
      -1,   127,    -1,    62,    27,   131,    -1,   133,    -1,    -1,
     691,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   980,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,   691,    -1,
      93,    -1,    -1,    96,    93,   716,    -1,   100,    -1,    62,
     619,    -1,    -1,    -1,   809,    -1,   811,    -1,    -1,   730,
      -1,   732,    -1,   716,    -1,    -1,    -1,     0,    -1,    -1,
     741,   124,   125,    -1,    -1,    -1,    -1,   730,    -1,   732,
      93,    -1,    -1,    -1,   133,    -1,    -1,    -1,   741,   760,
      -1,   140,    -1,   435,    27,    -1,    -1,    12,    13,    14,
      15,    16,    -1,    -1,   859,    -1,   861,   760,    -1,    -1,
      -1,   866,   867,   455,    -1,    48,    -1,    -1,    -1,    -1,
     133,    -1,   691,    -1,    39,    40,    -1,   140,    -1,    62,
      -1,    -1,    47,    -1,    -1,    -1,    -1,    -1,   809,    -1,
     811,    -1,    21,   898,    -1,   900,    -1,   716,    -1,    -1,
      -1,    -1,    -1,    68,    33,    34,   809,    -1,   811,   914,
      93,   730,    -1,   732,    -1,    -1,   921,   922,    -1,    -1,
      -1,    -1,   741,   435,    -1,    -1,    55,    56,    57,    58,
      -1,    60,    61,    -1,    -1,    -1,    -1,   102,   859,   104,
     861,   760,    -1,   455,    -1,   866,   867,    -1,   953,    -1,
     133,   956,    -1,    -1,    -1,    -1,   859,   140,   861,   964,
      -1,    -1,    -1,   866,   867,    -1,    -1,    -1,    -1,    -1,
      -1,   270,    -1,    -1,    -1,    -1,    -1,   898,    -1,   900,
      -1,    -1,    -1,    -1,    -1,    -1,   578,    14,    15,    16,
     809,    -1,   811,   914,    -1,   898,    -1,   900,    -1,    -1,
     921,   922,   131,    -1,   133,    -1,    -1,   270,    -1,    -1,
      -1,   914,    39,    40,    -1,    -1,    -1,    -1,   921,   922,
      47,    -1,    -1,    -1,    -1,    -1,    -1,   619,    -1,    -1,
       0,    -1,   953,    -1,    -1,   956,    -1,    -1,    -1,    -1,
     859,    68,   861,   964,    -1,    -1,    -1,   866,   867,    -1,
     953,    -1,    -1,   956,    -1,    -1,   568,    27,    14,    15,
      16,   964,    -1,    -1,    -1,    -1,   578,    -1,    -1,    -1,
       5,    -1,    -1,     8,     9,   102,    -1,   104,    48,   898,
      -1,   900,    38,    39,    40,    -1,    -1,   270,    23,    24,
      25,    47,    62,    -1,    29,   914,    -1,    -1,    -1,   691,
      -1,    -1,   921,   922,    -1,    -1,    41,   619,    43,    44,
      -1,    -1,    68,    48,    49,    -1,    -1,    -1,    53,    54,
      -1,    -1,    -1,    93,   716,    -1,    -1,    62,    -1,    -1,
      -1,    -1,    -1,    -1,   953,    -1,   435,   956,   730,    -1,
     732,    -1,    -1,    -1,    -1,   964,   102,    -1,   104,   741,
      -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    93,    -1,
      -1,    96,    -1,   133,    -1,   100,    -1,    -1,   760,    -1,
     140,    -1,   435,    21,    -1,    -1,    -1,    -1,     0,   691,
      -1,    -1,    -1,    -1,    -1,    33,    34,    35,   123,    -1,
      -1,    -1,   455,    -1,    -1,    -1,    -1,   709,    -1,    14,
      15,    16,    -1,    -1,   716,    27,    -1,    55,    56,    57,
      58,    -1,    60,    61,    -1,    -1,    -1,   809,   730,   811,
     732,    -1,    21,   475,    39,    40,    48,    -1,    -1,   741,
      -1,    -1,    47,    -1,    33,    34,    35,    -1,    -1,    -1,
      62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   760,    -1,
      -1,    -1,   435,    68,    -1,    -1,    55,    56,    57,    58,
      -1,    60,    61,    -1,    -1,    -1,    -1,   859,    -1,   861,
      -1,    93,   455,    -1,   866,   867,    -1,    -1,    -1,   578,
      -1,   533,    -1,   131,    -1,   133,   538,   102,    -1,   104,
      -1,    -1,   544,    -1,    -1,    -1,    -1,   809,    -1,   811,
     270,    -1,    -1,    -1,    21,    -1,   898,    -1,   900,    -1,
      -1,   133,   111,   565,    -1,   578,    33,    34,   140,    -1,
     619,    -1,   914,    -1,    -1,    -1,    -1,    -1,   127,   921,
     922,    -1,   131,    -1,   133,    -1,    -1,    -1,    55,    56,
      57,    58,    -1,    60,    61,    21,    -1,   859,    -1,   861,
      -1,    -1,    -1,    -1,   866,   867,   619,    33,    34,    35,
      -1,   953,    -1,    -1,   956,    -1,    12,    13,    14,    15,
      16,    -1,   964,    -1,    -1,    -1,    -1,    -1,     0,    55,
      56,    57,    58,    -1,    60,    61,   898,    -1,   900,    -1,
      -1,    -1,   691,    39,    40,   578,    -1,    -1,    -1,    -1,
      -1,    47,   914,    -1,    -1,    27,    -1,    -1,    -1,   921,
     922,    -1,    -1,    -1,   131,    -1,   133,   716,    -1,    -1,
      -1,    -1,    68,    -1,     0,    -1,    48,    -1,   691,    -1,
      -1,   730,    -1,   732,    -1,    -1,   619,    -1,    -1,    -1,
      62,   953,   741,    -1,   956,    -1,    -1,    -1,   270,    -1,
      -1,    27,   964,   716,    -1,   131,   102,   133,   104,    -1,
      -1,   760,    -1,    -1,    -1,   435,    -1,   730,    -1,   732,
      -1,    93,    48,    -1,    -1,    -1,    -1,    -1,   741,    75,
      -1,    14,    15,    16,    -1,   455,    62,    -1,    84,    85,
      86,    87,    88,    89,    90,    91,    -1,   760,   750,    -1,
      -1,    -1,    -1,    -1,    37,    38,    39,    40,   691,    -1,
     809,   133,   811,   765,    47,    -1,   768,    93,   140,   619,
      -1,    -1,    -1,   775,    -1,    -1,    -1,   779,    -1,    -1,
      14,    15,    16,   716,    -1,    68,    -1,    -1,    -1,   791,
      -1,    -1,    -1,    -1,    -1,    -1,   809,   730,   811,   732,
      -1,    -1,    -1,    37,    38,    39,    40,   133,   741,    -1,
     859,    -1,   861,    47,   140,    -1,    -1,   866,   867,   102,
      -1,   104,    -1,    -1,    -1,    -1,    -1,   760,    -1,    -1,
     832,   833,    -1,   835,    68,    -1,    -1,    -1,    -1,   841,
      -1,   691,    -1,    -1,    -1,    -1,   859,    -1,   861,   898,
      -1,   900,    -1,   866,   867,    -1,    -1,     0,   578,    -1,
      -1,    -1,    -1,   435,    -1,   914,   716,    -1,   102,   871,
     104,    -1,   921,   922,    -1,    -1,   809,    -1,   811,    -1,
     882,    -1,   732,   455,    27,   898,   888,   900,    14,    15,
      16,   741,    14,    15,    16,    -1,    -1,    -1,   270,   619,
      -1,   914,     0,    -1,   953,    48,    -1,   956,   921,   922,
     760,    37,    38,    39,    40,   964,    -1,    39,    40,    62,
      -1,    47,    -1,    -1,    -1,    47,   859,   929,   861,    27,
     932,    -1,    -1,   866,   867,    -1,    -1,    14,    15,    16,
     953,    -1,    68,   956,   270,    -1,    68,    -1,   950,    -1,
      48,   964,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   809,
      -1,   811,    39,    40,    62,   898,    -1,   900,    -1,    -1,
      47,   691,    -1,    -1,    -1,    -1,   102,    -1,   104,    -1,
     102,   914,   104,    -1,    -1,    -1,    -1,    -1,   921,   922,
     133,    68,    -1,    -1,    -1,    -1,   716,   140,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   578,    -1,    -1,   859,
     730,   861,   732,    -1,    -1,    -1,   866,   867,    -1,    -1,
     953,   741,    -1,   956,    -1,   102,     0,   104,    -1,    -1,
      -1,   964,    -1,    -1,    -1,   133,    14,    15,    16,    -1,
     760,    -1,   140,    -1,    -1,    21,    -1,   619,   898,    -1,
     900,    -1,    -1,    27,    -1,    -1,    -1,    33,    34,    35,
      -1,    39,    40,   435,   914,    -1,    -1,    -1,    -1,    47,
      -1,   921,   922,    -1,    48,    -1,    -1,    -1,    -1,    55,
      56,    57,    58,   455,    60,    61,    -1,    -1,    62,   809,
      68,   811,    -1,    -1,     5,    -1,    -1,     8,     9,    -1,
      -1,     0,    -1,    -1,    -1,    -1,   956,    -1,    -1,   435,
      -1,    -1,    23,    24,    25,    -1,    -1,    -1,    29,   691,
      -1,    -1,    -1,    -1,   102,    -1,   104,   270,    27,   455,
      41,    -1,    43,    44,    -1,    -1,    -1,    48,    49,   859,
      -1,   861,    53,    54,   716,    -1,   866,   867,    -1,    48,
      -1,    62,    50,    51,    -1,   131,    -1,   133,   730,   133,
     732,    59,    -1,    62,    -1,    -1,   140,    -1,    -1,   741,
      -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,   898,    -1,
     900,    -1,    93,    -1,     0,    96,    -1,    -1,   760,   100,
      -1,    21,    -1,    -1,   914,    -1,   107,    -1,    -1,    -1,
      -1,   921,   922,    33,    34,    35,   578,    -1,    -1,    -1,
      -1,    27,   123,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,    55,    56,    57,    58,    -1,
      60,    61,    48,   953,   133,    -1,   956,   809,    -1,   811,
      -1,   140,    -1,    21,   964,    -1,    62,   619,    -1,    -1,
      -1,    -1,   578,    -1,    -1,    33,    34,    35,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    14,    15,    16,    -1,    55,    56,    57,
      58,   111,    60,    61,     0,    -1,    -1,   859,    -1,   861,
      -1,    -1,   435,   619,   866,   867,   270,   127,    39,    40,
      -1,   131,    -1,   133,    -1,    -1,    47,    -1,    -1,    -1,
      -1,    27,   455,    -1,    -1,    -1,    -1,   133,    -1,   691,
      -1,    -1,    -1,    -1,   140,    -1,   898,    68,   900,    -1,
      -1,    -1,    48,    -1,    -1,    -1,    -1,   435,    -1,    21,
      -1,    -1,   914,    -1,   716,    -1,    62,    -1,    -1,   921,
     922,    33,    34,   131,    -1,   133,    -1,   455,   730,    -1,
     732,   102,    -1,   104,    -1,   691,    -1,    -1,    -1,   741,
      -1,   270,    -1,    55,    56,    57,    58,    -1,    60,    61,
      -1,   953,    -1,     5,   956,    -1,     8,     9,   760,    -1,
     716,    -1,   964,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    25,   730,    -1,   732,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   741,    -1,   133,    -1,    41,
      -1,    43,    44,    -1,   140,    -1,    48,    49,    -1,   111,
      -1,    53,    54,    -1,   760,   578,    -1,   809,    -1,   811,
      62,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,   131,
      -1,    73,    74,    -1,   270,    -1,    -1,    -1,    -1,    -1,
      -1,   435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    27,
      -1,    93,    -1,    -1,    96,    -1,   619,    -1,   100,    -1,
     578,   455,    -1,   809,    -1,   811,    -1,   859,    -1,   861,
      48,    -1,    -1,    -1,   866,   867,    -1,    -1,    -1,    -1,
     122,    -1,    -1,    -1,    62,   127,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,
      -1,   619,     8,     9,    -1,    -1,   898,    -1,   900,    -1,
      -1,    -1,    -1,   859,    -1,   861,   435,    23,    24,    25,
     866,   867,   914,    29,    -1,    -1,    -1,    -1,   691,   921,
     922,    -1,    -1,    -1,   270,    41,   455,    43,    44,    -1,
      -1,    -1,    48,    49,    -1,    -1,    -1,    53,    54,    -1,
      -1,    -1,   898,   716,   900,   133,    62,    -1,    -1,    -1,
      -1,   953,   140,    -1,   956,    -1,    -1,   730,   914,   732,
      -1,    -1,   964,   691,    -1,   921,   922,    -1,   741,    -1,
      -1,    -1,    -1,    -1,   578,    -1,    -1,    93,    -1,    -1,
      96,    -1,    -1,     0,   100,    -1,    -1,   760,   716,   435,
      -1,   107,    -1,    -1,    -1,    -1,    -1,   953,    -1,    -1,
     956,    -1,   730,    -1,   732,    -1,    -1,   123,   964,   455,
      27,    -1,    -1,   741,    -1,   619,    -1,    -1,    -1,    -1,
      -1,    -1,     5,    -1,    -1,     8,     9,    -1,    -1,    -1,
      -1,    48,   760,    -1,    -1,    -1,   809,    -1,   811,    -1,
      23,    24,    25,    -1,    -1,    62,    29,    -1,    -1,   578,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,    41,    -1,
      43,    44,    -1,    -1,    21,    48,    49,    -1,    -1,    -1,
      53,    54,    -1,    -1,    -1,    -1,    33,    34,    35,    62,
      -1,   809,   270,   811,    27,    -1,   859,   691,   861,   435,
     619,    -1,    -1,   866,   867,    -1,    -1,    -1,    55,    56,
      57,    58,     0,    60,    61,    48,    -1,    -1,    -1,   455,
      93,    -1,   716,    96,    -1,    -1,   133,   100,    -1,    62,
      -1,    -1,    -1,   140,    -1,   898,   730,   900,   732,    27,
      -1,   859,   578,   861,    30,    31,    32,   741,   866,   867,
     123,   914,    -1,    -1,    -1,    -1,    -1,    -1,   921,   922,
      48,    -1,    -1,    -1,    50,    51,   760,    -1,    -1,    -1,
      -1,    -1,   691,    59,    62,    -1,    -1,    -1,    -1,    -1,
     898,    -1,   900,   619,   131,    -1,   133,    -1,    -1,    -1,
     953,    -1,    -1,   956,    -1,    -1,   914,   716,    -1,    -1,
     133,   964,    -1,   921,   922,    -1,    -1,   140,    -1,    -1,
      -1,   730,    -1,   732,    -1,   809,    -1,   811,    -1,    -1,
      -1,    -1,   741,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,   953,    -1,    -1,   956,    -1,
      -1,   760,   578,    -1,    -1,   133,   964,    -1,    -1,    -1,
      -1,    -1,   140,    -1,    -1,   691,    -1,   435,    -1,    -1,
      -1,    -1,    -1,   270,    -1,   859,    -1,   861,    -1,    -1,
      -1,    -1,   866,   867,    21,    -1,    -1,   455,    -1,    -1,
     716,    -1,    -1,   619,    -1,    -1,    33,    34,    35,    -1,
     809,    -1,   811,    -1,   730,    -1,   732,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   898,   741,   900,    -1,    55,    56,
      57,    58,    -1,    60,    61,    -1,    -1,    -1,    -1,    -1,
     914,    -1,    -1,    -1,   760,    -1,     0,   921,   922,    -1,
      -1,    -1,    21,    -1,    -1,    -1,    -1,   270,    -1,     0,
     859,    -1,   861,    -1,    33,    34,    35,   866,   867,    -1,
      -1,    -1,    -1,    27,    -1,   691,    -1,    -1,    -1,   953,
      -1,    -1,   956,    -1,    -1,    -1,    55,    56,    57,    58,
     964,    60,    61,   809,    48,   811,    -1,    21,    -1,   898,
     716,   900,   270,    -1,   131,    -1,   133,    -1,    62,    33,
      34,    35,    -1,    -1,   730,   914,   732,    -1,    -1,    -1,
     578,    62,   921,   922,    -1,   741,     0,    -1,    -1,    -1,
      -1,    55,    56,    57,    58,    -1,    60,    61,    -1,    -1,
      -1,    -1,    -1,   859,   760,   861,    -1,    -1,   435,    -1,
     866,   867,    -1,    -1,   953,     0,    -1,   956,   127,    -1,
      -1,   619,   131,    -1,   133,   964,    -1,    -1,   455,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,
      -1,    -1,   898,    -1,   900,    -1,   140,    -1,    62,    21,
      -1,    -1,   133,   809,    -1,   811,    -1,    -1,   914,   140,
      -1,    33,    34,    -1,    -1,   921,   922,   131,    -1,   133,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,
      -1,    -1,   435,    55,    56,    57,    58,    -1,    60,    61,
      -1,    -1,    -1,   691,    -1,    -1,    -1,   953,    -1,    -1,
     956,    -1,   455,   859,    -1,   861,    -1,    -1,   964,    -1,
     866,   867,    -1,    -1,    -1,    -1,    -1,    -1,   716,   133,
      -1,    -1,    -1,    -1,    -1,    -1,   140,   435,    -1,    -1,
      -1,    -1,   730,    -1,   732,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   898,   741,   900,    -1,    -1,   455,   133,    -1,
      -1,   578,    -1,    -1,    -1,   140,    -1,    -1,   914,   131,
      -1,   133,   760,    -1,     0,   921,   922,    -1,    -1,    -1,
      21,    -1,    -1,    -1,    -1,    -1,   270,    -1,    -1,    -1,
      -1,    -1,    33,    34,    35,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   619,    -1,    -1,    -1,    -1,   953,    -1,     5,
     956,    -1,     8,     9,    55,    56,    57,    58,   964,    60,
      61,   809,    -1,   811,    -1,    -1,    -1,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,   578,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    -1,    43,    44,    21,
      -1,    -1,    48,    49,    -1,    -1,    -1,    53,    54,    -1,
      -1,    33,    34,    35,    -1,    -1,    62,    -1,    -1,    -1,
      -1,   859,    -1,   861,   691,    -1,   619,    -1,   866,   867,
     578,    -1,    -1,    55,    56,    57,    58,    -1,    60,    61,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,   716,
      96,    -1,    -1,    -1,   100,    -1,    -1,   133,    -1,    -1,
     898,    -1,   900,   730,   140,   732,    -1,    -1,    -1,    -1,
      -1,   619,    -1,    -1,   741,    -1,   914,   123,    -1,    -1,
      -1,    -1,    -1,   921,   922,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     5,   760,    -1,     8,     9,    -1,   691,    -1,
      -1,   435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   131,
      23,    24,    25,    -1,   435,   953,    29,    -1,   956,    -1,
      -1,   455,    -1,   716,    -1,    -1,   964,    -1,    41,    -1,
      43,    44,    -1,    -1,   455,    48,    49,   730,    -1,   732,
      53,    54,   809,   691,   811,    -1,    -1,    -1,   741,    62,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      73,    74,    -1,    -1,    -1,    -1,    -1,   760,   716,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      93,   435,   730,    96,   732,    -1,    -1,   100,    -1,    -1,
      -1,    -1,   859,   741,   861,    -1,    -1,    -1,    -1,   866,
     867,   455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,
     435,    -1,   760,    -1,    -1,    -1,   809,    -1,   811,    -1,
      -1,     5,    -1,    -1,     8,     9,    -1,    -1,    -1,    -1,
     455,   898,    -1,   900,    -1,    -1,    -1,    -1,    -1,    23,
      24,    25,    -1,    -1,   578,    29,    -1,   914,    -1,    -1,
      -1,    -1,    -1,    -1,   921,   922,    -1,    41,    -1,    43,
      44,   809,    -1,   811,    48,    49,   859,    -1,   861,    53,
      54,    -1,    -1,   866,   867,    -1,    -1,    -1,    62,    -1,
      -1,    -1,    -1,    -1,    -1,   619,   953,    -1,    -1,   956,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   964,   619,    -1,
      -1,    -1,    -1,    -1,    -1,   898,    -1,   900,    -1,    93,
      -1,   859,    96,   861,    -1,    -1,   100,    -1,   866,   867,
      -1,   914,    -1,    -1,    -1,    -1,    -1,    -1,   921,   922,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,
      -1,    -1,    -1,    26,    27,    -1,    -1,    30,    31,    32,
     898,    -1,   900,    -1,    -1,    -1,    -1,   691,    -1,   435,
     953,    -1,    -1,   956,    -1,   619,   914,    50,    51,    -1,
     691,   964,    -1,   921,   922,    -1,    59,    -1,    -1,   455,
      -1,    -1,   716,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   619,   716,   730,    -1,   732,    -1,
      -1,    -1,    -1,    -1,    -1,   953,    -1,   741,   956,   730,
      -1,   732,    -1,    -1,    -1,    -1,   964,    -1,    -1,    -1,
     741,    -1,    -1,    -1,    -1,    -1,   760,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   691,    -1,   760,
      -1,    -1,    -1,   126,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    -1,   716,    -1,    -1,    -1,   691,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   809,   730,   811,   732,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   741,   809,    -1,
     811,   716,    -1,    -1,    -1,    -1,    -1,    -1,     0,     1,
      -1,    -1,   133,    -1,    -1,   730,   760,   732,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   741,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   859,    -1,   861,    -1,    -1,
      -1,    -1,   866,   867,    -1,   760,    -1,    -1,   859,    -1,
     861,    -1,    -1,   619,    -1,   866,   867,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   809,    -1,   811,    -1,    -1,
      62,    -1,    -1,    -1,   898,    -1,   900,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   898,    -1,   900,
     914,    -1,    -1,    -1,   809,    -1,   811,   921,   922,    -1,
      -1,    -1,    -1,   914,    -1,    -1,    -1,    -1,    -1,    -1,
     921,   922,    -1,    -1,    -1,   859,    -1,   861,    -1,    -1,
      -1,    -1,   866,   867,    -1,   691,    -1,   119,    -1,   953,
      -1,    -1,   956,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     964,    -1,   953,    -1,   859,   956,   861,    -1,    -1,    -1,
     716,   866,   867,   964,   898,    -1,   900,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   730,    -1,   732,    -1,    -1,    -1,
     914,   163,    -1,    -1,    -1,   741,    -1,   921,   922,    -1,
      -1,    -1,    -1,   898,    -1,   900,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   760,    -1,    -1,    -1,    -1,   914,
      -1,    -1,    -1,    -1,    -1,    -1,   921,   922,    -1,   953,
      -1,    -1,   956,    -1,    -1,    -1,    -1,    -1,    -1,   211,
     964,   213,    -1,    -1,    10,    -1,   218,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    20,    21,    -1,    -1,   953,    -1,
      -1,   956,    -1,   809,    -1,   811,    -1,    -1,    21,   964,
      -1,    -1,    -1,   245,    -1,   247,    -1,    -1,   250,    -1,
      33,    34,    35,    -1,    -1,    51,    -1,    -1,    -1,    -1,
     262,    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    55,    56,    57,    58,    -1,    60,    61,    -1,
     282,    -1,    -1,   859,    -1,   861,    -1,    -1,    -1,    -1,
     866,   867,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   898,    -1,   900,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   914,    -1,
     136,   124,   125,   126,    -1,   921,   922,    -1,   131,    -1,
     133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   161,    -1,    -1,    -1,    -1,
     166,   167,    -1,   169,   170,    -1,    -1,   953,    -1,    -1,
     956,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   964,    -1,
      -1,    -1,    -1,    26,    27,    -1,    -1,    30,    31,    32,
      -1,    -1,    -1,    67,    68,    69,    -1,    71,   410,    73,
      -1,    -1,    76,    -1,    78,    -1,    80,    50,    51,    -1,
      84,    -1,    86,    -1,    -1,    -1,    59,    -1,    92,    -1,
      -1,    -1,    96,    -1,    -1,    -1,   100,    -1,   102,    -1,
      -1,   105,    -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   454,    -1,    -1,    -1,   120,   121,   254,   123,
      -1,    -1,    -1,    -1,    -1,   261,    -1,   469,   264,   471,
      -1,   473,    -1,    -1,   476,    -1,   478,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,   124,   125,    -1,   290,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,   173,
     174,   175,   176,   177,   178,   179,    -1,   181,   182,    -1,
      -1,   185,    -1,   187,   526,   189,   528,   191,   192,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   539,    -1,    -1,
     204,    -1,   206,   207,   546,    -1,    -1,   549,   550,    -1,
     552,    -1,    -1,    -1,   556,    -1,    -1,    -1,    -1,    -1,
      -1,   563,   226,    -1,   228,   229,   230,    -1,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   579,    -1,   581,
      -1,    -1,    -1,   379,    21,    -1,   382,   383,   384,   385,
     386,   387,   388,    -1,   258,    -1,    33,    34,    35,    -1,
     396,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    55,    56,
      57,    58,    -1,    60,    61,    -1,   628,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
      -1,    -1,    30,    31,    32,    -1,    -1,   679,    -1,    -1,
      -1,   345,    -1,    -1,    -1,   687,    -1,   689,    -1,    -1,
     127,    -1,    50,    51,   131,   697,   133,    -1,    -1,    -1,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
      -1,   733,    -1,    -1,   736,    -1,    -1,    -1,   740,    -1,
      -1,   743,    -1,    -1,    -1,    -1,   542,    -1,    -1,    -1,
     108,    -1,   548,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     772,    -1,   568,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   577,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   591,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   807,    -1,   603,   810,    -1,
      -1,   813,    -1,    -1,   816,    -1,    -1,   819,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   621,    -1,    -1,    -1,    -1,
      -1,   627,     5,    -1,     7,     8,     9,    10,   840,   635,
      -1,    -1,    -1,    -1,    17,    18,    19,    20,   644,    22,
      23,    24,    25,    -1,    -1,    -1,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   868,    -1,    41,    -1,
      43,    44,    -1,    -1,    -1,    48,    49,    -1,   880,   881,
      53,    54,    -1,    -1,   886,    -1,    -1,    -1,    -1,    62,
      -1,    -1,    -1,    -1,   896,    -1,    -1,    -1,    71,    -1,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     574,    -1,    -1,   709,    -1,    -1,    -1,    -1,    -1,    -1,
      93,    -1,    -1,    96,    97,    -1,   590,   100,    -1,   725,
      -1,    -1,   728,    -1,    -1,    -1,    -1,   939,   734,    -1,
     942,    -1,   738,    -1,    -1,    -1,    -1,    -1,   744,   122,
      -1,    -1,    -1,    -1,   127,    -1,   129,    -1,    -1,    -1,
     756,    -1,    -1,    -1,    -1,   761,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    18,    19,    20,    -1,    22,    23,
      24,    25,    -1,    -1,    -1,    29,    -1,    -1,   794,    33,
      34,    -1,    36,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,
      54,    -1,    -1,    -1,   820,    -1,   822,    -1,    62,    63,
      64,   827,    -1,    -1,    -1,    69,    -1,    71,    72,    73,
      74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,    -1,   103,
      -1,   105,   106,    -1,    -1,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,
     124,   125,    -1,   127,    -1,   129,    -1,   131,    -1,    -1,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    18,    19,
      20,   917,    22,    23,    24,    25,    -1,    -1,    -1,    29,
      -1,    -1,    -1,    33,    34,    -1,    36,    -1,    -1,    -1,
      -1,    41,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    53,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    62,    63,    64,    -1,    -1,    -1,    -1,    69,
      -1,    71,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,    -1,   103,    -1,   105,   106,    -1,    -1,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   122,    -1,   124,   125,    -1,   127,     1,   129,
      -1,   131,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    -1,    22,
      23,    24,    25,    -1,    -1,    -1,    29,    -1,    -1,    -1,
      33,    34,    -1,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    -1,    46,    47,    48,    49,    -1,    -1,    52,
      53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,
      63,    64,    65,    66,    67,    68,    69,    -1,    71,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,    -1,    -1,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,
      -1,   124,   125,    -1,   127,     1,   129,   130,   131,     5,
       6,     7,     8,     9,    10,    11,    -1,    -1,    14,    15,
      16,    17,    18,    19,    20,    -1,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    -1,    -1,    39,    40,    41,    42,    43,    44,    -1,
      46,    47,    48,    49,    -1,    -1,    52,    53,    54,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    62,    63,    64,    65,
      66,    67,    68,    69,    -1,    71,    72,    73,    74,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,    -1,    -1,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,   124,   125,
      -1,   127,     1,   129,    -1,   131,     5,     6,     7,     8,
       9,    10,    11,    -1,    -1,    14,    15,    16,    17,    18,
      19,    20,    -1,    22,    23,    24,    25,    -1,    -1,    -1,
      29,    -1,    -1,    -1,    33,    34,    -1,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    -1,    46,    47,    48,
      49,    -1,    -1,    52,    53,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    62,    63,    64,    -1,    -1,    -1,    68,
      69,    -1,    71,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,    -1,    -1,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   122,    -1,   124,   125,    -1,   127,     1,
     129,    -1,   131,     5,     6,     7,     8,     9,    10,    11,
      -1,    -1,    14,    15,    16,    17,    18,    19,    20,    -1,
      22,    23,    24,    25,    -1,    -1,    -1,    29,    -1,    -1,
      -1,    33,    34,    -1,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    -1,    46,    47,    48,    49,    -1,    -1,
      52,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      62,    63,    64,    -1,    -1,    -1,    68,    69,    -1,    71,
      72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,    -1,    -1,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     122,    -1,   124,   125,    -1,   127,     1,   129,    -1,   131,
       5,     6,     7,     8,     9,    10,    11,    -1,    -1,    14,
      15,    16,    17,    18,    19,    20,    -1,    22,    23,    24,
      25,    -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,
      -1,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      -1,    46,    47,    48,    49,    -1,    -1,    52,    53,    54,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    63,    64,
      -1,    -1,    -1,    68,    69,    -1,    71,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,    -1,    -1,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,   124,
     125,    -1,   127,     1,   129,    -1,   131,     5,     6,     7,
       8,     9,    10,    11,    -1,    -1,    14,    15,    16,    17,
      18,    19,    20,    -1,    22,    23,    24,    25,    -1,    -1,
      -1,    29,    -1,    -1,    -1,    33,    34,    -1,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    -1,    46,    47,
      48,    49,    -1,    -1,    52,    53,    54,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    62,    63,    64,    -1,    -1,    -1,
      68,    69,    -1,    71,    72,    73,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,    -1,
      -1,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   122,    -1,   124,   125,    -1,   127,
       1,   129,    -1,   131,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      -1,    22,    23,    24,    25,    -1,    -1,    -1,    29,    -1,
      -1,    -1,    33,    34,    -1,    36,    -1,    -1,    39,    40,
      41,    42,    43,    44,    -1,    46,    47,    48,    49,    -1,
      -1,    52,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    62,    63,    64,    -1,    -1,    -1,    68,    69,    -1,
      71,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,    -1,    -1,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   122,    -1,   124,   125,    -1,   127,     1,   129,    -1,
     131,     5,     6,     7,     8,     9,    10,    11,    -1,    -1,
      14,    15,    16,    17,    18,    19,    20,    -1,    22,    23,
      24,    25,    -1,    -1,    -1,    29,    -1,    -1,    -1,    33,
      34,    -1,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    -1,    46,    47,    48,    49,    -1,    -1,    52,    53,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    63,
      64,    -1,    -1,    -1,    68,    69,    -1,    71,    72,    73,
      74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,    -1,    -1,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,
     124,   125,    -1,   127,     1,   129,    -1,   131,     5,     6,
       7,     8,     9,    10,    11,    -1,    -1,    14,    15,    16,
      17,    18,    19,    20,    -1,    22,    23,    24,    25,    -1,
      -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,    36,
      -1,    38,    39,    40,    41,    42,    43,    44,    -1,    46,
      47,    48,    49,    -1,    -1,    52,    53,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    62,    63,    64,    -1,    -1,
      -1,    68,    69,    -1,    71,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
      -1,    -1,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   122,    -1,   124,   125,    -1,
     127,     1,   129,    -1,   131,     5,     6,     7,     8,     9,
      10,    11,    -1,    -1,    14,    15,    16,    17,    18,    19,
      20,    -1,    22,    23,    24,    25,    -1,    -1,    -1,    29,
      -1,    -1,    -1,    33,    34,    -1,    36,    -1,    -1,    39,
      40,    41,    42,    43,    44,    -1,    46,    47,    48,    49,
      -1,    -1,    52,    53,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    71,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,    -1,    -1,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   122,    -1,   124,   125,    -1,   127,     1,   129,
      -1,   131,     5,     6,     7,     8,     9,    10,    11,    -1,
      -1,    14,    15,    16,    17,    18,    19,    20,    -1,    22,
      23,    24,    25,    -1,    -1,    -1,    29,    -1,    -1,    -1,
      33,    34,    -1,    36,    -1,    -1,    39,    40,    41,    42,
      43,    44,    -1,    46,    47,    48,    49,    -1,    -1,    52,
      53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,
      63,    64,    -1,    -1,    -1,    68,    69,    -1,    71,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,    -1,    -1,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,
      -1,   124,   125,    -1,   127,     1,   129,    -1,   131,     5,
       6,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      16,    17,    18,    19,    20,    -1,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    53,    54,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    62,    63,    64,    -1,
      -1,    -1,    -1,    69,    -1,    71,    72,    73,    74,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,    -1,   103,    -1,   105,
     106,    -1,    -1,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,   124,   125,
      -1,   127,    -1,   129,   130,   131,     5,    -1,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    17,    18,
      19,    20,    -1,    22,    23,    24,    25,    -1,    -1,    28,
      29,    -1,    -1,    -1,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    -1,    43,    44,    -1,    -1,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    71,    -1,    73,    74,    -1,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    93,    -1,    -1,    96,    97,    -1,
      -1,   100,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
      -1,    -1,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,    -1,    -1,   122,   123,    -1,    -1,    -1,   127,   127,
     129,     5,   131,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    17,    18,    19,    20,    -1,    22,    23,
      24,    25,    -1,    -1,    28,    29,    -1,    -1,    -1,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    43,
      44,    -1,    -1,    -1,    48,    49,    -1,    -1,    52,    53,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,    73,
      74,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    93,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,    -1,   122,   123,
      -1,    -1,   126,   127,   127,   129,     5,   131,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    17,    18,
      19,    20,    -1,    22,    23,    24,    25,    -1,    -1,    28,
      29,    -1,    -1,    -1,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    -1,    43,    44,    -1,    -1,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    71,    -1,    73,    74,    -1,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    93,    -1,    -1,    96,    97,    -1,
      -1,   100,    -1,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,    -1,    -1,   122,   123,    -1,    -1,    -1,   127,   127,
     129,     5,   131,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    17,    18,    19,    20,    -1,    22,    23,
      24,    25,    -1,    -1,    28,    29,    -1,    -1,    -1,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    43,
      44,    -1,    -1,    -1,    48,    49,    -1,    -1,    52,    53,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,    73,
      74,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    93,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,    -1,   122,   123,
      -1,    -1,    -1,   127,   127,   129,     5,   131,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    17,    18,
      19,    20,    -1,    22,    23,    24,    25,    -1,    -1,    28,
      29,    -1,    -1,    -1,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    -1,    43,    44,    -1,    -1,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    71,    -1,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    97,    -1,
      -1,   100,    -1,    -1,    -1,    -1,   105,   106,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,    -1,    -1,   122,   123,    -1,    -1,    -1,   127,    -1,
     129,     5,   131,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    17,    18,    19,    20,    -1,    22,    23,
      24,    25,    -1,    -1,    28,    29,    -1,    -1,    -1,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    43,
      44,    -1,    -1,    -1,    48,    49,    -1,    -1,    52,    53,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,    73,
      74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,    -1,   122,   123,
      -1,    -1,    -1,   127,    -1,   129,     5,   131,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    17,    18,
      19,    20,    -1,    22,    23,    24,    25,    -1,    -1,    28,
      29,    -1,    -1,    -1,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    -1,    43,    44,    -1,    -1,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    71,    -1,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    97,    -1,
      -1,   100,    -1,    -1,    -1,    -1,   105,   106,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,    -1,    -1,   122,   123,    -1,    -1,    -1,   127,    -1,
     129,     5,   131,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    17,    18,    19,    20,    -1,    22,    23,
      24,    25,    -1,    -1,    28,    29,    -1,    -1,    -1,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    43,
      44,    -1,    -1,    -1,    48,    49,    -1,    -1,    52,    53,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,    73,
      74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,
      -1,    -1,    96,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,    -1,   122,   123,
      -1,    -1,    -1,   127,    -1,   129,     5,   131,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    17,    18,
      19,    20,    -1,    22,    23,    24,    25,    -1,    -1,    -1,
      29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    41,    -1,    43,    44,    -1,    -1,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    71,    -1,    73,    74,    -1,    -1,    -1,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    34,    35,    93,    -1,    -1,    96,    97,    -1,
      -1,   100,    -1,    -1,    -1,    -1,   105,   106,    -1,    -1,
      -1,    -1,    -1,    55,    56,    57,    58,    -1,    60,    61,
      -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,
     129,    -1,   131,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      -1,    -1,    -1,    -1,    -1,    26,    27,    -1,    21,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      33,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    50,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,   131,
      -1,   133,    55,    56,    57,    58,    21,    60,    61,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    34,
      35,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    -1,
      55,    56,    57,    58,    -1,    60,    61,   108,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    -1,   131,    -1,
     133,    -1,    26,    27,    -1,    21,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    34,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    59,   131,    -1,   133,    55,
      56,    57,    58,    21,    60,    61,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    33,    34,    -1,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    -1,    55,    56,    57,
      58,    -1,    60,    61,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    -1,   131,    -1,   133,     5,    -1,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    25,    -1,
       5,    -1,    29,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   131,    41,   133,    43,    44,    23,    24,
      25,    48,    49,    -1,    29,    -1,    53,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    62,    41,    -1,    43,    44,
      -1,    -1,    -1,    48,    49,    -1,    -1,    -1,    53,    54,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    -1,    -1,   100,     5,    -1,    -1,     8,     9,    -1,
     107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,
      -1,    96,    23,    24,    25,   100,     5,    -1,    29,     8,
       9,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    -1,    43,    44,    23,    24,    25,    48,    49,    -1,
      29,    -1,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    62,    41,    -1,    43,    44,    -1,    -1,    -1,    48,
      49,    -1,    -1,    -1,    53,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,   100,
       5,    -1,    -1,     8,     9,    -1,   107,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    23,    24,
      25,   100,     5,    -1,    29,     8,     9,    -1,   107,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    43,    44,
      23,    24,    25,    48,    49,    -1,    29,    -1,    53,    54,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    41,    -1,
      43,    44,    -1,    -1,    -1,    48,    49,    -1,    73,    74,
      53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
      93,    74,    75,    96,    77,    -1,    79,   100,    81,    -1,
      83,    -1,    85,    -1,    87,    -1,    89,    -1,    91,    -1,
      93,    94,    -1,    -1,    -1,    98,    -1,    -1,   101,    -1,
      -1,   104,    -1,   106,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,
      -1,   124
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    17,    18,    19,    20,    22,    23,    24,    25,    29,
      33,    34,    36,    41,    42,    43,    44,    46,    48,    49,
      52,    53,    54,    62,    63,    64,    69,    71,    72,    73,
      74,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   103,   105,   106,   109,   122,   124,   125,   127,   129,
     131,   136,   137,   138,   139,   150,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   197,   198,   199,   200,   201,
     202,   204,   209,   211,   212,   213,   214,   220,   222,   223,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   240,
     245,   251,   252,   253,   254,   255,   267,   271,   274,   290,
     298,   299,   311,   314,   316,   326,   329,   332,   344,   349,
     353,   355,   362,   374,   378,   381,   381,     8,     9,    23,
      24,    25,    29,    41,    43,    44,    54,    62,    96,   166,
     166,   152,   159,   160,   256,   257,   127,    28,    52,   115,
     116,   123,   167,   168,   169,   171,   173,   176,   178,   180,
     182,   184,   187,   189,   191,   193,   197,   198,   199,   202,
     203,   209,   213,   215,   216,   220,   222,   223,   224,   226,
     233,   234,   235,   236,   245,   250,   251,   253,    35,    35,
     166,   164,   166,   165,   166,   153,   216,   216,   315,   272,
     159,   159,   166,   189,   191,   197,   198,   199,   202,   209,
     213,   219,   220,   251,   253,    35,   268,   259,   155,   363,
     151,   159,   189,   191,   193,    22,   166,   166,   129,   166,
     280,    17,   158,   241,    70,   375,   166,   197,   251,   340,
     341,   354,   216,   258,   127,   251,   123,   250,   107,   108,
     123,   186,   206,   207,   208,   216,   218,   239,   166,   193,
     210,     0,     1,   138,   139,   150,   274,   381,    35,   127,
     133,   237,   238,   237,   237,   166,   193,   196,   251,    35,
     237,   196,    35,   237,   196,   196,    35,   237,   196,    35,
     237,   196,    35,   237,   196,    35,   196,    35,   237,   196,
     237,   196,   251,    35,   196,   251,    35,   196,   251,   127,
     159,   237,    20,    22,   166,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   188,   190,   192,   196,   245,   251,   252,   253,   254,
     196,   237,   159,   237,    35,   196,    35,   159,   237,   196,
      35,   127,   237,   131,   196,    35,   159,   237,   196,    21,
      33,    34,    55,    56,    57,    58,    60,    61,   111,   131,
     221,   159,   159,   159,   159,   159,   246,   381,    35,   237,
      35,   159,   237,   196,   251,    35,   159,   237,   196,   159,
      12,    13,    14,    15,    16,    39,    40,    47,    68,   102,
     104,   291,   292,   294,   295,   296,   297,   302,   304,   309,
     310,     1,   138,   150,   161,   162,   274,   381,    14,    15,
      16,    37,    38,    39,   291,   293,   294,   295,   296,   297,
     312,   313,   317,   322,   250,   162,    14,    16,   102,   291,
     292,   293,   294,   295,   296,   350,   351,   352,   159,   140,
     142,   141,   143,   216,   381,   166,   260,   263,   260,   216,
     216,   216,   216,   166,   201,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,   147,   148,   147,   147,   147,   147,    26,    27,
      30,    31,    32,    50,    51,    59,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   126,   300,   147,   157,   126,
     381,   126,   381,   189,   261,   262,   263,   381,   166,   273,
      21,   111,   336,   194,   166,   269,   273,   261,    70,   368,
     216,   375,    17,   381,   127,   276,   166,   381,   145,   147,
     127,   381,   115,   128,   107,   166,   242,   243,   126,   166,
     203,   207,   215,   216,   251,   376,   377,    53,   126,   216,
     381,   260,   166,   128,   130,   166,   189,   197,   199,   201,
     209,   126,   130,   108,   126,   130,   381,   205,   208,   216,
     107,   216,   217,   126,   132,   205,   205,   210,   216,   216,
     216,   216,   216,   216,   216,   216,   210,   216,   244,   248,
     381,   305,   309,    13,   302,   309,   161,   318,   323,    37,
     312,   322,    38,   312,   381,    37,    38,   356,   359,   381,
     127,   381,   127,   381,   133,   145,   265,   266,   126,   381,
     381,   126,   166,   166,   216,   216,   216,   216,   216,   216,
     216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
     216,   216,   381,   381,   166,   166,   145,   265,   126,   154,
     145,   126,   381,   216,   145,    53,   126,   270,   381,   156,
     216,   381,   381,   123,   381,   275,   166,   279,   280,   282,
     381,   277,   281,    17,   381,   145,   134,   126,   377,   126,
     123,   216,   342,   343,   340,   381,   379,   381,   128,   216,
     218,   208,   126,   128,   217,   133,   128,   128,   126,   247,
     162,   163,   303,   250,   307,   309,   250,   381,   320,   312,
     325,   327,   216,   360,    37,   351,   359,   107,   144,   149,
     166,   144,   216,   264,   146,   148,   126,   132,   263,   206,
     301,    21,   146,   262,   381,   166,   333,   166,   166,   381,
     381,   163,    17,    93,   123,   166,   284,   288,   289,   283,
     280,   282,   381,   166,   278,   282,   107,   285,   288,   289,
     107,   166,   377,   166,   126,   345,   163,   108,   208,   217,
     216,   130,    16,   130,   249,   163,   381,   250,   381,   324,
     250,   381,   163,   357,   381,   216,   128,   126,   145,   128,
      21,   216,   133,   126,   163,   216,   145,    48,   145,   364,
     381,   123,   166,   166,   145,   128,   126,   126,   145,   126,
     130,   128,   126,   145,   342,   100,   348,    14,    16,   104,
     291,   292,   293,   295,   296,   297,   380,   218,   125,   306,
     381,   319,   163,   381,   163,   328,   381,   361,   358,   381,
     107,   166,   381,   216,   216,   206,   250,    65,    66,   371,
     372,   373,   166,   145,   127,   145,   145,   123,   166,   289,
      93,   282,   381,   145,   107,   289,   346,   163,   308,   163,
     321,    14,    16,    40,   291,   292,   293,   294,   295,   297,
     330,   331,   163,   163,   381,   145,   128,    49,   337,   166,
     365,   381,   381,   127,   145,   218,   286,   287,   381,   166,
     145,   123,   166,   126,   381,   163,   163,   163,   250,   334,
      67,   369,   370,   163,   163,   286,   126,   128,   127,   145,
     166,   145,   107,   347,   381,   366,   381,   128,   287,   286,
     127,   145,   163,   338,   335,    14,    16,    68,   291,   292,
     293,   294,   296,   297,   367,   163,   128,   286,    14,    16,
      47,   292,   293,   294,   295,   296,   297,   339,   338,   128,
     166
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   135,   136,   136,   137,   137,   137,   137,   137,   137,
     137,   137,   137,   137,   137,   137,   138,   138,   138,   140,
     139,   141,   139,   142,   139,   143,   139,   144,   144,   144,
     144,   145,   145,   146,   146,   147,   147,   147,   147,   147,
     147,   147,   147,   147,   148,   148,   148,   148,   148,   148,
     148,   148,   148,   149,   149,   150,   150,   150,   150,   150,
     150,   150,   150,   150,   150,   150,   150,   150,   150,   151,
     150,   150,   150,   150,   152,   150,   153,   154,   150,   155,
     156,   150,   150,   150,   150,   150,   150,   157,   150,   150,
     158,   158,   160,   159,   161,   161,   161,   161,   161,   162,
     162,   163,   163,   164,   164,   165,   165,   166,   166,   166,
     166,   166,   166,   166,   166,   166,   166,   166,   166,   166,
     166,   166,   166,   166,   166,   167,   167,   168,   169,   170,
     170,   171,   172,   173,   174,   175,   176,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   184,   185,   186,   186,
     187,   188,   189,   189,   190,   191,   192,   193,   193,   194,
     194,   195,   195,   195,   195,   195,   195,   195,   195,   195,
     195,   195,   195,   195,   195,   196,   196,   197,   197,   197,
     197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
     197,   197,   197,   197,   197,   197,   197,   198,   198,   198,
     198,   198,   198,   199,   199,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   200,   201,   202,   202,   203,   204,   205,   205,   206,
     206,   207,   207,   207,   207,   207,   208,   208,   209,   209,
     209,   210,   210,   211,   212,   213,   214,   215,   215,   215,
     215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
     215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
     215,   215,   215,   215,   215,   215,   215,   215,   215,   216,
     216,   216,   216,   216,   216,   217,   217,   218,   218,   219,
     219,   219,   219,   219,   219,   219,   220,   220,   220,   220,
     220,   220,   220,   220,   220,   220,   220,   220,   220,   220,
     220,   220,   220,   220,   220,   220,   220,   221,   221,   222,
     223,   223,   224,   224,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   233,   233,   233,   233,   233,   234,
     234,   234,   234,   234,   234,   235,   235,   236,   236,   236,
     236,   236,   236,   236,   236,   236,   237,   238,   238,   238,
     239,   239,   241,   240,   242,   242,   242,   242,   243,   243,
     244,   244,   246,   247,   245,   248,   245,   249,   249,   250,
     250,   251,   252,   253,   254,   256,   255,   257,   255,   258,
     255,   259,   255,   260,   260,   261,   261,   262,   262,   262,
     262,   263,   264,   263,   263,   265,   266,   266,   266,   268,
     267,   269,   269,   270,   270,   272,   271,   273,   273,   275,
     274,   276,   274,   274,   274,   274,   277,   274,   278,   278,
     279,   279,   279,   279,   281,   280,   283,   282,   284,   284,
     284,   284,   285,   285,   285,   285,   285,   285,   285,   286,
     286,   287,   288,   288,   288,   288,   288,   288,   289,   289,
     289,   289,   289,   289,   290,   290,   290,   290,   290,   290,
     290,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     298,   298,   298,   300,   301,   299,   303,   302,   305,   306,
     304,   307,   308,   304,   309,   310,   310,   310,   310,   310,
     310,   310,   310,   310,   311,   311,   311,   311,   312,   313,
     313,   313,   313,   313,   313,   313,   313,   313,   315,   314,
     316,   316,   318,   319,   317,   320,   321,   317,   323,   324,
     322,   325,   322,   327,   328,   326,   329,   330,   331,   331,
     331,   331,   331,   331,   331,   331,   331,   333,   334,   335,
     332,   336,   336,   337,   337,   338,   339,   339,   339,   339,
     339,   339,   339,   339,   339,   339,   340,   340,   341,   341,
     342,   342,   343,   343,   345,   346,   347,   344,   348,   348,
     350,   349,   349,   351,   352,   352,   352,   352,   352,   352,
     352,   352,   352,   354,   353,   355,   355,   357,   356,   358,
     356,   356,   356,   360,   361,   359,   363,   364,   365,   366,
     362,   367,   367,   367,   367,   367,   367,   367,   367,   367,
     368,   368,   369,   369,   370,   371,   371,   371,   372,   373,
     374,   374,   375,   375,   376,   376,   376,   376,   376,   377,
     377,   377,   377,   377,   379,   378,   380,   380,   380,   380,
     380,   380,   380,   380,   380,   381,   381
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     1,     1,     1,     1,     1,     2,
       2,     2,     2,     2,     2,     3,     3,     4,     6,     0,
       4,     0,     4,     0,     7,     0,     7,     0,     1,     1,
       3,     0,     1,     0,     1,     1,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     4,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     0,
       4,     2,     2,     2,     0,     4,     0,     0,     5,     0,
       0,     5,     1,     1,     1,     3,     3,     0,     4,     4,
       1,     3,     0,     2,     1,     1,     1,     1,     1,     1,
       2,     0,     1,     1,     3,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     2,     1,     2,     2,     1,     1,     2,     1,
       2,     3,     2,     2,     2,     3,     3,     2,     3,     5,
       1,     2,     1,     1,     2,     2,     2,     1,     1,     2,
       3,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     1,     1,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     4,     1,     4,     2,     2,     1,     3,     1,
       1,     2,     2,     2,     2,     2,     1,     1,     3,     3,
       2,     1,     1,     4,     2,     4,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     2,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     1,     1,     1,     0,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     2,     2,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     1,     1,     1,     1,     1,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     2,     2,     3,     4,
       1,     3,     0,     4,     0,     1,     1,     3,     2,     4,
       1,     3,     0,     0,     5,     0,     5,     1,     2,     1,
       3,     3,     2,     8,     2,     0,     4,     0,     4,     0,
       4,     0,     4,     1,     3,     1,     3,     1,     2,     4,
       3,     2,     0,     5,     3,     2,     2,     3,     4,     0,
       5,     2,     4,     0,     2,     0,     4,     2,     4,     0,
       8,     0,     5,     3,     4,     3,     0,     7,     1,     3,
       1,     2,     1,     2,     0,     6,     0,     3,     0,     1,
       1,     3,     0,     1,     1,     1,     3,     3,     5,     1,
       3,     1,     2,     3,     5,     4,     5,     7,     3,     4,
       6,     5,     6,     8,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       3,     3,     4,     0,     0,     6,     0,     4,     0,     0,
       6,     0,     0,     7,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     3,     2,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     3,
       1,     2,     0,     0,     6,     0,     0,     7,     0,     0,
       5,     0,     5,     0,     0,     7,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     0,     0,
      12,     1,     1,     0,     2,     2,     1,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       2,     1,     1,     3,     0,     0,     0,    10,     0,     1,
       0,     4,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     4,     1,     2,     0,     5,     0,
       6,     1,     2,     0,     0,     5,     0,     0,     0,     0,
      11,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     2,     0,     3,     1,     0,     3,     3,     1,     2,
       3,     2,     0,     2,     1,     2,     1,     2,     3,     1,
       1,     1,     1,     1,     0,     6,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (pComp, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256



/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)

/* This macro is provided for backward compatibility. */
#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, pComp); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, PZH_COMP pComp)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (pComp);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, PZH_COMP pComp)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, pComp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, PZH_COMP pComp)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                                              , pComp);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, Rule, pComp); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, PZH_COMP pComp)
{
  YYUSE (yyvaluep);
  YYUSE (pComp);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  switch (yytype)
    {
          case 17: /* LITERAL  */
#line 290 "ziher.y" /* yacc.c:1257  */
      { if( ((*yyvaluep).valChar).dealloc ) zh_xfree( ((*yyvaluep).valChar).string ); }
#line 3487 "zh_comp_y.c" /* yacc.c:1257  */
        break;

    case 97: /* CBSTART  */
#line 289 "ziher.y" /* yacc.c:1257  */
      { if( ((*yyvaluep).asCodeblock).string )  zh_xfree( ((*yyvaluep).asCodeblock).string ); }
#line 3493 "zh_comp_y.c" /* yacc.c:1257  */
        break;


      default:
        break;
    }
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (PZH_COMP pComp)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);

        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, pComp);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 9:
#line 303 "ziher.y" /* yacc.c:1646  */
    { yyclearin; yyerrok; }
#line 3761 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 15:
#line 309 "ziher.y" /* yacc.c:1646  */
    { yyclearin; yyerrok; }
#line 3767 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 16:
#line 313 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->currLine = ( int ) (yyvsp[-1].valLong).lNumber;
                    ZH_COMP_PARAM->pLex->fEol = ZH_FALSE; }
#line 3774 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 17:
#line 316 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->currModule = zh_compIdentifierNew( ZH_COMP_PARAM, (yyvsp[-1].valChar).string, (yyvsp[-1].valChar).dealloc ? ZH_IDENT_FREE : ZH_IDENT_STATIC );
                    ZH_COMP_PARAM->currLine = ( int ) (yyvsp[-2].valLong).lNumber;
                    ZH_COMP_PARAM->pLex->fEol = ZH_FALSE;
                    (yyvsp[-1].valChar).dealloc = ZH_FALSE; }
#line 3783 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 18:
#line 321 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->currModule = zh_compIdentifierNew( ZH_COMP_PARAM, (yyvsp[-1].valChar).string, (yyvsp[-1].valChar).dealloc ? ZH_IDENT_FREE : ZH_IDENT_STATIC );
                    ZH_COMP_PARAM->currLine = ( int ) (yyvsp[-4].valLong).lNumber;
                    ZH_COMP_PARAM->pLex->fEol = ZH_FALSE;
                    if( (yyvsp[-3].valChar).dealloc ) { zh_xfree( (yyvsp[-3].valChar).string ); (yyvsp[-3].valChar).dealloc = ZH_FALSE; }
                    (yyvsp[-1].valChar).dealloc = ZH_FALSE; }
#line 3793 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 19:
#line 328 "ziher.y" /* yacc.c:1646  */
    { zh_compFunctionAdd( ZH_COMP_PARAM, (yyvsp[0].string), ( ZH_SYMBOLSCOPE ) (yyvsp[-1].iNumber), 0 ); }
#line 3799 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 21:
#line 329 "ziher.y" /* yacc.c:1646  */
    { zh_compFunctionAdd( ZH_COMP_PARAM, (yyvsp[0].string), ( ZH_SYMBOLSCOPE ) (yyvsp[-1].iNumber), ZH_FUNF_PROCEDURE ); }
#line 3805 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 23:
#line 330 "ziher.y" /* yacc.c:1646  */
    { zh_compFunctionAdd( ZH_COMP_PARAM, (yyvsp[0].string), ( ZH_SYMBOLSCOPE ) (yyvsp[-1].iNumber), 0 ); ZH_COMP_PARAM->iVarScope = ZH_VSCOMP_PARAMETER; }
#line 3811 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 25:
#line 331 "ziher.y" /* yacc.c:1646  */
    { zh_compFunctionAdd( ZH_COMP_PARAM, (yyvsp[0].string), ( ZH_SYMBOLSCOPE ) (yyvsp[-1].iNumber), ZH_FUNF_PROCEDURE ); ZH_COMP_PARAM->iVarScope = ZH_VSCOMP_PARAMETER;}
#line 3817 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 27:
#line 334 "ziher.y" /* yacc.c:1646  */
    { (yyval.iNumber) = 0; }
#line 3823 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 28:
#line 335 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->functions.pLast->fVParams = ZH_TRUE; (yyval.iNumber) = 0; }
#line 3829 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 30:
#line 337 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->functions.pLast->fVParams = ZH_TRUE; (yyval.iNumber) = (yyvsp[-2].iNumber); }
#line 3835 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 31:
#line 340 "ziher.y" /* yacc.c:1646  */
    { (yyval.asVarType) = zh_compVarTypeNew( ZH_COMP_PARAM, ' ', NULL ); }
#line 3841 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 33:
#line 344 "ziher.y" /* yacc.c:1646  */
    { (yyval.asVarType) = zh_compVarTypeNew( ZH_COMP_PARAM, ' ', NULL ); }
#line 3847 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 35:
#line 348 "ziher.y" /* yacc.c:1646  */
    { (yyval.asVarType) = zh_compVarTypeNew( ZH_COMP_PARAM, 'N', NULL ); }
#line 3853 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 36:
#line 349 "ziher.y" /* yacc.c:1646  */
    { (yyval.asVarType) = zh_compVarTypeNew( ZH_COMP_PARAM, 'C', NULL ); }
#line 3859 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 37:
#line 350 "ziher.y" /* yacc.c:1646  */
    { (yyval.asVarType) = zh_compVarTypeNew( ZH_COMP_PARAM, 'D', NULL ); }
#line 3865 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 38:
#line 351 "ziher.y" /* yacc.c:1646  */
    { (yyval.asVarType) = zh_compVarTypeNew( ZH_COMP_PARAM, 'L', NULL ); }
#line 3871 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 39:
#line 352 "ziher.y" /* yacc.c:1646  */
    { (yyval.asVarType) = zh_compVarTypeNew( ZH_COMP_PARAM, 'B', NULL ); }
#line 3877 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 40:
#line 353 "ziher.y" /* yacc.c:1646  */
    { (yyval.asVarType) = zh_compVarTypeNew( ZH_COMP_PARAM, 'O', NULL ); }
#line 3883 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 41:
#line 354 "ziher.y" /* yacc.c:1646  */
    { (yyval.asVarType) = zh_compVarTypeNew( ZH_COMP_PARAM, 'S', (yyvsp[0].string) );   }
#line 3889 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 42:
#line 355 "ziher.y" /* yacc.c:1646  */
    { (yyval.asVarType) = zh_compVarTypeNew( ZH_COMP_PARAM, ' ', NULL ); }
#line 3895 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 44:
#line 359 "ziher.y" /* yacc.c:1646  */
    { (yyval.asVarType) = zh_compVarTypeNew( ZH_COMP_PARAM, 'A', NULL ); }
#line 3901 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 45:
#line 360 "ziher.y" /* yacc.c:1646  */
    { (yyval.asVarType) = zh_compVarTypeNew( ZH_COMP_PARAM, 'n', NULL ); }
#line 3907 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 46:
#line 361 "ziher.y" /* yacc.c:1646  */
    { (yyval.asVarType) = zh_compVarTypeNew( ZH_COMP_PARAM, 'c', NULL ); }
#line 3913 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 47:
#line 362 "ziher.y" /* yacc.c:1646  */
    { (yyval.asVarType) = zh_compVarTypeNew( ZH_COMP_PARAM, 'd', NULL ); }
#line 3919 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 48:
#line 363 "ziher.y" /* yacc.c:1646  */
    { (yyval.asVarType) = zh_compVarTypeNew( ZH_COMP_PARAM, 'l', NULL ); }
#line 3925 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 49:
#line 364 "ziher.y" /* yacc.c:1646  */
    { (yyval.asVarType) = zh_compVarTypeNew( ZH_COMP_PARAM, 'a', NULL ); }
#line 3931 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 50:
#line 365 "ziher.y" /* yacc.c:1646  */
    { (yyval.asVarType) = zh_compVarTypeNew( ZH_COMP_PARAM, 'b', NULL ); }
#line 3937 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 51:
#line 366 "ziher.y" /* yacc.c:1646  */
    { (yyval.asVarType) = zh_compVarTypeNew( ZH_COMP_PARAM, 'o', NULL ); }
#line 3943 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 52:
#line 367 "ziher.y" /* yacc.c:1646  */
    { (yyval.asVarType) = zh_compVarTypeNew( ZH_COMP_PARAM, 's', (yyvsp[0].string) );   }
#line 3949 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 53:
#line 370 "ziher.y" /* yacc.c:1646  */
    { zh_compVariableAdd( ZH_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); (yyval.iNumber) = 1; }
#line 3955 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 54:
#line 371 "ziher.y" /* yacc.c:1646  */
    { zh_compVariableAdd( ZH_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); (yyval.iNumber)++; }
#line 3961 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 56:
#line 380 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( zh_compExprGenStatement( (yyvsp[-1].asExpr), ZH_COMP_PARAM ) ); ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_WITH_RETURN; }
#line 3967 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 57:
#line 381 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( zh_compExprGenStatement( (yyvsp[-1].asExpr), ZH_COMP_PARAM ) ); ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_WITH_RETURN; }
#line 3973 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 58:
#line 382 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( zh_compExprGenStatement( (yyvsp[-1].asExpr), ZH_COMP_PARAM ) ); ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_WITH_RETURN; }
#line 3979 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 59:
#line 383 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( zh_compExprGenStatement( (yyvsp[-1].asExpr), ZH_COMP_PARAM ) ); ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_WITH_RETURN; }
#line 3985 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 60:
#line 384 "ziher.y" /* yacc.c:1646  */
    { if( ZH_COMP_ISSUPPORTED( ZH_COMPFLAG_XBASE ) )
                                         ZH_COMP_EXPR_FREE( zh_compExprGenStatement( (yyvsp[-1].asExpr), ZH_COMP_PARAM ) );
                                      else
                                         ZH_COMP_EXPR_FREE( ZH_COMP_ERROR_SYNTAX( (yyvsp[-1].asExpr) ) );
                                      ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_WITH_RETURN;
                                    }
#line 3996 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 61:
#line 390 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( zh_compExprGenStatement( (yyvsp[-1].asExpr), ZH_COMP_PARAM ) ); ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_WITH_RETURN; }
#line 4002 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 62:
#line 391 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( zh_compExprGenStatement( (yyvsp[-1].asExpr), ZH_COMP_PARAM ) ); ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_WITH_RETURN; }
#line 4008 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 63:
#line 392 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( zh_compExprGenStatement( (yyvsp[-1].asExpr), ZH_COMP_PARAM ) ); ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_WITH_RETURN; }
#line 4014 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 64:
#line 393 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( zh_compExprGenStatement( (yyvsp[-1].asExpr), ZH_COMP_PARAM ) ); ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_WITH_RETURN; }
#line 4020 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 65:
#line 394 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( zh_compExprGenStatement( (yyvsp[-1].asExpr), ZH_COMP_PARAM ) ); ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_WITH_RETURN; }
#line 4026 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 66:
#line 395 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( zh_compExprGenStatement( (yyvsp[-1].asExpr), ZH_COMP_PARAM ) ); ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_WITH_RETURN; }
#line 4032 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 67:
#line 396 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( zh_compExprGenStatement( (yyvsp[-1].asExpr), ZH_COMP_PARAM ) ); ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_WITH_RETURN; }
#line 4038 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 68:
#line 397 "ziher.y" /* yacc.c:1646  */
    { zh_compGenBreak( ZH_COMP_PARAM ); zh_compGenPCode2( ZH_P_DOSHORT, 0, ZH_COMP_PARAM );
                                      ZH_COMP_PARAM->functions.pLast->funFlags |= ZH_FUNF_BREAK_CODE; }
#line 4045 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 69:
#line 399 "ziher.y" /* yacc.c:1646  */
    { zh_compLinePushIfInside( ZH_COMP_PARAM ); }
#line 4051 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 70:
#line 400 "ziher.y" /* yacc.c:1646  */
    {
                                       zh_compGenBreak( ZH_COMP_PARAM ); ZH_COMP_EXPR_FREE( zh_compExprGenPush( (yyvsp[-1].asExpr), ZH_COMP_PARAM ) );
                                       zh_compGenPCode2( ZH_P_DOSHORT, 1, ZH_COMP_PARAM );
                                       ZH_COMP_PARAM->functions.pLast->funFlags |= ZH_FUNF_BREAK_CODE;
                                    }
#line 4061 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 71:
#line 405 "ziher.y" /* yacc.c:1646  */
    { zh_compLoopExit( ZH_COMP_PARAM ); ZH_COMP_PARAM->functions.pLast->funFlags |= ZH_FUNF_BREAK_CODE; }
#line 4067 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 72:
#line 406 "ziher.y" /* yacc.c:1646  */
    { zh_compLoopLoop( ZH_COMP_PARAM ); ZH_COMP_PARAM->functions.pLast->funFlags |= ZH_FUNF_BREAK_CODE; }
#line 4073 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 73:
#line 407 "ziher.y" /* yacc.c:1646  */
    {
                        if( ZH_COMP_PARAM->functions.pLast->wSeqCounter )
                        {
                           zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_EXIT_IN_SEQUENCE, "RETURN", NULL );
                        }
                        zh_compGenPCode1( ZH_P_ENDPROC, ZH_COMP_PARAM );
                        if( ( ZH_COMP_PARAM->functions.pLast->funFlags & ZH_FUNF_PROCEDURE ) == 0 )
                        {
                           /* return from a function without a return value */
                           zh_compGenWarning( ZH_COMP_PARAM, zh_comp_szWarnings, 'W', ZH_COMP_WARN_NO_RETURN_VALUE, NULL, NULL );
                        }
                        ZH_COMP_PARAM->functions.pLast->funFlags |= ZH_FUNF_WITH_RETURN | ZH_FUNF_BREAK_CODE;
                     }
#line 4091 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 74:
#line 420 "ziher.y" /* yacc.c:1646  */
    {  zh_compLinePushIfInside( ZH_COMP_PARAM ); }
#line 4097 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 75:
#line 422 "ziher.y" /* yacc.c:1646  */
    {
                        if( ZH_COMP_PARAM->functions.pLast->wSeqCounter )
                        {
                           zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_EXIT_IN_SEQUENCE, "RETURN", NULL );
                        }
                        /* TODO: check if return value agree with declared value */
                        ZH_COMP_EXPR_FREE( zh_compExprGenPush( (yyvsp[-1].asExpr), ZH_COMP_PARAM ) );
                        if( ZH_COMP_PARAM->functions.pLast->funFlags & ZH_FUNF_EXTBLOCK )
                           /* extended clodeblock, use ZH_P_ENDBLOCK to return value and stop execution */
                           zh_compGenPCode1( ZH_P_ENDBLOCK, ZH_COMP_PARAM );
                        else
                           zh_compGenPCode2( ZH_P_RETVALUE, ZH_P_ENDPROC, ZH_COMP_PARAM );
                        if( ZH_COMP_PARAM->functions.pLast->funFlags & ZH_FUNF_PROCEDURE )
                        {
                           /* procedure returns a value */
                           zh_compGenWarning( ZH_COMP_PARAM, zh_comp_szWarnings, 'W', ZH_COMP_WARN_PROC_RETURN_VALUE, NULL, NULL );
                        }
                        ZH_COMP_PARAM->functions.pLast->funFlags |= ZH_FUNF_WITH_RETURN | ZH_FUNF_BREAK_CODE;
                     }
#line 4121 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 76:
#line 441 "ziher.y" /* yacc.c:1646  */
    {  zh_compLinePushIfInside( ZH_COMP_PARAM ); ZH_COMP_PARAM->iVarScope = ZH_VSCOMP_PUBLIC; }
#line 4127 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 77:
#line 443 "ziher.y" /* yacc.c:1646  */
    {  zh_compRTVariableGen( ZH_COMP_PARAM, "__MVPUBLIC" );
                        ZH_COMP_PARAM->iVarScope = ZH_VSCOMP_NONE;
                        ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_WITH_RETURN;
                     }
#line 4136 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 79:
#line 447 "ziher.y" /* yacc.c:1646  */
    {  zh_compLinePushIfInside( ZH_COMP_PARAM ); ZH_COMP_PARAM->iVarScope = ZH_VSCOMP_PRIVATE; }
#line 4142 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 80:
#line 449 "ziher.y" /* yacc.c:1646  */
    {  zh_compRTVariableGen( ZH_COMP_PARAM, "__MVPRIVATE" );
                        ZH_COMP_PARAM->iVarScope = ZH_VSCOMP_NONE;
                        ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_WITH_RETURN;
                     }
#line 4151 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 87:
#line 458 "ziher.y" /* yacc.c:1646  */
    {
                  if( ZH_COMP_PARAM->szAnnounce == NULL )
                     ZH_COMP_PARAM->szAnnounce = (yyvsp[0].string);
                  else
                     zh_compGenWarning( ZH_COMP_PARAM, zh_comp_szWarnings, 'W', ZH_COMP_WARN_DUPL_ANNOUNCE, (yyvsp[0].string), NULL );
               }
#line 4162 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 90:
#line 467 "ziher.y" /* yacc.c:1646  */
    {
               if( (yyvsp[0].valChar).dealloc )
               {
                  (yyvsp[0].valChar).string = ( char * ) ZH_UNCONST( zh_compIdentifierNew( ZH_COMP_PARAM, (yyvsp[0].valChar).string, ZH_IDENT_FREE ) );
                  (yyvsp[0].valChar).dealloc = ZH_FALSE;
               }
               zh_compModuleAdd( ZH_COMP_PARAM, (yyvsp[0].valChar).string, ZH_FALSE );
            }
#line 4175 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 91:
#line 475 "ziher.y" /* yacc.c:1646  */
    {
               {
                  char szFileName[ ZH_PATH_MAX ];
                  zh_strncat( zh_strncpy( szFileName, (yyvsp[-2].valChar).string, sizeof( szFileName ) - 1 ), (yyvsp[0].valChar).string, sizeof( szFileName ) - 1 );
                  zh_compModuleAdd( ZH_COMP_PARAM, zh_compIdentifierNew( ZH_COMP_PARAM, szFileName, ZH_IDENT_COPY ), ZH_FALSE );
                  if( (yyvsp[-2].valChar).dealloc )
                  {
                     zh_xfree( (yyvsp[-2].valChar).string );
                     (yyvsp[-2].valChar).dealloc = ZH_FALSE;
                  }
                  if( (yyvsp[0].valChar).dealloc )
                  {
                     zh_xfree( (yyvsp[0].valChar).string );
                     (yyvsp[0].valChar).dealloc = ZH_FALSE;
                  }
               }
            }
#line 4197 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 92:
#line 494 "ziher.y" /* yacc.c:1646  */
    { zh_compLinePushIfInside( ZH_COMP_PARAM ); }
#line 4203 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 94:
#line 497 "ziher.y" /* yacc.c:1646  */
    { (yyval.lNumber) = 0; }
#line 4209 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 95:
#line 498 "ziher.y" /* yacc.c:1646  */
    { (yyval.lNumber) = 1; }
#line 4215 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 96:
#line 499 "ziher.y" /* yacc.c:1646  */
    { (yyval.lNumber) = 1; }
#line 4221 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 97:
#line 500 "ziher.y" /* yacc.c:1646  */
    { (yyval.lNumber) = 0; }
#line 4227 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 98:
#line 502 "ziher.y" /* yacc.c:1646  */
    { if( ZH_COMP_PARAM->ilastLineErr && ZH_COMP_PARAM->ilastLineErr == ZH_COMP_PARAM->currLine )
                             {
                                yyclearin;
                             }
                             else
                             {
                                yyerrok;
                                ZH_COMP_PARAM->ilastLineErr = ZH_COMP_PARAM->currLine;
                             }
                             (yyval.lNumber) = 0;
                           }
#line 4243 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 100:
#line 516 "ziher.y" /* yacc.c:1646  */
    { (yyval.lNumber) += (yyvsp[0].lNumber); }
#line 4249 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 101:
#line 519 "ziher.y" /* yacc.c:1646  */
    { (yyval.lNumber) = 0; }
#line 4255 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 103:
#line 523 "ziher.y" /* yacc.c:1646  */
    { zh_compExternAdd( ZH_COMP_PARAM, (yyvsp[0].string), 0 ); }
#line 4261 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 104:
#line 524 "ziher.y" /* yacc.c:1646  */
    { zh_compExternAdd( ZH_COMP_PARAM, (yyvsp[0].string), 0 ); }
#line 4267 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 105:
#line 527 "ziher.y" /* yacc.c:1646  */
    { zh_compExternAdd( ZH_COMP_PARAM, (yyvsp[0].string), ZH_FS_DEFERRED ); }
#line 4273 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 106:
#line 528 "ziher.y" /* yacc.c:1646  */
    { zh_compExternAdd( ZH_COMP_PARAM, (yyvsp[0].string), ZH_FS_DEFERRED ); }
#line 4279 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 108:
#line 532 "ziher.y" /* yacc.c:1646  */
    { (yyval.string) = "STEP"; }
#line 4285 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 109:
#line 533 "ziher.y" /* yacc.c:1646  */
    { (yyval.string) = "TO"; }
#line 4291 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 110:
#line 534 "ziher.y" /* yacc.c:1646  */
    { (yyval.string) = "LOOP"; }
#line 4297 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 111:
#line 535 "ziher.y" /* yacc.c:1646  */
    { (yyval.string) = "EXIT"; }
#line 4303 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 112:
#line 536 "ziher.y" /* yacc.c:1646  */
    { (yyval.string) = "IN"; }
#line 4309 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 113:
#line 537 "ziher.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4315 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 114:
#line 538 "ziher.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4321 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 115:
#line 539 "ziher.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4327 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 116:
#line 540 "ziher.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4333 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 117:
#line 541 "ziher.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4339 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 118:
#line 542 "ziher.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4345 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 119:
#line 543 "ziher.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4351 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 120:
#line 544 "ziher.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4357 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 121:
#line 545 "ziher.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4363 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 122:
#line 546 "ziher.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4369 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 123:
#line 547 "ziher.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4375 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 124:
#line 548 "ziher.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4381 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 125:
#line 553 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewDouble( (yyvsp[0].valDouble).dNumber, (yyvsp[0].valDouble).bWidth, (yyvsp[0].valDouble).bDec, ZH_COMP_PARAM ); }
#line 4387 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 126:
#line 554 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewLong( (yyvsp[0].valLong).lNumber, ZH_COMP_PARAM ); }
#line 4393 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 127:
#line 557 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewDate( ( long ) (yyvsp[0].valLong).lNumber, ZH_COMP_PARAM ); }
#line 4399 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 128:
#line 560 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewTimeStamp( (yyvsp[0].valTimeStamp).date, (yyvsp[0].valTimeStamp).time, ZH_COMP_PARAM ); }
#line 4405 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 129:
#line 563 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewLong( (yyvsp[-1].valLong).lNumber, ZH_COMP_PARAM ); }
#line 4411 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 130:
#line 564 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, zh_compExprNewDouble( (yyvsp[-1].valDouble).dNumber, (yyvsp[-1].valDouble).bWidth, (yyvsp[-1].valDouble).bDec, ZH_COMP_PARAM ) ); }
#line 4417 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 131:
#line 569 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewNil( ZH_COMP_PARAM ); }
#line 4423 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 133:
#line 577 "ziher.y" /* yacc.c:1646  */
    {
                                 (yyval.asExpr) = zh_compExprNewString( (yyvsp[0].valChar).string, (yyvsp[0].valChar).length, (yyvsp[0].valChar).dealloc, ZH_COMP_PARAM );
                                 (yyvsp[0].valChar).dealloc = ZH_FALSE;
                              }
#line 4432 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 136:
#line 593 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewLogical( ZH_TRUE, ZH_COMP_PARAM ); }
#line 4438 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 137:
#line 594 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewLogical( ZH_FALSE, ZH_COMP_PARAM ); }
#line 4444 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 139:
#line 602 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewSelf( ZH_COMP_PARAM ); }
#line 4450 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 141:
#line 616 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewArray( (yyvsp[-1].asExpr), ZH_COMP_PARAM ); }
#line 4456 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 143:
#line 624 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4462 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 145:
#line 630 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewHash( NULL, ZH_COMP_PARAM ); }
#line 4468 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 146:
#line 631 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewHash( (yyvsp[-1].asExpr), ZH_COMP_PARAM ); }
#line 4474 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 148:
#line 637 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprAddListExpr( zh_compExprNewList( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr) ); }
#line 4480 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 149:
#line 638 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprAddListExpr( zh_compExprAddListExpr( (yyvsp[-4].asExpr), (yyvsp[-2].asExpr) ), (yyvsp[0].asExpr) ); }
#line 4486 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 150:
#line 643 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewVar( (yyvsp[0].string), ZH_COMP_PARAM ); }
#line 4492 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 151:
#line 646 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewAlias( (yyvsp[-1].string), ZH_COMP_PARAM ); }
#line 4498 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 152:
#line 651 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewMacro( NULL, '&', (yyvsp[0].string), ZH_COMP_PARAM ); }
#line 4504 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 153:
#line 652 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewMacro( NULL, 0, (yyvsp[0].string), ZH_COMP_PARAM ); }
#line 4510 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 155:
#line 660 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewMacro( (yyvsp[0].asExpr), 0, NULL, ZH_COMP_PARAM ); }
#line 4516 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 159:
#line 674 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewAlias( "FIELD", ZH_COMP_PARAM ); }
#line 4522 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 160:
#line 675 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4528 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 161:
#line 680 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4534 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 162:
#line 681 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4540 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 163:
#line 682 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4546 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 164:
#line 683 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4552 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 165:
#line 684 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4558 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 166:
#line 685 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4564 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 167:
#line 686 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4570 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 168:
#line 687 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4576 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 169:
#line 688 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4582 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 170:
#line 689 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4588 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 171:
#line 690 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4594 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 172:
#line 691 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4600 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 173:
#line 692 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4606 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 174:
#line 693 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4612 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 175:
#line 696 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewVar( (yyvsp[0].string), ZH_COMP_PARAM ); }
#line 4618 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 177:
#line 700 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewAliasVar( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 4624 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 178:
#line 701 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewAliasVar( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 4630 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 179:
#line 702 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewAliasVar( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 4636 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 180:
#line 703 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewAliasVar( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 4642 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 181:
#line 704 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4648 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 182:
#line 705 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4654 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 183:
#line 706 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4660 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 184:
#line 707 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4666 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 185:
#line 708 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4672 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 186:
#line 709 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4678 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 187:
#line 710 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4684 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 188:
#line 711 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4690 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 189:
#line 712 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4696 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 190:
#line 713 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4702 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 191:
#line 714 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4708 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 192:
#line 715 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4714 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 193:
#line 716 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4720 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 194:
#line 717 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewAliasVar( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 4726 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 195:
#line 718 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewAliasVar( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 4732 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 196:
#line 719 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewAliasVar( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 4738 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 197:
#line 728 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewAliasExpr( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 4744 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 198:
#line 729 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewAliasExpr( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 4750 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 199:
#line 730 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewAliasExpr( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 4756 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 200:
#line 731 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewAliasExpr( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 4762 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 201:
#line 732 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewAliasExpr( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 4768 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 202:
#line 733 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = zh_compErrorAlias( ZH_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4774 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 203:
#line 738 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4780 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 204:
#line 739 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4786 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 205:
#line 740 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4792 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 206:
#line 741 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4798 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 207:
#line 742 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4804 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 208:
#line 743 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4810 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 209:
#line 744 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4816 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 210:
#line 745 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4822 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 211:
#line 746 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4828 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 212:
#line 747 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4834 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 213:
#line 748 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4840 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 214:
#line 749 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4846 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 215:
#line 750 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4852 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 216:
#line 751 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4858 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 217:
#line 752 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4864 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 218:
#line 753 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4870 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 219:
#line 754 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4876 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 220:
#line 755 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4882 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 222:
#line 762 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewFunCall( zh_compExprNewFunName( (yyvsp[-3].string), ZH_COMP_PARAM ), (yyvsp[-1].asExpr), ZH_COMP_PARAM ); }
#line 4888 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 224:
#line 766 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewFunCall( (yyvsp[-3].asExpr), (yyvsp[-1].asExpr), ZH_COMP_PARAM ); }
#line 4894 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 225:
#line 770 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compCheckPassByRef( ZH_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4900 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 227:
#line 776 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewArgList( (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 4906 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 228:
#line 777 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprAddListExpr( (yyvsp[-2].asExpr), (yyvsp[0].asExpr) ); }
#line 4912 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 231:
#line 784 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compCheckPassByRef( ZH_COMP_PARAM, zh_compExprNewVarRef( (yyvsp[0].string), ZH_COMP_PARAM ) ); }
#line 4918 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 232:
#line 785 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compCheckPassByRef( ZH_COMP_PARAM, zh_compExprNewRef( (yyvsp[0].asExpr), ZH_COMP_PARAM ) ); }
#line 4924 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 233:
#line 786 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compCheckPassByRef( ZH_COMP_PARAM, zh_compExprNewRef( (yyvsp[0].asExpr), ZH_COMP_PARAM ) ); }
#line 4930 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 234:
#line 787 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compCheckPassByRef( ZH_COMP_PARAM, zh_compExprNewRef( (yyvsp[0].asExpr), ZH_COMP_PARAM ) ); }
#line 4936 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 235:
#line 788 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compCheckPassByRef( ZH_COMP_PARAM, (yyvsp[0].asExpr) ); (yyval.asExpr)->value.asList.reference = ZH_TRUE; }
#line 4942 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 236:
#line 791 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewArgRef( ZH_COMP_PARAM ); }
#line 4948 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 238:
#line 797 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compCheckMethod( ZH_COMP_PARAM, zh_compExprNewMethodObject( (yyvsp[0].asExpr), (yyvsp[-2].asExpr) ) ); }
#line 4954 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 239:
#line 798 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewMethodObject( (yyvsp[0].asExpr), (yyvsp[-2].asExpr) ); }
#line 4960 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 240:
#line 799 "ziher.y" /* yacc.c:1646  */
    {  if( ZH_COMP_PARAM->functions.pLast->wWithObjectCnt == 0 )
                                                zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_WITHOBJECT, NULL, NULL );
                                             (yyval.asExpr) = (yyvsp[0].asExpr);
                                          }
#line 4969 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 241:
#line 805 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewSend( (yyvsp[0].string), ZH_COMP_PARAM ); }
#line 4975 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 242:
#line 806 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewMacroSend( (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 4981 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 243:
#line 809 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewVarRef( (yyvsp[-1].string), ZH_COMP_PARAM ); }
#line 4987 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 245:
#line 817 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewMethodCall( (yyvsp[-3].asExpr), (yyvsp[-1].asExpr) ); }
#line 4993 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 255:
#line 837 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-1].asExpr); }
#line 4999 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 265:
#line 847 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-1].asExpr); }
#line 5005 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 268:
#line 850 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-1].asExpr); }
#line 5011 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 270:
#line 852 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-1].asExpr); }
#line 5017 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 282:
#line 866 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-1].asExpr); }
#line 5023 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 283:
#line 867 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-1].asExpr); }
#line 5029 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 285:
#line 871 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewArgRef( ZH_COMP_PARAM ); }
#line 5035 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 287:
#line 875 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewEmpty( ZH_COMP_PARAM ); }
#line 5041 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 289:
#line 879 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewVar( (yyvsp[0].string), ZH_COMP_PARAM ); }
#line 5047 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 295:
#line 885 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprListStrip( (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5053 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 317:
#line 918 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewPostInc( (yyvsp[-1].asExpr), ZH_COMP_PARAM ); }
#line 5059 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 318:
#line 919 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewPostDec( (yyvsp[-1].asExpr), ZH_COMP_PARAM ); }
#line 5065 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 319:
#line 922 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 5071 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 320:
#line 925 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewPreInc( (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5077 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 321:
#line 926 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewPreDec( (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5083 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 322:
#line 929 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewNot( (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5089 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 323:
#line 930 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewNegate( (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5095 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 324:
#line 931 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 5101 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 325:
#line 934 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprAssign( (yyvsp[-2].asExpr), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5107 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 326:
#line 937 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprAssign( (yyvsp[-2].asExpr), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5113 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 327:
#line 940 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewPlusEq( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5119 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 328:
#line 943 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewMinusEq( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5125 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 329:
#line 946 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewMultEq( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5131 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 330:
#line 949 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewDivEq( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5137 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 331:
#line 952 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewModEq( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5143 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 332:
#line 955 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewExpEq( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5149 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 339:
#line 966 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewPlus( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5155 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 340:
#line 967 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewMinus( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5161 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 341:
#line 968 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewMult( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5167 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 342:
#line 969 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewDiv( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5173 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 343:
#line 970 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewMod( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5179 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 344:
#line 971 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewPower( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5185 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 345:
#line 974 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewAnd( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5191 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 346:
#line 975 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewOr( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5197 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 347:
#line 978 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewEQ( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5203 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 348:
#line 979 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewLT( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5209 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 349:
#line 980 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewGT( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5215 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 350:
#line 981 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewLE( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5221 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 351:
#line 982 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewGE( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5227 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 352:
#line 983 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewNE( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5233 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 353:
#line 984 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewNE( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5239 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 354:
#line 985 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewIN( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5245 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 355:
#line 986 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprSetOperand( zh_compExprNewEqual( (yyvsp[-2].asExpr), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5251 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 357:
#line 995 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewArrayAt( (yyvsp[-2].asExpr), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5257 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 358:
#line 996 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewArrayAt( (yyvsp[-2].asExpr), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5263 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 359:
#line 997 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewArrayAt( (yyvsp[-3].asExpr), (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5269 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 360:
#line 1000 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewList( (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5275 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 361:
#line 1001 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprAddListExpr( (yyvsp[-2].asExpr), (yyvsp[0].asExpr) ); }
#line 5281 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 362:
#line 1004 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewCodeBlock( (yyvsp[0].asCodeblock).string, (yyvsp[0].asCodeblock).length, (yyvsp[0].asCodeblock).flags, ZH_COMP_PARAM ); (yyvsp[0].asCodeblock).string = NULL; }
#line 5287 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 363:
#line 1005 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-2].asExpr); }
#line 5293 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 364:
#line 1010 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = NULL; }
#line 5299 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 365:
#line 1011 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = NULL; (yyvsp[-1].asExpr)->value.asCodeblock.flags |= ZH_BLOCK_VPARAMS; }
#line 5305 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 366:
#line 1012 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr);   }
#line 5311 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 367:
#line 1013 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-2].asExpr);   (yyvsp[-3].asExpr)->value.asCodeblock.flags |= ZH_BLOCK_VPARAMS; }
#line 5317 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 368:
#line 1016 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->iVarScope = ZH_VSCOMP_LOCAL; (yyval.asExpr) = zh_compExprCBVarAdd( (yyvsp[-2].asExpr), (yyvsp[-1].string), (yyvsp[0].asVarType)->cVarType, ZH_COMP_PARAM ); }
#line 5323 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 369:
#line 1017 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->iVarScope = ZH_VSCOMP_LOCAL; (yyval.asExpr) = zh_compExprCBVarAdd( (yyvsp[-4].asExpr), (yyvsp[-1].string), (yyvsp[0].asVarType)->cVarType, ZH_COMP_PARAM ); }
#line 5329 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 370:
#line 1020 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprAddCodeblockExpr( (yyvsp[(-1) - (1)].asExpr), (yyvsp[0].asExpr) ); }
#line 5335 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 371:
#line 1021 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprAddCodeblockExpr( (yyvsp[(-1) - (3)].asExpr), (yyvsp[0].asExpr) ); }
#line 5341 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 372:
#line 1025 "ziher.y" /* yacc.c:1646  */
    { (yyval.bTrue) = ZH_COMP_PARAM->functions.pLast->bBlock;
                ZH_COMP_PARAM->functions.pLast->bBlock = ZH_TRUE; }
#line 5348 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 373:
#line 1028 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->functions.pLast->bBlock = (yyvsp[-1].bTrue); }
#line 5354 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 375:
#line 1031 "ziher.y" /* yacc.c:1646  */
    {  /* 3 */
               PZH_CBVAR pVar;
               (yyval.sNumber) = ZH_COMP_PARAM->functions.pLast->nPCodePos;
               (yyvsp[0].sNumber) = ZH_COMP_PARAM->lastLine;
               zh_compCodeBlockStart( ZH_COMP_PARAM, 0 );
               ZH_COMP_PARAM->functions.pLast->funFlags |= ZH_FUNF_EXTBLOCK;
               ZH_COMP_PARAM->functions.pLast->fVParams =
                  ( (yyvsp[-1].asExpr)->value.asCodeblock.flags & ZH_BLOCK_VPARAMS ) != 0;

               (yyvsp[-1].asExpr)->value.asCodeblock.flags |= ZH_BLOCK_EXT;
               if( (yyvsp[-1].asExpr)->value.asCodeblock.string )
               {
                  zh_xfree( (yyvsp[-1].asExpr)->value.asCodeblock.string );
                  (yyvsp[-1].asExpr)->value.asCodeblock.string = NULL;
                  (yyvsp[-1].asExpr)->nLength = 0;
               }

               ZH_COMP_PARAM->iVarScope = ZH_VSCOMP_PARAMETER;
               pVar = (yyvsp[-1].asExpr)->value.asCodeblock.pLocals;
               while( pVar )
               {
                  zh_compVariableAdd( ZH_COMP_PARAM, pVar->szName, zh_compVarTypeNew( ZH_COMP_PARAM, pVar->bType, NULL ) );
                  pVar =pVar->pNext;
               }
            }
#line 5384 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 376:
#line 1057 "ziher.y" /* yacc.c:1646  */
    {  /* 6 */
               /* protection against nested function/procedure inside extended block */
               if( ZH_COMP_PARAM->iErrorCount == 0 ||
                   ZH_COMP_PARAM->functions.pLast->funFlags & ZH_FUNF_EXTBLOCK )
               {
                  zh_compCodeBlockEnd( ZH_COMP_PARAM );
                  (yyval.asExpr) = zh_compExprSetCodeblockBody( (yyvsp[-4].asExpr),
                          ZH_COMP_PARAM->functions.pLast->pCode + (yyvsp[-2].sNumber),
                          ZH_COMP_PARAM->functions.pLast->nPCodePos - (yyvsp[-2].sNumber) );
                  ZH_COMP_PARAM->functions.pLast->nPCodePos = (yyvsp[-2].sNumber);
                  ZH_COMP_PARAM->lastLine = (yyvsp[-3].sNumber);
               }
            }
#line 5402 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 378:
#line 1073 "ziher.y" /* yacc.c:1646  */
    { zh_compErrUnclosed( ZH_COMP_PARAM, "{||...}*" ); }
#line 5408 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 379:
#line 1077 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewList( (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5414 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 380:
#line 1078 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprAddListExpr( (yyvsp[-2].asExpr), (yyvsp[0].asExpr) ); }
#line 5420 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 381:
#line 1080 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-1].asExpr); }
#line 5426 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 383:
#line 1093 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewIIF( zh_compExprAddListExpr( zh_compExprAddListExpr( zh_compExprNewList( (yyvsp[-5].asExpr), ZH_COMP_PARAM ), (yyvsp[-3].asExpr) ), (yyvsp[-1].asExpr) ) ); }
#line 5432 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 385:
#line 1099 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->iVarScope = ZH_VSCOMP_LOCAL; zh_compLinePush( ZH_COMP_PARAM ); }
#line 5438 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 387:
#line 1101 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->iVarScope = ZH_VSCOMP_STATIC; zh_compLinePush( ZH_COMP_PARAM ); }
#line 5444 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 389:
#line 1103 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->iVarScope = ZH_VSCOMP_TH_STATIC; zh_compLinePush( ZH_COMP_PARAM ); }
#line 5450 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 391:
#line 1105 "ziher.y" /* yacc.c:1646  */
    { if( ZH_COMP_PARAM->functions.pLast->funFlags & ZH_FUNF_USES_LOCAL_PARAMS )
                           zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_PARAMETERS_NOT_ALLOWED, NULL, NULL );
                        else
                        {
                           ZH_COMP_PARAM->functions.pLast->wParamNum = 0;
                           ZH_COMP_PARAM->iVarScope = ( ZH_VSCOMP_PRIVATE | ZH_VSCOMP_PARAMETER );
                        }
                      }
#line 5463 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 392:
#line 1112 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->iVarScope = ZH_VSCOMP_NONE; }
#line 5469 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 393:
#line 1115 "ziher.y" /* yacc.c:1646  */
    { (yyval.iNumber) = 1; }
#line 5475 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 394:
#line 1116 "ziher.y" /* yacc.c:1646  */
    { (yyval.iNumber)++; }
#line 5481 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 395:
#line 1119 "ziher.y" /* yacc.c:1646  */
    { (yyval.iNumber) = 1; }
#line 5487 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 396:
#line 1120 "ziher.y" /* yacc.c:1646  */
    { (yyval.iNumber)++; }
#line 5493 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 398:
#line 1130 "ziher.y" /* yacc.c:1646  */
    { zh_compRTVariableAdd( ZH_COMP_PARAM, zh_compExprNewRTVar( NULL, (yyvsp[-1].asExpr), ZH_COMP_PARAM ), ZH_FALSE ); }
#line 5499 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 399:
#line 1132 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( zh_compExprGenPush( (yyvsp[0].asExpr), ZH_COMP_PARAM ) );
                 zh_compRTVariableAdd( ZH_COMP_PARAM, zh_compExprNewRTVar( NULL, (yyvsp[-3].asExpr), ZH_COMP_PARAM ), ZH_TRUE );
               }
#line 5507 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 400:
#line 1136 "ziher.y" /* yacc.c:1646  */
    {
                  ZH_COMP_EXPR_FREE( zh_compArrayDimPush( (yyvsp[-1].asExpr), ZH_COMP_PARAM ) );
                  zh_compRTVariableAdd( ZH_COMP_PARAM, zh_compExprNewRTVar( NULL, (yyvsp[-2].asExpr), ZH_COMP_PARAM ), ZH_TRUE );
               }
#line 5516 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 401:
#line 1143 "ziher.y" /* yacc.c:1646  */
    {
                  zh_compVariableAdd( ZH_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) );
                  if( ZH_COMP_PARAM->iVarScope & ZH_VSCOMP_STATIC )
                  {
                     zh_compStaticDefStart( ZH_COMP_PARAM );   /* switch to statics pcode buffer */
                     zh_compStaticDefEnd( ZH_COMP_PARAM, (yyvsp[-1].string) );
                  }
                  else if( ZH_COMP_PARAM->iVarScope == ZH_VSCOMP_PUBLIC || ZH_COMP_PARAM->iVarScope == ZH_VSCOMP_PRIVATE )
                  {
                     zh_compRTVariableAdd( ZH_COMP_PARAM, zh_compExprNewRTVar( (yyvsp[-1].string), NULL, ZH_COMP_PARAM ), ZH_FALSE );
                  }
                  else if( ZH_COMP_PARAM->iVarScope == ZH_VSCOMP_LOCAL &&
                           ( ZH_COMP_PARAM->functions.pLast->funFlags & ZH_FUNF_EXTBLOCK ) )
                  {
                     ZH_COMP_EXPR_FREE( zh_compExprGenPush( zh_compExprNewNil( ZH_COMP_PARAM ), ZH_COMP_PARAM ) );
                  }
               }
#line 5538 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 402:
#line 1160 "ziher.y" /* yacc.c:1646  */
    { (yyval.iNumber) = ZH_COMP_PARAM->iVarScope;
                                zh_compVariableAdd( ZH_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) );
                              }
#line 5546 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 403:
#line 1164 "ziher.y" /* yacc.c:1646  */
    {
                  ZH_COMP_PARAM->iVarScope = (yyvsp[-2].iNumber);
                  if( ZH_COMP_PARAM->iVarScope & ZH_VSCOMP_STATIC )
                  {
                     zh_compStaticDefStart( ZH_COMP_PARAM );   /* switch to statics pcode buffer */
                     ZH_COMP_EXPR_FREE( zh_compExprGenStatement( zh_compExprAssignStatic( zh_compExprNewVar( (yyvsp[-4].string), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ), ZH_COMP_PARAM ) );
                     zh_compStaticDefEnd( ZH_COMP_PARAM, (yyvsp[-4].string) );
                  }
                  else if( ZH_COMP_PARAM->iVarScope == ZH_VSCOMP_PUBLIC || ZH_COMP_PARAM->iVarScope == ZH_VSCOMP_PRIVATE )
                  {
                     ZH_COMP_EXPR_FREE( zh_compExprGenPush( (yyvsp[0].asExpr), ZH_COMP_PARAM ) );
                     zh_compRTVariableAdd( ZH_COMP_PARAM, zh_compExprNewRTVar( (yyvsp[-4].string), NULL, ZH_COMP_PARAM ), ZH_TRUE );
                  }
                  else if( ZH_COMP_PARAM->iVarScope == ZH_VSCOMP_LOCAL &&
                           ( ZH_COMP_PARAM->functions.pLast->funFlags & ZH_FUNF_EXTBLOCK ) )
                  {
                     ZH_COMP_EXPR_FREE( zh_compExprGenPush( (yyvsp[0].asExpr), ZH_COMP_PARAM ) );
                  }
                  else
                  {
                     ZH_COMP_EXPR_FREE( zh_compExprGenStatement( zh_compExprAssign( zh_compExprNewVar( (yyvsp[-4].string), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM ), ZH_COMP_PARAM ) );
                  }
                  ZH_COMP_PARAM->iVarScope = (yyvsp[-2].iNumber);
               }
#line 5575 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 404:
#line 1189 "ziher.y" /* yacc.c:1646  */
    { zh_compVariableDim( (yyvsp[-2].string), (yyvsp[-1].asExpr), ZH_COMP_PARAM ); }
#line 5581 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 406:
#line 1198 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewArgList( (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 5587 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 407:
#line 1199 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprAddListExpr( (yyvsp[-2].asExpr), (yyvsp[0].asExpr) ); }
#line 5593 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 408:
#line 1200 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprAddListExpr( (yyvsp[-3].asExpr), (yyvsp[0].asExpr) ); }
#line 5599 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 409:
#line 1203 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->iVarScope = ZH_VSCOMP_FIELD; }
#line 5605 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 410:
#line 1205 "ziher.y" /* yacc.c:1646  */
    {
               if( (yyvsp[-1].string) ) zh_compFieldSetAlias( ZH_COMP_PARAM, (yyvsp[-1].string), (yyvsp[-2].iNumber) );
             }
#line 5613 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 411:
#line 1210 "ziher.y" /* yacc.c:1646  */
    { (yyval.iNumber) = zh_compFieldsCount( ZH_COMP_PARAM ); zh_compVariableAdd( ZH_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); }
#line 5619 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 412:
#line 1211 "ziher.y" /* yacc.c:1646  */
    { zh_compVariableAdd( ZH_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); }
#line 5625 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 413:
#line 1214 "ziher.y" /* yacc.c:1646  */
    { (yyval.string) = NULL; }
#line 5631 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 414:
#line 1215 "ziher.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 5637 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 415:
#line 1218 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->iVarScope = ZH_VSCOMP_MEMVAR; }
#line 5643 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 417:
#line 1221 "ziher.y" /* yacc.c:1646  */
    { zh_compVariableAdd( ZH_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); }
#line 5649 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 418:
#line 1222 "ziher.y" /* yacc.c:1646  */
    { zh_compVariableAdd( ZH_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); }
#line 5655 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 419:
#line 1225 "ziher.y" /* yacc.c:1646  */
    { zh_compDeclaredAdd( ZH_COMP_PARAM, (yyvsp[-1].string) ); ZH_COMP_PARAM->szDeclaredFun = (yyvsp[-1].string); }
#line 5661 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 420:
#line 1226 "ziher.y" /* yacc.c:1646  */
    {
               if( ZH_COMP_PARAM->pLastDeclared )
               {
                 ZH_COMP_PARAM->pLastDeclared->cType = (yyvsp[-1].asVarType)->cVarType;

                 if( ZH_TOUPPER( (yyvsp[-1].asVarType)->cVarType ) == 'S' )
                 {
                   ZH_COMP_PARAM->pLastDeclared->pClass = zh_compClassFind( ZH_COMP_PARAM, (yyvsp[-1].asVarType)->szFromClass );
                   if( ! ZH_COMP_PARAM->pLastDeclared->pClass )
                   {
                     zh_compGenWarning( ZH_COMP_PARAM, zh_comp_szWarnings, 'W', ZH_COMP_WARN_CLASS_NOT_FOUND, (yyvsp[-1].asVarType)->szFromClass, ZH_COMP_PARAM->pLastDeclared->szName );
                     ZH_COMP_PARAM->pLastDeclared->cType = ( ZH_ISUPPER( ( ZH_UCHAR ) (yyvsp[-1].asVarType)->cVarType ) ? 'O' : 'o' );
                   }
                 }
               }
               ZH_COMP_PARAM->szDeclaredFun = NULL;
               ZH_COMP_PARAM->iVarScope = ZH_VSCOMP_NONE;
             }
#line 5684 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 421:
#line 1244 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->pLastClass = zh_compClassAdd( ZH_COMP_PARAM, (yyvsp[0].string), NULL ); }
#line 5690 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 422:
#line 1244 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->iVarScope = ZH_VSCOMP_NONE; }
#line 5696 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 423:
#line 1245 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->pLastClass = zh_compClassAdd( ZH_COMP_PARAM, (yyvsp[-1].string), NULL ); ZH_COMP_PARAM->iVarScope = ZH_VSCOMP_NONE; }
#line 5702 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 424:
#line 1246 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->pLastClass = zh_compClassAdd( ZH_COMP_PARAM, (yyvsp[-2].string), (yyvsp[-1].string) ); ZH_COMP_PARAM->iVarScope = ZH_VSCOMP_NONE; }
#line 5708 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 425:
#line 1247 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->iVarScope = ZH_VSCOMP_NONE; }
#line 5714 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 426:
#line 1248 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->cDataListType = (yyvsp[0].asVarType)->cVarType; }
#line 5720 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 427:
#line 1248 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->cDataListType = 0; ZH_COMP_PARAM->iVarScope = ZH_VSCOMP_NONE; }
#line 5726 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 434:
#line 1261 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->pLastMethod = zh_compMethodAdd( ZH_COMP_PARAM, ZH_COMP_PARAM->pLastClass, (yyvsp[-1].string) ); }
#line 5732 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 435:
#line 1262 "ziher.y" /* yacc.c:1646  */
    {
               if( ZH_COMP_PARAM->pLastMethod )
               {
                 ZH_COMP_PARAM->pLastMethod->cType = (yyvsp[0].asVarType)->cVarType;
                 if( ZH_TOUPPER( (yyvsp[0].asVarType)->cVarType ) == 'S' )
                 {
                   ZH_COMP_PARAM->pLastMethod->pClass = zh_compClassFind( ZH_COMP_PARAM, (yyvsp[0].asVarType)->szFromClass );
                   if( ! ZH_COMP_PARAM->pLastMethod->pClass )
                   {
                     zh_compGenWarning( ZH_COMP_PARAM, zh_comp_szWarnings, 'W', ZH_COMP_WARN_CLASS_NOT_FOUND, (yyvsp[0].asVarType)->szFromClass, ZH_COMP_PARAM->pLastMethod->szName );
                     ZH_COMP_PARAM->pLastMethod->cType = ( ZH_ISUPPER( ( ZH_UCHAR ) (yyvsp[0].asVarType)->cVarType ) ? 'O' : 'o' );
                   }
                 }
               }
               ZH_COMP_PARAM->pLastMethod = NULL;
             }
#line 5753 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 436:
#line 1280 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->pLastMethod = zh_compMethodAdd( ZH_COMP_PARAM, ZH_COMP_PARAM->pLastClass, (yyvsp[0].string) ); }
#line 5759 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 437:
#line 1281 "ziher.y" /* yacc.c:1646  */
    {
               if( ZH_COMP_PARAM->pLastMethod )
               {
                  PZH_HCLASS pClass;
                  char       szSetData[ ZH_SYMBOL_NAME_LEN + 1 ];
                  int        iLen;
                  ZH_BYTE    cVarType = (yyvsp[0].asVarType)->cVarType;

                  /* List Type overrides if exists. */
                  if( ZH_COMP_PARAM->cDataListType )
                     cVarType = ZH_COMP_PARAM->cDataListType;

                  ZH_COMP_PARAM->pLastMethod->cType = cVarType;
                  if( ZH_TOUPPER( cVarType ) == 'S' )
                  {
                     pClass = zh_compClassFind( ZH_COMP_PARAM, (yyvsp[0].asVarType)->szFromClass );
                     ZH_COMP_PARAM->pLastMethod->pClass = pClass;
                     if( ! ZH_COMP_PARAM->pLastMethod->pClass )
                     {
                        zh_compGenWarning( ZH_COMP_PARAM, zh_comp_szWarnings, 'W', ZH_COMP_WARN_CLASS_NOT_FOUND, (yyvsp[0].asVarType)->szFromClass, ZH_COMP_PARAM->pLastMethod->szName );
                        ZH_COMP_PARAM->pLastMethod->cType = ( ZH_ISUPPER( ( ZH_UCHAR ) cVarType ) ? 'O' :'o' );
                     }
                  }
                  else
                     pClass = NULL;

                  iLen = ( int ) strlen( (yyvsp[-2].string) );
                  if( iLen >= ZH_SYMBOL_NAME_LEN )
                     iLen = ZH_SYMBOL_NAME_LEN - 1;
                  szSetData[ 0 ] = '_';
                  memcpy( szSetData + 1, (yyvsp[-2].string), iLen );
                  szSetData[ iLen + 1 ] = '\0';

                  ZH_COMP_PARAM->pLastMethod = zh_compMethodAdd( ZH_COMP_PARAM, ZH_COMP_PARAM->pLastClass,
                     zh_compIdentifierNew( ZH_COMP_PARAM, szSetData, ZH_IDENT_COPY ) );
                  ZH_COMP_PARAM->pLastMethod->cType = cVarType;
                  ZH_COMP_PARAM->pLastMethod->iParamCount = 1;

                  ZH_COMP_PARAM->pLastMethod->cParamTypes = ( ZH_BYTE * ) zh_xgrab( 1 );
                  ZH_COMP_PARAM->pLastMethod->pParamClasses = ( PZH_HCLASS * ) zh_xgrab( sizeof( ZH_HCLASS ) );

                  ZH_COMP_PARAM->pLastMethod->cParamTypes[ 0 ] = cVarType;
                  ZH_COMP_PARAM->pLastMethod->pParamClasses[ 0 ] = pClass;

                  if( ZH_TOUPPER( cVarType ) == 'S' )
                  {
                     ZH_COMP_PARAM->pLastMethod->pClass = pClass;
                  }
               }

               ZH_COMP_PARAM->pLastMethod = NULL;
             }
#line 5816 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 451:
#line 1354 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); }
#line 5822 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 452:
#line 1357 "ziher.y" /* yacc.c:1646  */
    { zh_compDeclaredParameterAdd( ZH_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); }
#line 5828 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 453:
#line 1358 "ziher.y" /* yacc.c:1646  */
    { zh_compDeclaredParameterAdd( ZH_COMP_PARAM, (yyvsp[-1].string), zh_compVarTypeNew( ZH_COMP_PARAM, (yyvsp[0].asVarType)->cVarType + ZH_VT_OFFSET_BYREF, NULL ) ); }
#line 5834 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 454:
#line 1359 "ziher.y" /* yacc.c:1646  */
    { zh_compDeclaredParameterAdd( ZH_COMP_PARAM, (yyvsp[-3].string), zh_compVarTypeNew( ZH_COMP_PARAM, 'F', NULL ) ); }
#line 5840 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 455:
#line 1360 "ziher.y" /* yacc.c:1646  */
    { zh_compDeclaredParameterAdd( ZH_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); }
#line 5846 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 456:
#line 1361 "ziher.y" /* yacc.c:1646  */
    { zh_compDeclaredParameterAdd( ZH_COMP_PARAM, (yyvsp[-1].string), zh_compVarTypeNew( ZH_COMP_PARAM, (yyvsp[0].asVarType)->cVarType + ZH_VT_OFFSET_BYREF, NULL ) ); }
#line 5852 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 457:
#line 1362 "ziher.y" /* yacc.c:1646  */
    { zh_compDeclaredParameterAdd( ZH_COMP_PARAM, (yyvsp[-3].string), zh_compVarTypeNew( ZH_COMP_PARAM, 'F', NULL ) ); }
#line 5858 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 458:
#line 1365 "ziher.y" /* yacc.c:1646  */
    { zh_compDeclaredParameterAdd( ZH_COMP_PARAM, (yyvsp[-1].string), zh_compVarTypeNew( ZH_COMP_PARAM, (yyvsp[0].asVarType)->cVarType + ZH_VT_OFFSET_OPTIONAL, NULL ) ); }
#line 5864 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 459:
#line 1366 "ziher.y" /* yacc.c:1646  */
    { zh_compDeclaredParameterAdd( ZH_COMP_PARAM, (yyvsp[-1].string), zh_compVarTypeNew( ZH_COMP_PARAM, (yyvsp[0].asVarType)->cVarType + ZH_VT_OFFSET_OPTIONAL + ZH_VT_OFFSET_BYREF, NULL ) ); }
#line 5870 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 460:
#line 1367 "ziher.y" /* yacc.c:1646  */
    { zh_compDeclaredParameterAdd( ZH_COMP_PARAM, (yyvsp[-3].string), zh_compVarTypeNew( ZH_COMP_PARAM, 'F' + ZH_VT_OFFSET_OPTIONAL + ZH_VT_OFFSET_BYREF, NULL ) ); }
#line 5876 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 461:
#line 1368 "ziher.y" /* yacc.c:1646  */
    { zh_compDeclaredParameterAdd( ZH_COMP_PARAM, (yyvsp[-1].string), zh_compVarTypeNew( ZH_COMP_PARAM, (yyvsp[0].asVarType)->cVarType + ZH_VT_OFFSET_OPTIONAL, NULL ) ); }
#line 5882 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 462:
#line 1369 "ziher.y" /* yacc.c:1646  */
    { zh_compDeclaredParameterAdd( ZH_COMP_PARAM, (yyvsp[-1].string), zh_compVarTypeNew( ZH_COMP_PARAM, (yyvsp[0].asVarType)->cVarType + ZH_VT_OFFSET_OPTIONAL + ZH_VT_OFFSET_BYREF, NULL ) ); }
#line 5888 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 463:
#line 1370 "ziher.y" /* yacc.c:1646  */
    { zh_compDeclaredParameterAdd( ZH_COMP_PARAM, (yyvsp[-3].string), zh_compVarTypeNew( ZH_COMP_PARAM, 'F' + ZH_VT_OFFSET_OPTIONAL + ZH_VT_OFFSET_BYREF, NULL ) ); }
#line 5894 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 472:
#line 1383 "ziher.y" /* yacc.c:1646  */
    { zh_compErrStru( ZH_COMP_PARAM, ZH_COMP_ERR_NEXTFOR ); }
#line 5900 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 473:
#line 1386 "ziher.y" /* yacc.c:1646  */
    { zh_compErrStru( ZH_COMP_PARAM, ZH_COMP_ERR_ENDCASE ); }
#line 5906 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 474:
#line 1389 "ziher.y" /* yacc.c:1646  */
    { zh_compErrStru( ZH_COMP_PARAM, ZH_COMP_ERR_ENDIF ); }
#line 5912 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 475:
#line 1392 "ziher.y" /* yacc.c:1646  */
    { zh_compErrStru( ZH_COMP_PARAM, ZH_COMP_ERR_ENDWITH ); }
#line 5918 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 476:
#line 1395 "ziher.y" /* yacc.c:1646  */
    { zh_compErrStru( ZH_COMP_PARAM, ZH_COMP_ERR_ENDSEQ ); }
#line 5924 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 477:
#line 1398 "ziher.y" /* yacc.c:1646  */
    { zh_compErrStru( ZH_COMP_PARAM, ZH_COMP_ERR_ENDDO ); }
#line 5930 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 478:
#line 1401 "ziher.y" /* yacc.c:1646  */
    { zh_compErrStru( ZH_COMP_PARAM, ZH_COMP_ERR_ENDSWITCH ); }
#line 5936 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 479:
#line 1404 "ziher.y" /* yacc.c:1646  */
    { zh_compGenJumpHere( (yyvsp[-1].sNumber), ZH_COMP_PARAM ); }
#line 5942 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 480:
#line 1405 "ziher.y" /* yacc.c:1646  */
    { zh_compGenJumpHere( (yyvsp[-2].sNumber), ZH_COMP_PARAM ); }
#line 5948 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 481:
#line 1406 "ziher.y" /* yacc.c:1646  */
    { zh_compGenJumpHere( (yyvsp[-2].sNumber), ZH_COMP_PARAM ); zh_compElseIfFix( ZH_COMP_PARAM, (yyvsp[-1].pVoid) ); }
#line 5954 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 482:
#line 1407 "ziher.y" /* yacc.c:1646  */
    { zh_compGenJumpHere( (yyvsp[-3].sNumber), ZH_COMP_PARAM ); zh_compElseIfFix( ZH_COMP_PARAM, (yyvsp[-2].pVoid) ); }
#line 5960 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 483:
#line 1411 "ziher.y" /* yacc.c:1646  */
    { ++ZH_COMP_PARAM->functions.pLast->wIfCounter; zh_compLinePushIfInside( ZH_COMP_PARAM ); }
#line 5966 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 484:
#line 1413 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( zh_compExprGenPush( (yyvsp[-2].asExpr), ZH_COMP_PARAM ) ); (yyval.sNumber) = zh_compGenJumpFalse( 0, ZH_COMP_PARAM ); }
#line 5972 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 485:
#line 1415 "ziher.y" /* yacc.c:1646  */
    { (yyval.sNumber) = zh_compGenJump( 0, ZH_COMP_PARAM ); zh_compGenJumpHere( (yyvsp[-1].sNumber), ZH_COMP_PARAM ); }
#line 5978 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 486:
#line 1418 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_BREAK_CODE; }
#line 5984 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 488:
#line 1422 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_BREAK_CODE; zh_compLinePush( ZH_COMP_PARAM ); }
#line 5990 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 489:
#line 1424 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( zh_compExprGenPush( (yyvsp[-1].asExpr), ZH_COMP_PARAM ) );
                  (yyval.sNumber) = zh_compGenJumpFalse( 0, ZH_COMP_PARAM );
               }
#line 5998 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 490:
#line 1428 "ziher.y" /* yacc.c:1646  */
    { (yyval.pVoid) = zh_compElseIfGen( ZH_COMP_PARAM, NULL, zh_compGenJump( 0, ZH_COMP_PARAM ) );
                  zh_compGenJumpHere( (yyvsp[-1].sNumber), ZH_COMP_PARAM );
               }
#line 6006 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 491:
#line 1432 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_BREAK_CODE; zh_compLinePush( ZH_COMP_PARAM ); }
#line 6012 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 492:
#line 1434 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_EXPR_FREE( zh_compExprGenPush( (yyvsp[-1].asExpr), ZH_COMP_PARAM ) );
                  (yyval.sNumber) = zh_compGenJumpFalse( 0, ZH_COMP_PARAM );
               }
#line 6020 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 493:
#line 1438 "ziher.y" /* yacc.c:1646  */
    { (yyval.pVoid) = zh_compElseIfGen( ZH_COMP_PARAM, (yyvsp[-6].pVoid), zh_compGenJump( 0, ZH_COMP_PARAM ) );
                  zh_compGenJumpHere( (yyvsp[-1].sNumber), ZH_COMP_PARAM );
               }
#line 6028 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 494:
#line 1444 "ziher.y" /* yacc.c:1646  */
    {
                  if( ZH_COMP_PARAM->functions.pLast->wIfCounter )
                     --ZH_COMP_PARAM->functions.pLast->wIfCounter;
                  ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ( ZH_FUNF_WITH_RETURN | ZH_FUNF_BREAK_CODE );
               }
#line 6038 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 497:
#line 1453 "ziher.y" /* yacc.c:1646  */
    { zh_compErrUnclosed( ZH_COMP_PARAM, "IF*" ); }
#line 6044 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 504:
#line 1464 "ziher.y" /* yacc.c:1646  */
    { zh_compElseIfFix( ZH_COMP_PARAM, (yyvsp[-1].pVoid) ); }
#line 6050 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 507:
#line 1476 "ziher.y" /* yacc.c:1646  */
    { zh_compElseIfFix( ZH_COMP_PARAM, (yyvsp[-2].pVoid) ); }
#line 6056 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 508:
#line 1480 "ziher.y" /* yacc.c:1646  */
    {  if( ZH_COMP_PARAM->functions.pLast->wCaseCounter )
                     --ZH_COMP_PARAM->functions.pLast->wCaseCounter;
                  ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ( ZH_FUNF_WITH_RETURN | ZH_FUNF_BREAK_CODE );
               }
#line 6065 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 511:
#line 1488 "ziher.y" /* yacc.c:1646  */
    { zh_compErrUnclosed( ZH_COMP_PARAM, "CASE*" ); }
#line 6071 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 518:
#line 1497 "ziher.y" /* yacc.c:1646  */
    { ++ZH_COMP_PARAM->functions.pLast->wCaseCounter; zh_compLinePushIfDebugger( ZH_COMP_PARAM );}
#line 6077 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 521:
#line 1501 "ziher.y" /* yacc.c:1646  */
    {
                        if( (yyvsp[0].lNumber) > 0 )
                        {
                           zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL );
                        }
                     }
#line 6088 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 522:
#line 1509 "ziher.y" /* yacc.c:1646  */
    { zh_compLinePushIfInside( ZH_COMP_PARAM ); }
#line 6094 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 523:
#line 1510 "ziher.y" /* yacc.c:1646  */
    {
                  ZH_COMP_EXPR_FREE( zh_compExprGenPush( (yyvsp[-1].asExpr), ZH_COMP_PARAM ) );
                  (yyval.sNumber) = zh_compGenJumpFalse( 0, ZH_COMP_PARAM );
               }
#line 6103 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 524:
#line 1515 "ziher.y" /* yacc.c:1646  */
    {
                  ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_BREAK_CODE;
                  (yyval.pVoid) = zh_compElseIfGen( ZH_COMP_PARAM, NULL, zh_compGenJump( 0, ZH_COMP_PARAM ) );
                  zh_compGenJumpHere( (yyvsp[-1].sNumber), ZH_COMP_PARAM );
               }
#line 6113 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 525:
#line 1521 "ziher.y" /* yacc.c:1646  */
    { zh_compLinePushIfInside( ZH_COMP_PARAM ); }
#line 6119 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 526:
#line 1522 "ziher.y" /* yacc.c:1646  */
    {
                  ZH_COMP_EXPR_FREE( zh_compExprGenPush( (yyvsp[-1].asExpr), ZH_COMP_PARAM ) );
                  (yyval.sNumber) = zh_compGenJumpFalse( 0, ZH_COMP_PARAM );
               }
#line 6128 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 527:
#line 1527 "ziher.y" /* yacc.c:1646  */
    {
                  ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_BREAK_CODE;
                  (yyval.pVoid) = zh_compElseIfGen( ZH_COMP_PARAM, (yyvsp[-6].pVoid), zh_compGenJump( 0, ZH_COMP_PARAM ) );
                  zh_compGenJumpHere( (yyvsp[-1].sNumber), ZH_COMP_PARAM );
               }
#line 6138 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 528:
#line 1534 "ziher.y" /* yacc.c:1646  */
    {zh_compLinePushIfDebugger( ZH_COMP_PARAM ); }
#line 6144 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 529:
#line 1534 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_BREAK_CODE; }
#line 6150 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 531:
#line 1536 "ziher.y" /* yacc.c:1646  */
    { zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL ); }
#line 6156 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 533:
#line 1541 "ziher.y" /* yacc.c:1646  */
    {
                  ZH_COMP_EXPR_FREE( zh_compExprGenPush( (yyvsp[-1].asExpr), ZH_COMP_PARAM ) );
                  (yyval.sNumber) = zh_compGenJumpFalse( 0, ZH_COMP_PARAM );
               }
#line 6165 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 534:
#line 1546 "ziher.y" /* yacc.c:1646  */
    {
                  zh_compLoopHere( ZH_COMP_PARAM );
                  zh_compGenJump( (yyvsp[-4].sNumber) - ZH_COMP_PARAM->functions.pLast->nPCodePos, ZH_COMP_PARAM );
               }
#line 6174 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 535:
#line 1551 "ziher.y" /* yacc.c:1646  */
    {
                  zh_compGenJumpHere( (yyvsp[-3].sNumber), ZH_COMP_PARAM );
                  if( ZH_COMP_PARAM->functions.pLast->wWhileCounter )
                     --ZH_COMP_PARAM->functions.pLast->wWhileCounter;
                  zh_compLoopEnd( ZH_COMP_PARAM );
                  ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_WITH_RETURN;
               }
#line 6186 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 536:
#line 1561 "ziher.y" /* yacc.c:1646  */
    {
                  (yyval.sNumber) = ZH_COMP_PARAM->functions.pLast->nPCodePos;
                  zh_compLinePushIfInside( ZH_COMP_PARAM );
                  ++ZH_COMP_PARAM->functions.pLast->wWhileCounter;
                  zh_compLoopStart( ZH_COMP_PARAM, ZH_TRUE );
               }
#line 6197 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 537:
#line 1570 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_BREAK_CODE; }
#line 6203 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 540:
#line 1575 "ziher.y" /* yacc.c:1646  */
    { zh_compErrUnclosed( ZH_COMP_PARAM, "WHILE*" ); }
#line 6209 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 547:
#line 1585 "ziher.y" /* yacc.c:1646  */
    {                                      /* 5 */
                  zh_compLinePushIfInside( ZH_COMP_PARAM );
                  (yyvsp[-3].iNumber) = ZH_COMP_PARAM->currLine;
                  zh_compDebugStart();
                  ++ZH_COMP_PARAM->functions.pLast->wForCounter;
                  (yyvsp[-2].asExpr) = zh_compExprReduce( (yyvsp[-2].asExpr), ZH_COMP_PARAM );
                  (yyval.asExpr) = zh_compExprGenPush( zh_compExprAssign( (yyvsp[-2].asExpr), (yyvsp[0].asExpr), ZH_COMP_PARAM ), ZH_COMP_PARAM );
                  if( zh_compExprAsSymbol( (yyvsp[-2].asExpr) ) )
                  {
                     zh_compForStart( ZH_COMP_PARAM, zh_compExprAsSymbol( (yyvsp[-2].asExpr) ), 0 );
                  }
               }
#line 6226 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 548:
#line 1598 "ziher.y" /* yacc.c:1646  */
    {                                      /* 9 */
                  zh_compLoopStart( ZH_COMP_PARAM, ZH_TRUE );
                  (yyval.sNumber) = zh_compGenJump( 0, ZH_COMP_PARAM );
               }
#line 6235 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 549:
#line 1603 "ziher.y" /* yacc.c:1646  */
    {                                      /* 11 */
                  (yyval.sNumber) = ZH_COMP_PARAM->functions.pLast->nPCodePos;
               }
#line 6243 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 550:
#line 1607 "ziher.y" /* yacc.c:1646  */
    {
                  int iSign, iLine;

                  zh_compLoopHere( ZH_COMP_PARAM );

                  iLine = ZH_COMP_PARAM->currLine;
                  ZH_COMP_PARAM->currLine = (yyvsp[-11].iNumber);
                  zh_compLinePush( ZH_COMP_PARAM );
                  ZH_COMP_PARAM->currLine = iLine;

                  if( (yyvsp[-4].asExpr) )
                  {
                     (yyvsp[-4].asExpr) = zh_compExprReduce( (yyvsp[-4].asExpr), ZH_COMP_PARAM );
                     iSign = zh_compExprAsNumSign( (yyvsp[-4].asExpr) );
                     ZH_COMP_EXPR_CLEAR( zh_compExprGenPush( zh_compExprSetOperand( zh_compExprNewPlusEq( (yyvsp[-10].asExpr), ZH_COMP_PARAM ), (yyvsp[-4].asExpr), ZH_COMP_PARAM ), ZH_COMP_PARAM ) );
                  }
                  else
                  {
                     iSign = 1;
                     ZH_COMP_EXPR_CLEAR( zh_compExprGenPush( zh_compExprNewPreInc( (yyvsp[-10].asExpr), ZH_COMP_PARAM ), ZH_COMP_PARAM ) );
                  }
                  zh_compGenJumpHere( (yyvsp[-3].sNumber), ZH_COMP_PARAM );
                  ZH_COMP_EXPR_FREE( zh_compExprGenPush( (yyvsp[-5].asExpr), ZH_COMP_PARAM ) );   /* end */
                  if( iSign )
                  {
                     zh_compGenPCode1( ( ZH_BYTE ) ( iSign > 0 ? ZH_P_GREATER : ZH_P_LESS ), ZH_COMP_PARAM );
                     if( (yyvsp[-4].asExpr) )
                        ZH_COMP_EXPR_FREE( (yyvsp[-4].asExpr) );
                  }
                  else
                  {
                     ZH_COMP_EXPR_FREE( zh_compExprGenPush( (yyvsp[-4].asExpr), ZH_COMP_PARAM ) );   /* step */
                     zh_compGenPCode1( ZH_P_FORTEST, ZH_COMP_PARAM );
                  }

                  zh_compGenJumpFalse( (yyvsp[-1].sNumber) - ZH_COMP_PARAM->functions.pLast->nPCodePos, ZH_COMP_PARAM );
                  zh_compLoopEnd( ZH_COMP_PARAM );
                  if( zh_compExprAsSymbol( (yyvsp[-10].asExpr) ) )
                     zh_compForEnd( ZH_COMP_PARAM, zh_compExprAsSymbol( (yyvsp[-10].asExpr) ) );
                  ZH_COMP_EXPR_FREE( (yyvsp[-7].asExpr) );  /* deletes $5, $2, $4 */
                  ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ( ZH_FUNF_WITH_RETURN | ZH_FUNF_BREAK_CODE );
               }
#line 6290 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 553:
#line 1655 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = NULL; }
#line 6296 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 554:
#line 1656 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprReduce( (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 6302 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 555:
#line 1660 "ziher.y" /* yacc.c:1646  */
    {
                     zh_compLinePush( ZH_COMP_PARAM );
                     if( ZH_COMP_PARAM->functions.pLast->wForCounter )
                        --ZH_COMP_PARAM->functions.pLast->wForCounter;
                  }
#line 6312 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 559:
#line 1670 "ziher.y" /* yacc.c:1646  */
    { zh_compErrUnclosed( ZH_COMP_PARAM, "FOR*" ); }
#line 6318 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 566:
#line 1679 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewVarRef( (yyvsp[0].string), ZH_COMP_PARAM ); }
#line 6324 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 567:
#line 1680 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewRef( (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 6330 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 568:
#line 1683 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewArgList( (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 6336 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 569:
#line 1684 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprAddListExpr( (yyvsp[-2].asExpr), (yyvsp[0].asExpr) ); }
#line 6342 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 570:
#line 1687 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewVarRef( (yyvsp[0].string), ZH_COMP_PARAM ); }
#line 6348 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 572:
#line 1691 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewArgList( (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 6354 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 573:
#line 1692 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprAddListExpr( (yyvsp[-2].asExpr), (yyvsp[0].asExpr) ); }
#line 6360 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 574:
#line 1697 "ziher.y" /* yacc.c:1646  */
    {
                ++ZH_COMP_PARAM->functions.pLast->wForCounter;    /* 5 */
                zh_compLinePushIfInside( ZH_COMP_PARAM );
                zh_compDebugStart();
             }
#line 6370 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 575:
#line 1703 "ziher.y" /* yacc.c:1646  */
    {
                /* 7 */
                (yyvsp[-4].asExpr) = zh_compExprReduce( (yyvsp[-4].asExpr), ZH_COMP_PARAM );
                (yyvsp[-2].asExpr) = zh_compExprReduce( (yyvsp[-2].asExpr), ZH_COMP_PARAM );
                zh_compEnumStart( ZH_COMP_PARAM, (yyvsp[-4].asExpr), (yyvsp[-2].asExpr), (yyvsp[0].iNumber) );

                zh_compLoopStart( ZH_COMP_PARAM, ZH_TRUE );
                (yyval.sNumber) = ZH_COMP_PARAM->functions.pLast->nPCodePos;
             }
#line 6384 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 576:
#line 1713 "ziher.y" /* yacc.c:1646  */
    {
                /* 9 */
                (yyval.sNumber) = zh_compGenJumpFalse( 0, ZH_COMP_PARAM );
             }
#line 6393 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 577:
#line 1718 "ziher.y" /* yacc.c:1646  */
    {
                zh_compLoopHere( ZH_COMP_PARAM );
                zh_compEnumNext( ZH_COMP_PARAM, (yyvsp[-8].asExpr), (yyvsp[-4].iNumber) );
                zh_compGenJump( (yyvsp[-3].sNumber) - ZH_COMP_PARAM->functions.pLast->nPCodePos, ZH_COMP_PARAM );

                zh_compGenJumpHere( (yyvsp[-1].sNumber), ZH_COMP_PARAM );
                zh_compLoopEnd( ZH_COMP_PARAM );
                ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ( ZH_FUNF_WITH_RETURN | ZH_FUNF_BREAK_CODE );
                zh_compEnumEnd( ZH_COMP_PARAM, (yyvsp[-8].asExpr) );
                ZH_COMP_EXPR_FREE( (yyvsp[-8].asExpr) );
                ZH_COMP_EXPR_FREE( (yyvsp[-6].asExpr) );
             }
#line 6410 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 578:
#line 1732 "ziher.y" /* yacc.c:1646  */
    { (yyval.iNumber) =  1; }
#line 6416 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 579:
#line 1733 "ziher.y" /* yacc.c:1646  */
    { (yyval.iNumber) = -1; }
#line 6422 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 580:
#line 1737 "ziher.y" /* yacc.c:1646  */
    {
                  zh_compLoopStart( ZH_COMP_PARAM, ZH_FALSE );
                  zh_compSwitchStart( ZH_COMP_PARAM, (yyvsp[0].asExpr) );
                  zh_compGenJump( 0, ZH_COMP_PARAM );
               }
#line 6432 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 581:
#line 1744 "ziher.y" /* yacc.c:1646  */
    {
                  zh_compSwitchEnd( ZH_COMP_PARAM );
                  zh_compLoopEnd( ZH_COMP_PARAM );
               }
#line 6441 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 582:
#line 1751 "ziher.y" /* yacc.c:1646  */
    {
                  ZH_COMP_EXPR_FREE( (yyvsp[-1].asExpr) );
               }
#line 6449 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 583:
#line 1757 "ziher.y" /* yacc.c:1646  */
    {
                  if( ZH_COMP_PARAM->functions.pLast->wSwitchCounter )
                     --ZH_COMP_PARAM->functions.pLast->wSwitchCounter;
                  ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ( ZH_FUNF_WITH_RETURN | ZH_FUNF_BREAK_CODE );
               }
#line 6459 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 586:
#line 1766 "ziher.y" /* yacc.c:1646  */
    { zh_compErrUnclosed( ZH_COMP_PARAM, "SWITCH*" ); }
#line 6465 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 593:
#line 1776 "ziher.y" /* yacc.c:1646  */
    {
                  ++ZH_COMP_PARAM->functions.pLast->wSwitchCounter;
                  zh_compLinePushIfInside( ZH_COMP_PARAM );
               }
#line 6474 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 594:
#line 1781 "ziher.y" /* yacc.c:1646  */
    {
                  (yyval.asExpr) = zh_compExprReduce( (yyvsp[-1].asExpr), ZH_COMP_PARAM );
               }
#line 6482 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 596:
#line 1788 "ziher.y" /* yacc.c:1646  */
    {
                  if( (yyvsp[0].lNumber) > 0 )
                  {
                     zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL );
                  }
               }
#line 6493 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 597:
#line 1796 "ziher.y" /* yacc.c:1646  */
    { zh_compSwitchAdd( ZH_COMP_PARAM, (yyvsp[0].asExpr) ); zh_compLinePush( ZH_COMP_PARAM ); }
#line 6499 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 599:
#line 1799 "ziher.y" /* yacc.c:1646  */
    { zh_compSwitchAdd( ZH_COMP_PARAM, (yyvsp[0].asExpr) ); zh_compLinePush( ZH_COMP_PARAM ); }
#line 6505 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 603:
#line 1807 "ziher.y" /* yacc.c:1646  */
    { zh_compSwitchAdd( ZH_COMP_PARAM, NULL ); zh_compLinePush( ZH_COMP_PARAM ); }
#line 6511 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 604:
#line 1807 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_BREAK_CODE; }
#line 6517 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 606:
#line 1812 "ziher.y" /* yacc.c:1646  */
    {              /* 2 */
                  zh_compLinePushIfInside( ZH_COMP_PARAM );
                  ++ZH_COMP_PARAM->functions.pLast->wSeqCounter;
                  ++ZH_COMP_PARAM->functions.pLast->wSeqBegCounter;
                  (yyval.sNumber) = zh_compSequenceBegin( ZH_COMP_PARAM );
               }
#line 6528 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 607:
#line 1821 "ziher.y" /* yacc.c:1646  */
    {              /* 6 */
                  /* Set jump address for ZH_P_SEQBEGIN opcode - this address
                   * will be used in BREAK code if there is no RECOVER clause
                   */
                  if( (yyvsp[-2].sNumber) )
                     zh_compGenPCode1( ZH_P_POP, ZH_COMP_PARAM );
                  zh_compGenJumpHere( (yyvsp[-3].sNumber), ZH_COMP_PARAM );
                  (yyval.sNumber) = zh_compSequenceEnd( ZH_COMP_PARAM );
                  (yyvsp[-1].lNumber) = zh_compLoopCount( ZH_COMP_PARAM );
               }
#line 6543 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 608:
#line 1832 "ziher.y" /* yacc.c:1646  */
    {              /* 8 */
                  /* Replace END address with RECOVER address in
                   * ZH_P_SEQBEGIN opcode if there is RECOVER clause
                   */
                  if( (yyvsp[0].sNumber) )
                     zh_compGenJumpThere( (yyvsp[-5].sNumber), (yyvsp[0].sNumber), ZH_COMP_PARAM );
               }
#line 6555 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 609:
#line 1840 "ziher.y" /* yacc.c:1646  */
    {              /* 10 */
                  long lLoopCount = zh_compLoopCount( ZH_COMP_PARAM );
                  ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ( ZH_FUNF_WITH_RETURN | ZH_FUNF_BREAK_CODE );
                  if( (yyvsp[0].sNumber) )
                  {
                     if( (yyvsp[-5].lNumber) != lLoopCount )
                     {
                        /* ALWAYS statement after RECOVER with EXIT/LOOP statements */
                        zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_ALWAYS_AFTER_EXIT, "EXIT/LOOP", NULL );
                     }
                     --ZH_COMP_PARAM->functions.pLast->wAlwaysCounter;
                     /* replace END address with ALWAYS address in
                        ZH_P_SEQEND opcode */
                     zh_compGenJumpThere( (yyvsp[-3].sNumber), (yyvsp[0].sNumber), ZH_COMP_PARAM );
                     /* Fix ALWAYS address in ZH_P_SEQALWAYS opcode */
                     zh_compGenJumpThere( (yyvsp[-7].sNumber) - 4, (yyvsp[0].sNumber), ZH_COMP_PARAM );
                     /* Fix ALWAYSEND address in ZH_P_ALWAYSBEGIN opcode */
                     zh_compGenJumpHere( (yyvsp[0].sNumber) + 1, ZH_COMP_PARAM );
                     zh_compGenPCode1( ZH_P_ALWAYSEND, ZH_COMP_PARAM );
                  }
                  else
                  {
                     /* Fix END address in ZH_P_SEQEND opcode */
                     zh_compGenJumpHere( (yyvsp[-3].sNumber), ZH_COMP_PARAM );
                  }
                  zh_compSequenceFinish( ZH_COMP_PARAM, (yyvsp[-7].sNumber), (yyvsp[-3].sNumber), (yyvsp[0].sNumber),
                                         (yyvsp[-4].lNumber) != 0, (yyvsp[-2].sNumber) != 0, (yyvsp[-5].lNumber) == lLoopCount );
               }
#line 6588 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 610:
#line 1869 "ziher.y" /* yacc.c:1646  */
    {
                  if( ZH_COMP_PARAM->functions.pLast->wSeqBegCounter )
                     --ZH_COMP_PARAM->functions.pLast->wSeqBegCounter;
               }
#line 6597 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 613:
#line 1877 "ziher.y" /* yacc.c:1646  */
    { zh_compErrUnclosed( ZH_COMP_PARAM, "BEGIN SEQUENCE*" ); }
#line 6603 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 620:
#line 1886 "ziher.y" /* yacc.c:1646  */
    { (yyval.sNumber) = 0; }
#line 6609 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 621:
#line 1888 "ziher.y" /* yacc.c:1646  */
    {
                  ZH_COMP_EXPR_FREE( zh_compExprGenPush( (yyvsp[0].asExpr), ZH_COMP_PARAM ) );
                  zh_compGenPCode1( ZH_P_SEQBLOCK, ZH_COMP_PARAM );
                  (yyval.sNumber) = ZH_COMP_PARAM->functions.pLast->nPCodePos;
               }
#line 6619 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 622:
#line 1895 "ziher.y" /* yacc.c:1646  */
    { (yyval.sNumber) = 0; }
#line 6625 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 624:
#line 1900 "ziher.y" /* yacc.c:1646  */
    {
                  ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ( ZH_FUNF_WITH_RETURN | ZH_FUNF_BREAK_CODE );
                  (yyval.sNumber) = ZH_COMP_PARAM->functions.pLast->nPCodePos;
                  ++ZH_COMP_PARAM->functions.pLast->wAlwaysCounter;
                  zh_compSequenceAlways( ZH_COMP_PARAM );
               }
#line 6636 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 625:
#line 1909 "ziher.y" /* yacc.c:1646  */
    {
                  (yyval.sNumber) = 0;
                  if( ZH_COMP_PARAM->functions.pLast->wSeqCounter )
                     --ZH_COMP_PARAM->functions.pLast->wSeqCounter;
                  ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_BREAK_CODE;
               }
#line 6647 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 628:
#line 1920 "ziher.y" /* yacc.c:1646  */
    {
                  (yyval.sNumber) = ZH_COMP_PARAM->functions.pLast->nPCodePos;
                  if( ZH_COMP_PARAM->functions.pLast->wSeqCounter )
                     --ZH_COMP_PARAM->functions.pLast->wSeqCounter;
                  ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_BREAK_CODE;
                  zh_compLinePushIfInside( ZH_COMP_PARAM );
                  zh_compGenPCode2( ZH_P_SEQRECOVER, ZH_P_POP, ZH_COMP_PARAM );
               }
#line 6660 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 629:
#line 1931 "ziher.y" /* yacc.c:1646  */
    {
                  (yyval.sNumber) = ZH_COMP_PARAM->functions.pLast->nPCodePos;
                  if( ZH_COMP_PARAM->functions.pLast->wSeqCounter )
                     --ZH_COMP_PARAM->functions.pLast->wSeqCounter;
                  ZH_COMP_PARAM->functions.pLast->funFlags &= ~ ZH_FUNF_BREAK_CODE;
                  zh_compLinePushIfInside( ZH_COMP_PARAM );
                  zh_compGenPCode1( ZH_P_SEQRECOVER, ZH_COMP_PARAM );
                  zh_compGenPopVar( (yyvsp[0].string), ZH_COMP_PARAM );
               }
#line 6674 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 630:
#line 1949 "ziher.y" /* yacc.c:1646  */
    {
                  (yyval.asExpr) = zh_compExprNewFunCall( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), ZH_COMP_PARAM );
               }
#line 6682 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 631:
#line 1953 "ziher.y" /* yacc.c:1646  */
    {
                  zh_compModuleAdd( ZH_COMP_PARAM, (yyvsp[-1].string), ZH_FALSE );
                  /* DOIDENT is the only one identifier which can be returned in lower letters */
                  (yyval.asExpr) = zh_compExprNewFunCall( zh_compExprNewFunName( zh_compIdentifierNew( ZH_COMP_PARAM, zh_strupr( zh_strdup( (yyvsp[-1].string) ) ), ZH_IDENT_FREE ), ZH_COMP_PARAM ), (yyvsp[0].asExpr), ZH_COMP_PARAM );
               }
#line 6692 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 632:
#line 1960 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = NULL; }
#line 6698 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 633:
#line 1961 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 6704 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 634:
#line 1964 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprAddListExpr( zh_compExprNewArgList( zh_compExprNewNil( ZH_COMP_PARAM ), ZH_COMP_PARAM ), zh_compExprNewNil( ZH_COMP_PARAM ) ); }
#line 6710 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 635:
#line 1965 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprAddListExpr( zh_compExprNewArgList( zh_compExprNewNil( ZH_COMP_PARAM ), ZH_COMP_PARAM ), (yyvsp[0].asExpr) ); }
#line 6716 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 636:
#line 1966 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewArgList( (yyvsp[0].asExpr), ZH_COMP_PARAM ); }
#line 6722 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 637:
#line 1967 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprAddListExpr( (yyvsp[-1].asExpr), zh_compExprNewNil( ZH_COMP_PARAM ) ); }
#line 6728 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 638:
#line 1968 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprAddListExpr( (yyvsp[-2].asExpr), (yyvsp[0].asExpr) ); }
#line 6734 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 639:
#line 1971 "ziher.y" /* yacc.c:1646  */
    { (yyval.asExpr) = zh_compExprNewVarRef( (yyvsp[0].string), ZH_COMP_PARAM ); }
#line 6740 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 644:
#line 1979 "ziher.y" /* yacc.c:1646  */
    {
                  zh_compLinePushIfInside( ZH_COMP_PARAM );
                  ZH_COMP_EXPR_FREE( zh_compExprGenPush( (yyvsp[-1].asExpr), ZH_COMP_PARAM ) );
                  (yyval.sNumber) = ZH_COMP_PARAM->functions.pLast->nPCodePos;
                  zh_compGenPCode1( ZH_P_WITHOBJECTSTART, ZH_COMP_PARAM );
                  ZH_COMP_PARAM->functions.pLast->wWithObjectCnt++;
               }
#line 6752 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 645:
#line 1988 "ziher.y" /* yacc.c:1646  */
    {  if( ZH_COMP_PARAM->functions.pLast->wWithObjectCnt )
                    --ZH_COMP_PARAM->functions.pLast->wWithObjectCnt;
                  if( (yyvsp[-1].lNumber) )
                     zh_compGenPCode1( ZH_P_WITHOBJECTEND, ZH_COMP_PARAM );
                  else
                  {
                     zh_compNOOPfill( ZH_COMP_PARAM->functions.pLast,
                                      (yyvsp[-2].sNumber), 1, ZH_FALSE, ZH_TRUE );
                     zh_compGenPCode1( ZH_P_POP, ZH_COMP_PARAM );
                  }
               }
#line 6768 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 648:
#line 2003 "ziher.y" /* yacc.c:1646  */
    { zh_compErrUnclosed( ZH_COMP_PARAM, "WITH OBJECT*" ); }
#line 6774 "zh_comp_y.c" /* yacc.c:1646  */
    break;

  case 655:
#line 2012 "ziher.y" /* yacc.c:1646  */
    { ZH_COMP_PARAM->fError = ZH_FALSE; }
#line 6780 "zh_comp_y.c" /* yacc.c:1646  */
    break;


#line 6784 "zh_comp_y.c" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (pComp, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (pComp, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, pComp);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, pComp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (pComp, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, pComp);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, pComp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 2016 "ziher.y" /* yacc.c:1906  */


/*
 ** ------------------------------------------------------------------------ **
 */

/*
 * Avoid tracing in preprocessor/compiler.
 */
#if ! defined( ZH_TRACE_UTILS )
   #if defined( ZH_TRACE_LEVEL )
      #undef ZH_TRACE_LEVEL
   #endif
#endif


/* ************************************************************************* */

/*
 * This function stores the position in pcode buffer where the FOR/WHILE
 * loop starts. It will be used to fix any LOOP/EXIT statements
 */
static void zh_compLoopStart( ZH_COMP_DECL, ZH_BOOL fCanLoop )
{
   PZH_LOOPEXIT pLoop = ( PZH_LOOPEXIT ) zh_xgrab( sizeof( ZH_LOOPEXIT ) );
   PZH_ZFUNC pFunc = ZH_COMP_PARAM->functions.pLast;

   if( pFunc->pLoops )
   {
      PZH_LOOPEXIT pLast = pFunc->pLoops;

      while( pLast->pNext )
         pLast = pLast->pNext;
      pLast->pNext = pLoop;
   }
   else
      pFunc->pLoops = pLoop;

   pLoop->nOffset          = pFunc->nPCodePos;  /* store the start position */
   pLoop->fCanLoop         = fCanLoop;    /* can we use LOOP inside */
   pLoop->wSeqCounter      = pFunc->wSeqCounter;      /* store current SEQUENCE counter */
   pLoop->wWithObjectCnt   = pFunc->wWithObjectCnt;   /* store current WITH OBJECT counter */
   pLoop->wAlwaysCounter   = pFunc->wAlwaysCounter;   /* store current ALWAYS counter */
   pLoop->pExitList        = NULL;
   pLoop->pLoopList        = NULL;
   pLoop->pNext            = NULL;
}

/*
 * return number of LOOP of EXIT statement in the top most structure
 */
static long zh_compLoopCount( ZH_COMP_DECL )
{
   PZH_LOOPEXIT pLastLoop, pLastExit, pLoop;
   PZH_ZFUNC pFunc = ZH_COMP_PARAM->functions.pLast;
   long lCount = 0;

   pLastLoop = pLastExit = NULL;
   pLoop = pFunc->pLoops;
   while( pLoop )
   {
      if( pLoop->fCanLoop )
         pLastLoop = pLoop;
      pLastExit = pLoop;
      pLoop = pLoop->pNext;
   }

   if( pLastLoop )
   {
      while( pLastLoop->pLoopList )
      {
         ++lCount;
         pLastLoop = pLastLoop->pLoopList;
      }
   }
   if( pLastExit )
   {
      while( pLastExit->pExitList )
      {
         ++lCount;
         pLastExit = pLastExit->pExitList;
      }
   }

   return lCount;
}

/*
 * Stores the position of LOOP statement to fix it later at the end of loop
 */
static void zh_compLoopLoop( ZH_COMP_DECL )
{
   PZH_LOOPEXIT pLast = NULL, pLoop;
   PZH_ZFUNC pFunc = ZH_COMP_PARAM->functions.pLast;

   pLoop = pFunc->pLoops;
   while( pLoop )
   {
      if( pLoop->fCanLoop )
         pLast = pLoop;
      pLoop = pLoop->pNext;
   }

   if( ! pLast )
   {
      zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_UNMATCHED_EXIT, "LOOP", NULL );
   }
   else
   {
      if( pLast->wSeqCounter != pFunc->wSeqCounter )
      {
         /* Attempt to LOOP from BEGIN/END sequence
          * Current SEQUENCE counter is different then at the beginning of loop
          * Notice that LOOP is allowed in RECOVER code when there is no
          * ALWAYS block
          */
         zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_EXIT_IN_SEQUENCE, "LOOP", NULL );
      }
      else if( pLast->wAlwaysCounter != pFunc->wAlwaysCounter )
      {
         /* Attempt to LOOP from ALWAYS block of BEGIN/END sequence
          */
         zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_EXIT_IN_SEQUENCE, "LOOP", NULL );
      }
      else
      {
         ZH_USHORT wWithObjectCnt = pLast->wWithObjectCnt;

         pLoop = ( PZH_LOOPEXIT ) zh_xgrab( sizeof( ZH_LOOPEXIT ) );
         pLoop->pLoopList = NULL;
         while( pLast->pLoopList )
            pLast = pLast->pLoopList;
         pLast->pLoopList = pLoop;

         while( wWithObjectCnt < pFunc->wWithObjectCnt )
         {
            zh_compGenPCode1( ZH_P_WITHOBJECTEND, ZH_COMP_PARAM );
            wWithObjectCnt++;
         }
         /* store the position to fix */
         pLoop->nOffset = pFunc->nPCodePos;
         zh_compGenJump( 0, ZH_COMP_PARAM );
      }
   }
}

/*
 * Stores the position of EXIT statement to fix it later at the end of loop
 */
static void zh_compLoopExit( ZH_COMP_DECL )
{
   PZH_ZFUNC pFunc = ZH_COMP_PARAM->functions.pLast;

   if( ! pFunc->pLoops )
   {
      zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_UNMATCHED_EXIT, "EXIT", NULL );
   }
   else
   {
      PZH_LOOPEXIT pLast, pLoop;

      pLast = pFunc->pLoops;
      while( pLast->pNext )
         pLast = pLast->pNext;

      if( pLast->wSeqCounter != pFunc->wSeqCounter )
      {
         /* Attempt to EXIT from BEGIN/END sequence
          * Current SEQUENCE counter is different then at the beginning of loop
          * Notice that EXIT is allowed in RECOVER code when there is no
          * ALWAYS block
          */
         zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_EXIT_IN_SEQUENCE, "EXIT", NULL );
      }
      else if( pLast->wAlwaysCounter != pFunc->wAlwaysCounter )
      {
         /* Attempt to EXIT from ALWAYS block of BEGIN/END sequence
          */
         zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_EXIT_IN_SEQUENCE, "EXIT", NULL );
      }
      else
      {
         ZH_USHORT wWithObjectCnt = pLast->wWithObjectCnt;

         pLoop = ( PZH_LOOPEXIT ) zh_xgrab( sizeof( ZH_LOOPEXIT ) );
         pLoop->pExitList = NULL;
         while( pLast->pExitList )
            pLast = pLast->pExitList;
         pLast->pExitList = pLoop;

         while( wWithObjectCnt < pFunc->wWithObjectCnt )
         {
            zh_compGenPCode1( ZH_P_WITHOBJECTEND, ZH_COMP_PARAM );
            wWithObjectCnt++;
         }
         /* store the position to fix */
         pLoop->nOffset = pFunc->nPCodePos;
         zh_compGenJump( 0, ZH_COMP_PARAM );
      }
   }
}

/*
 * Fixes the LOOP statement
 */
static void zh_compLoopHere( ZH_COMP_DECL )
{
   PZH_ZFUNC pFunc = ZH_COMP_PARAM->functions.pLast;
   PZH_LOOPEXIT pLoop = pFunc->pLoops, pFree, pLast;

   if( pLoop )
   {
      while( pLoop->pNext )
         pLoop = pLoop->pNext;

      pLast = pLoop;
      pLoop = pLoop->pLoopList;
      while( pLoop )
      {
         zh_compGenJumpHere( pLoop->nOffset + 1, ZH_COMP_PARAM );
         pFree = pLoop;
         pLoop = pLoop->pLoopList;
         zh_xfree( pFree );
      }
      pLast->pLoopList = NULL;
   }
}

/*
 * Fixes the EXIT statements and releases memory allocated for current loop
 */
static void zh_compLoopEnd( ZH_COMP_DECL )
{
   PZH_ZFUNC pFunc = ZH_COMP_PARAM->functions.pLast;
   PZH_LOOPEXIT pLoop = pFunc->pLoops, pLast = pFunc->pLoops, pExit, pFree;

   if( pLoop )
   {
      while( pLoop->pNext )
      {
         pLast = pLoop;
         pLoop = pLoop->pNext;
      }

      pExit = pLoop->pExitList;
      while( pExit )
      {
         zh_compGenJumpHere( pExit->nOffset + 1, ZH_COMP_PARAM );
         pFree = pExit;
         pExit = pExit->pExitList;
         zh_xfree( pFree );
      }

      pLast->pNext = NULL;
      if( pLoop == pFunc->pLoops )
         pFunc->pLoops = NULL;
      zh_xfree( pLoop );
   }
}

void zh_compLoopKill( PZH_ZFUNC pFunc )
{
   PZH_LOOPEXIT pLoop, pFree;

   while( pFunc->pLoops )
   {
      pLoop = pFunc->pLoops;
      while( pLoop->pExitList )
      {
         pFree = pLoop->pExitList;
         pLoop->pExitList = pFree->pExitList;
         zh_xfree( pFree );
      }
      while( pLoop->pLoopList )
      {
         pFree = pLoop->pLoopList;
         pLoop->pLoopList = pFree->pLoopList;
         zh_xfree( pFree );
      }
      pFunc->pLoops = pLoop->pNext;
      zh_xfree( pLoop );
   }
}

static void * zh_compElseIfGen( ZH_COMP_DECL, void * pFirst, ZH_SIZE nOffset )
{
   PZH_ELSEIF pElseIf = ( PZH_ELSEIF ) zh_xgrab( sizeof( ZH_ELSEIF ) ), pLast;
   PZH_ZFUNC pFunc = ZH_COMP_PARAM->functions.pLast;

   pElseIf->nOffset = nOffset;
   pElseIf->pPrev   = NULL;
   pElseIf->pElseif = NULL;

   if( pFirst )
   {
      pLast = ( PZH_ELSEIF ) pFirst;
      while( pLast->pElseif )
         pLast = pLast->pElseif;
      pLast->pElseif = pElseIf;
   }
   else
   {
      if( pFunc->elseif )
      {
         pElseIf->pPrev = pFunc->elseif;
      }
      pFirst = pElseIf;
      pFunc->elseif = pElseIf;
   }
   return pFirst;
}


static void zh_compElseIfFix( ZH_COMP_DECL, void * pFixElseIfs )
{
   PZH_ELSEIF pFix = ( PZH_ELSEIF ) pFixElseIfs;
   PZH_ELSEIF pDel;

   ZH_COMP_PARAM->functions.pLast->elseif = pFix->pPrev;
   while( pFix )
   {
      zh_compGenJumpHere( pFix->nOffset, ZH_COMP_PARAM );
      pDel = pFix;
      pFix = pFix->pElseif;
      zh_xfree( pDel );
   }
}

void zh_compElseIfKill( PZH_ZFUNC pFunc )
{
   PZH_ELSEIF pFix;
   PZH_ELSEIF pDel;

   while( pFunc->elseif )
   {
      pFix = pFunc->elseif;
      pFunc->elseif = pFix->pPrev;
      while( pFix )
      {
         pDel = pFix;
         pFix = pFix->pElseif;
         zh_xfree( pDel );
      }
   }
}

static void zh_compRTVariableAdd( ZH_COMP_DECL, PZH_EXPR pVar, ZH_BOOL bPopInitValue )
{
   PZH_RTVAR pRTvar = ( PZH_RTVAR ) zh_xgrab( sizeof( ZH_RTVAR ) );
   PZH_ZFUNC pFunc = ZH_COMP_PARAM->functions.pLast;

   pRTvar->pVar = pVar;
   pRTvar->bPopValue = bPopInitValue;
   pRTvar->pNext = NULL;
   pRTvar->pPrev = NULL;

   if( pFunc->rtvars )
   {
      PZH_RTVAR pLast = pFunc->rtvars;
      while( pLast->pNext )
         pLast = pLast->pNext;
      pLast->pNext = pRTvar;
      pRTvar->pPrev = pLast;
   }
   else
      pFunc->rtvars = pRTvar;
}

static void zh_compRTVariableGen( ZH_COMP_DECL, const char * szCreateFun )
{
   ZH_USHORT usCount = 0;
   PZH_ZFUNC pFunc = ZH_COMP_PARAM->functions.pLast;
   PZH_RTVAR pVar = pFunc->rtvars;
   PZH_RTVAR pDel;

   /* generate the function call frame */
   zh_compGenPushFunCall( szCreateFun, ZH_FN_UDF, ZH_COMP_PARAM );

   /* push variable names to create */
   while( pVar->pNext )
   {
      pVar->pVar = zh_compExprGenPush( pVar->pVar, ZH_COMP_PARAM );
      pVar = pVar->pNext;
      ++usCount;
   }
   pVar->pVar = zh_compExprGenPush( pVar->pVar, ZH_COMP_PARAM );
   ++usCount;

   /* call function that will create either PUBLIC or PRIVATE variables */
   if( usCount > 255 )
      zh_compGenPCode3( ZH_P_DO, ZH_LOBYTE( usCount ), ZH_HIBYTE( usCount ), ZH_COMP_PARAM );
   else
      zh_compGenPCode2( ZH_P_DOSHORT, ( ZH_BYTE ) usCount, ZH_COMP_PARAM );

   /* pop initial values */
   while( pVar )
   {
      if( pVar->bPopValue )
         ZH_COMP_EXPR_FREE( zh_compExprGenPop( pVar->pVar, ZH_COMP_PARAM ) );
      else
         ZH_COMP_EXPR_FREE( pVar->pVar );
      pDel = pVar;
      pVar = pVar->pPrev;
      zh_xfree( pDel );
   }
   pFunc->rtvars = NULL;
}

void zh_compRTVariableKill( ZH_COMP_DECL, PZH_ZFUNC pFunc )
{
   PZH_RTVAR pVar;

   while( pFunc->rtvars )
   {
      pVar = pFunc->rtvars;

      ZH_COMP_EXPR_FREE( pVar->pVar );
      pFunc->rtvars = pVar->pPrev;
      zh_xfree( pVar );
   }
   pFunc->rtvars = NULL;
}

static PZH_EXPR zh_compArrayDimPush( PZH_EXPR pInitValue, ZH_COMP_DECL )
{
   ZH_USHORT uCount = ( ZH_USHORT ) zh_compExprListLen( pInitValue );

   if( uCount == 1 && zh_compExprIsInteger( pInitValue->value.asList.pExprList ) &&
       zh_compExprAsInteger( pInitValue->value.asList.pExprList ) == 0 )
   {
      zh_compGenPCode3( ZH_P_ARRAYGEN, 0, 0, ZH_COMP_PARAM );
   }
   else
   {
      pInitValue = zh_compExprGenPush( pInitValue, ZH_COMP_PARAM );
      zh_compGenPCode3( ZH_P_ARRAYDIM, ZH_LOBYTE( uCount ), ZH_HIBYTE( uCount ), ZH_COMP_PARAM );
   }
   return pInitValue;
}

static void zh_compVariableDim( const char * szName, PZH_EXPR pInitValue, ZH_COMP_DECL )
{
   if( ZH_COMP_PARAM->iVarScope == ZH_VSCOMP_PUBLIC || ZH_COMP_PARAM->iVarScope == ZH_VSCOMP_PRIVATE )
   {
      zh_compVariableAdd( ZH_COMP_PARAM, szName, zh_compVarTypeNew( ZH_COMP_PARAM, 'A', NULL ) );
      ZH_COMP_EXPR_FREE( zh_compArrayDimPush( pInitValue, ZH_COMP_PARAM ) );
      zh_compRTVariableAdd( ZH_COMP_PARAM, zh_compExprNewRTVar( szName, NULL, ZH_COMP_PARAM ), ZH_TRUE );
   }
   else if( ZH_COMP_PARAM->iVarScope & ZH_VSCOMP_STATIC )
   {
      PZH_EXPR pVar = zh_compExprNewVar( szName, ZH_COMP_PARAM );
      PZH_EXPR pAssign;

      /* create a static variable */
      zh_compVariableAdd( ZH_COMP_PARAM, szName, zh_compVarTypeNew( ZH_COMP_PARAM, 'A', NULL ) );

      zh_compStaticDefStart( ZH_COMP_PARAM );   /* switch to statics pcode buffer */
      /* create an array */
      pInitValue = zh_compArrayDimPush( pInitValue, ZH_COMP_PARAM );
      /* now pop an array */
      pVar = zh_compExprGenPop( pVar, ZH_COMP_PARAM );
      /* check if valid initializers were used but don't generate any code */
      pAssign = zh_compExprAssignStatic( pVar, pInitValue, ZH_COMP_PARAM );
      /* delete all used expressions */
      ZH_COMP_EXPR_FREE( pAssign );
      zh_compStaticDefEnd( ZH_COMP_PARAM, szName );
   }
   else
   {
      zh_compVariableAdd( ZH_COMP_PARAM, szName, zh_compVarTypeNew( ZH_COMP_PARAM, 'A', NULL ) );
      ZH_COMP_EXPR_FREE( zh_compArrayDimPush( pInitValue, ZH_COMP_PARAM ) );
      if( ZH_COMP_PARAM->iVarScope != ZH_VSCOMP_LOCAL ||
          !( ZH_COMP_PARAM->functions.pLast->funFlags & ZH_FUNF_EXTBLOCK ) )
      {
         ZH_COMP_EXPR_FREE( zh_compExprGenPop( zh_compExprNewVar( szName, ZH_COMP_PARAM ), ZH_COMP_PARAM ) );
      }
   }
}

static void zh_compForStart( ZH_COMP_DECL, const char *szVarName, int iForEachDir )
{
   PZH_ENUMERATOR pEnumVar;

   pEnumVar = ZH_COMP_PARAM->functions.pLast->pEnum;
   if( pEnumVar == NULL )
   {
      ZH_COMP_PARAM->functions.pLast->pEnum = ( PZH_ENUMERATOR ) zh_xgrab( sizeof( ZH_ENUMERATOR ) );
      pEnumVar = ZH_COMP_PARAM->functions.pLast->pEnum;
   }
   else
   {
      ZH_BOOL bWarn = ZH_TRUE;
      PZH_ENUMERATOR pLast = pEnumVar;

      while( pEnumVar )
      {
         if( strcmp( pEnumVar->szName, szVarName ) == 0 )
         {
            /* Enumerator variable exists already - throw warning */
            if( bWarn )
            {
               zh_compGenWarning( ZH_COMP_PARAM, zh_comp_szWarnings, 'W', ZH_COMP_WARN_FORVAR_DUPL, szVarName, NULL );
               bWarn = ZH_FALSE;
            }
         }
         pLast = pEnumVar;
         pEnumVar = pEnumVar->pNext;
      }
      pLast->pNext = ( PZH_ENUMERATOR ) zh_xgrab( sizeof( ZH_ENUMERATOR ) );
      pEnumVar = pLast->pNext;
   }
   pEnumVar->szName      = szVarName;
   pEnumVar->iForEachDir = iForEachDir;
   pEnumVar->pNext       = NULL;
}

static ZH_BOOL zh_compForEachVarError( ZH_COMP_DECL, const char *szVarName, int * piDir )
{
   PZH_ENUMERATOR pEnumVar;

   pEnumVar = ZH_COMP_PARAM->functions.pLast->pEnum;
   if( pEnumVar && ! ZH_COMP_PARAM->functions.pLast->bBlock )
   {
      while( pEnumVar )
      {
         if( strcmp( pEnumVar->szName, szVarName ) == 0 )
         {
            * piDir = pEnumVar->iForEachDir;
            if( * piDir != 0 )
            {
               /* only if it is FOR EACH enumerator
                * generate warning if it is FOR/NEXT loop
               */
               return ZH_FALSE;
            }
         }
         pEnumVar = pEnumVar->pNext;
      }
   }

   zh_compGenWarning( ZH_COMP_PARAM, zh_comp_szWarnings, 'W', ZH_COMP_WARN_ENUM_INVALID, szVarName, NULL );
   return ZH_TRUE;
}

static void zh_compForEnd( ZH_COMP_DECL, const char *szVar )
{
   PZH_ENUMERATOR * pEnumVar;

   ZH_SYMBOL_UNUSED( szVar );

   pEnumVar = &ZH_COMP_PARAM->functions.pLast->pEnum;
   if( *pEnumVar )
   {
      while( ( *pEnumVar )->pNext )
         pEnumVar = &( *pEnumVar )->pNext;

      zh_xfree( *pEnumVar );
      *pEnumVar = NULL;
   }
}

static ZH_COMP_CARGO2_FUNC( zh_compEnumEvalStart )
{
   const char * szName = zh_compExprAsSymbol( ( PZH_EXPR ) cargo );

   if( szName )
      zh_compForStart( ZH_COMP_PARAM, szName, ZH_COMP_PARAM->fDescend ? -1 : 1 );

   zh_compExprGenPush( ( PZH_EXPR ) dummy, ZH_COMP_PARAM );  /* expression */
   zh_compExprGenPush( ( PZH_EXPR ) cargo, ZH_COMP_PARAM );  /* variable */
}

static void zh_compEnumStart( ZH_COMP_DECL, PZH_EXPR pVars, PZH_EXPR pExprs, int descend )
{
   ZH_SIZE nLen;

   if( zh_compExprListLen( pVars ) != zh_compExprListLen( pExprs ) )
   {
      zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_FORVAR_DIFF, NULL, NULL );
   }

   ZH_COMP_PARAM->fDescend = descend < 0;
   nLen = zh_compExprListEval2( ZH_COMP_PARAM, pVars, pExprs, zh_compEnumEvalStart );

   if( nLen > 255 )
   {
      zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_FORVAR_TOOMANY, NULL, NULL );
   }
   else
   {
      zh_compGenPCode3( ZH_P_ENUMSTART, ( ZH_BYTE ) ( nLen & 0xFF ), ( ZH_BYTE ) ( descend > 0 ? 1 : 0 ), ZH_COMP_PARAM );
   }
}

static void zh_compEnumNext( ZH_COMP_DECL, PZH_EXPR pExpr, int descend )
{
   ZH_SYMBOL_UNUSED( pExpr );
   if( descend > 0 )
   {
      zh_compGenPCode1( ZH_P_ENUMNEXT, ZH_COMP_PARAM );
   }
   else
   {
      zh_compGenPCode1( ZH_P_ENUMPREV, ZH_COMP_PARAM );
   }
}

static ZH_COMP_CARGO_FUNC( zh_compEnumEvalEnd )
{
   const char * szName = zh_compExprAsSymbol( ( PZH_EXPR ) cargo );

   if( szName )
      zh_compForEnd( ZH_COMP_PARAM, szName );
}

static void zh_compEnumEnd( ZH_COMP_DECL, PZH_EXPR pExpr )
{
   zh_compExprListEval( ZH_COMP_PARAM, pExpr, zh_compEnumEvalEnd );
   zh_compGenPCode1( ZH_P_ENUMEND, ZH_COMP_PARAM );
}

static void zh_compSwitchStart( ZH_COMP_DECL, PZH_EXPR pExpr )
{
   PZH_SWITCHCMD pSwitch = ( PZH_SWITCHCMD ) zh_xgrab( sizeof( ZH_SWITCHCMD ) );
   PZH_ZFUNC pFunc = ZH_COMP_PARAM->functions.pLast;

   pSwitch->pCases = NULL;
   pSwitch->pLast  = NULL;
   pSwitch->nDefault = 0;
   pSwitch->nOffset = pFunc->nPCodePos;
   pSwitch->pExpr = pExpr;
   pSwitch->pPrev = pFunc->pSwitch;
   pFunc->pSwitch = pSwitch;
}

static void zh_compSwitchAdd( ZH_COMP_DECL, PZH_EXPR pExpr )
{
   PZH_SWITCHCASE pCase;
   PZH_ZFUNC pFunc = ZH_COMP_PARAM->functions.pLast;

   pFunc->funFlags &= ~ZH_FUNF_BREAK_CODE;

   if( pExpr )
   {
      /* normal CASE */
      pCase = ( PZH_SWITCHCASE ) zh_xgrab( sizeof( ZH_SWITCHCASE ) );
      pCase->nOffset = pFunc->nPCodePos;
      pCase->pNext = NULL;
      pCase->pExpr = pExpr = zh_compExprReduce( pExpr, ZH_COMP_PARAM );
      if( !( zh_compExprIsLong( pExpr ) || zh_compExprIsString( pExpr ) ) )
         zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_NOT_LITERAL_CASE, NULL, NULL );
      else if( pFunc->pSwitch->pCases )
      {
         PZH_SWITCHCASE pCases = pFunc->pSwitch->pCases;
         while( pCases )
         {
            ZH_BOOL fEqual = ZH_FALSE;

            if( zh_compExprIsLong( pExpr ) )
            {
               if( zh_compExprIsLong( pCases->pExpr ) )
                  fEqual = zh_compExprAsLongNum( pExpr ) == zh_compExprAsLongNum( pCases->pExpr );
            }
            else
            {
               if( zh_compExprIsString( pCases->pExpr ) )
                  fEqual = zh_compExprAsStringLen( pExpr ) == zh_compExprAsStringLen( pCases->pExpr ) &&
                           memcmp( zh_compExprAsString( pExpr ),
                                   zh_compExprAsString( pCases->pExpr ),
                                   zh_compExprAsStringLen( pExpr ) ) == 0;
            }
            if( fEqual )
               zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_DUPL_CASE, NULL, NULL );
            pCases = pCases->pNext;
         }
      }

      if( pFunc->pSwitch->pLast )
      {
         pFunc->pSwitch->pLast->pNext = pCase;
         pFunc->pSwitch->pLast = pCase;
      }
      else
      {
         pFunc->pSwitch->pCases = pFunc->pSwitch->pLast = pCase;
      }
      if( zh_compExprIsString( pExpr ) && zh_compExprAsStringLen( pExpr ) > 255 )
      {
         zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_INVALID_STR, NULL, NULL );
      }
   }
   else
   {
      /* DEFAULT */
      if( pFunc->pSwitch->nDefault )
      {
         /* more than one default clause */
         zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL );
      }
      else
      {
         pFunc->pSwitch->nDefault = pFunc->nPCodePos;
      }
   }
}

static void zh_compSwitchEnd( ZH_COMP_DECL )
{
   PZH_ZFUNC pFunc = ZH_COMP_PARAM->functions.pLast;
   PZH_SWITCHCMD pSwitch = pFunc->pSwitch;
   PZH_EXPR pExpr = pSwitch->pExpr;
   PZH_SWITCHCASE pCase, pTmp;
   ZH_SIZE nExitPos, nCountPos;
   int iCount = 0;

   /* skip switch pcode if there was no EXIT in the last CASE
    * or in the DEFAULT case
   */
   nExitPos = zh_compGenJump( 0, ZH_COMP_PARAM );
   zh_compGenJumpHere( pSwitch->nOffset + 1, ZH_COMP_PARAM );

   pCase = pSwitch->pCases;
   if( zh_compExprIsLong( pExpr ) || zh_compExprIsString( pExpr ) )
   {
      ZH_BOOL fGen = ZH_FALSE;
      while( pCase )
      {
         if( zh_compExprIsLong( pCase->pExpr ) )
         {
            fGen = zh_compExprIsLong( pExpr ) &&
                   zh_compExprAsLongNum( pExpr ) ==
                   zh_compExprAsLongNum( pCase->pExpr );
         }
         else if( zh_compExprIsString( pCase->pExpr ) )
         {
            fGen = zh_compExprIsString( pExpr ) &&
                   zh_compExprAsStringLen( pExpr ) ==
                   zh_compExprAsStringLen( pCase->pExpr ) &&
                   memcmp( zh_compExprAsString( pExpr ),
                           zh_compExprAsString( pCase->pExpr ),
                           zh_compExprAsStringLen( pExpr ) ) == 0;
         }
         if( fGen )
         {
            zh_compGenJumpThere( zh_compGenJump( 0, ZH_COMP_PARAM ),
                                 pCase->nOffset, ZH_COMP_PARAM );
            break;
         }
         pCase = pCase->pNext;
      }
      if( pSwitch->nDefault && ! fGen )
      {
         zh_compGenJumpThere( zh_compGenJump( 0, ZH_COMP_PARAM ),
                              pSwitch->nDefault, ZH_COMP_PARAM );
      }
   }
   else
   {
      ZH_BOOL fSwitchCase = ZH_COMP_PARAM->fSwitchCase;
      ZH_BOOL fMacroText = ( ZH_COMP_PARAM->supported & ZH_COMPFLAG_MACROTEXT ) != 0;

      pExpr = zh_compExprGenPush( pExpr, ZH_COMP_PARAM );
      nCountPos = pFunc->nPCodePos + 1;
      zh_compGenPCode3( ZH_P_SWITCH, 0, 0, ZH_COMP_PARAM );
      ZH_COMP_PARAM->fSwitchCase = ZH_TRUE;
      ZH_COMP_PARAM->supported &= ~ZH_COMPFLAG_MACROTEXT;
      while( pCase )
      {
         if( zh_compExprIsLong( pCase->pExpr ) || zh_compExprIsString( pCase->pExpr ) )
         {
            iCount++;
            pCase->pExpr = zh_compExprGenPush( pCase->pExpr, ZH_COMP_PARAM );
            zh_compGenJumpThere( zh_compGenJump( 0, ZH_COMP_PARAM ),
                                 pCase->nOffset, ZH_COMP_PARAM );
         }
         pCase = pCase->pNext;
      }
      if( pSwitch->nDefault )
      {
         iCount++;
         zh_compGenPCode1( ZH_P_PUSHNIL, ZH_COMP_PARAM );
         zh_compGenJumpThere( zh_compGenJump( 0, ZH_COMP_PARAM ),
                              pSwitch->nDefault, ZH_COMP_PARAM );
      }
      ZH_PUT_LE_UINT16( pFunc->pCode + nCountPos, iCount );

      ZH_COMP_PARAM->fSwitchCase = fSwitchCase;
      if( fMacroText )
         ZH_COMP_PARAM->supported |= ZH_COMPFLAG_MACROTEXT;
   }

   zh_compGenJumpHere( nExitPos, ZH_COMP_PARAM );

   if( pExpr )
      ZH_COMP_EXPR_FREE( pExpr );

   pCase = pSwitch->pCases;
   while( pCase )
   {
      ZH_COMP_EXPR_FREE( pCase->pExpr );
      pTmp = pCase->pNext;
      zh_xfree( pCase );
      pCase = pTmp;
   }
   pFunc->pSwitch = pSwitch->pPrev;
   zh_xfree( pSwitch );
}

/* Release all switch statements
*/
void zh_compSwitchKill( ZH_COMP_DECL, PZH_ZFUNC pFunc )
{
   PZH_SWITCHCASE pCase;
   PZH_SWITCHCMD pSwitch;

   while( pFunc->pSwitch )
   {
      while( pFunc->pSwitch->pCases )
      {
         pCase = pFunc->pSwitch->pCases;
         ZH_COMP_EXPR_FREE( pCase->pExpr );
         pFunc->pSwitch->pCases = pCase->pNext;
         zh_xfree( pCase );
      }
      pSwitch = pFunc->pSwitch;
      pFunc->pSwitch = pSwitch->pPrev;
      if( pSwitch->pExpr )
         ZH_COMP_EXPR_FREE( pSwitch->pExpr );
      zh_xfree( pSwitch );
   }
}

static PZH_EXPR zh_compCheckPassByRef( ZH_COMP_DECL, PZH_EXPR pExpr )
{
   if( pExpr->ExprType == ZH_ET_FUNCALL )
   {
      if( zh_compExprParamListLen( pExpr->value.asFunCall.pParms ) == 0 )
      {
         PZH_EXPR pDelExpr = pExpr;
         if( pExpr->value.asFunCall.pFunName->ExprType == ZH_ET_MACRO )
         {
            pExpr = pExpr->value.asFunCall.pFunName;
            ZH_COMP_EXPR_CLEAR( pDelExpr );
         }
         else
         {
            pExpr = zh_compExprNewFunRef( zh_compExprAsSymbol( pExpr ), ZH_COMP_PARAM );
            ZH_COMP_EXPR_FREE( pDelExpr );
         }
         return pExpr;
      }
      else
      {
         const char * szDesc;

         szDesc = zh_compExprAsSymbol( pExpr );
         if( ! szDesc )
            szDesc = zh_compExprDescription( pExpr );

         return zh_compErrorRefer( ZH_COMP_PARAM, pExpr, szDesc );
      }
   }

   return pExpr;
}

static PZH_EXPR zh_compCheckMethod( ZH_COMP_DECL, PZH_EXPR pExpr )
{
   if( pExpr->value.asMessage.szMessage &&
       pExpr->value.asMessage.pObject &&
       pExpr->value.asMessage.pObject->ExprType == ZH_ET_VARIABLE &&
       pExpr->value.asMessage.szMessage[ 0 ] == '_' &&
       strncmp( "__ENUM", pExpr->value.asMessage.szMessage, 6 ) == 0 )
   {
      const char * szMessage = pExpr->value.asMessage.szMessage + 6;

      if( strcmp( "INDEX",   szMessage ) == 0 ||
          strcmp( "KEY",     szMessage ) == 0 ||
          strcmp( "BASE",    szMessage ) == 0 ||
          strcmp( "VALUE",   szMessage ) == 0 ||
          strcmp( "ISFIRST", szMessage ) == 0 ||
          strcmp( "ISLAST",  szMessage ) == 0 )
      {
         int iDir = 0;
         if( ! zh_compForEachVarError( ZH_COMP_PARAM, pExpr->value.asMessage.pObject->value.asSymbol.name, &iDir ) )
         {
            pExpr->value.asMessage.pObject->ExprType = ZH_ET_VARREF;
#if 0
            if( iDir < 0 )
            {
               if( strcmp( "ISFIRST", szMessage ) == 0 )
                  pExpr->value.asMessage.szMessage = "__ENUMISLAST";
               else if( strcmp( "ISLAST",  szMessage ) == 0 )
                  pExpr->value.asMessage.szMessage = "__ENUMISFIRST";
            }
#endif
         }
      }
   }

   return pExpr;
}

static void zh_compErrStru( ZH_COMP_DECL, int iError )
{
   zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', iError, NULL, NULL );
}

static void zh_compErrUnclosed( ZH_COMP_DECL, const char * szStru )
{
   ZH_COMP_PARAM->fError = ZH_FALSE;
   zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_UNCLOSED_STRU, szStru, NULL );
}

/* ************************************************************************* */

ZH_BOOL zh_compCheckUnclosedStru( ZH_COMP_DECL, PZH_ZFUNC pFunc )
{
   ZH_BOOL fUnclosed = ZH_TRUE;

   if( pFunc->wIfCounter )
   {
      zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_UNCLOSED_STRU, "IF", NULL );
      pFunc->wIfCounter = 0;
   }
   else if( pFunc->wForCounter )
   {
      zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_UNCLOSED_STRU, "FOR", NULL );
      pFunc->wForCounter = 0;
   }
   else if( pFunc->wWhileCounter )
   {
      zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_UNCLOSED_STRU, "WHILE", NULL );
      pFunc->wWhileCounter = 0;
   }
   else if( pFunc->wCaseCounter )
   {
      zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_UNCLOSED_STRU, "CASE", NULL );
      pFunc->wCaseCounter = 0;
   }
   else if( pFunc->wSwitchCounter )
   {
      zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_UNCLOSED_STRU, "SWITCH", NULL );
      pFunc->wSwitchCounter = 0;
   }
   else if( pFunc->wWithObjectCnt )
   {
      zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_UNCLOSED_STRU, "WITH OBJECT", NULL );
      pFunc->wWithObjectCnt = 0;
   }
   else if( pFunc->wSeqCounter )
   {
      zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_UNCLOSED_STRU, "BEGIN SEQUENCE", NULL );
      pFunc->wSeqCounter = 0;
   }
   else if( pFunc->funFlags & ZH_FUNF_EXTBLOCK )
   {
      zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_UNCLOSED_STRU, "{||...}", NULL );
      pFunc->funFlags &= ~ZH_FUNF_EXTBLOCK;
   }
   else
      fUnclosed = ZH_FALSE;

   return fUnclosed;
}

void yyerror( ZH_COMP_DECL, const char * s )
{
   if( ! ZH_COMP_PARAM->pLex->lasttok || ZH_COMP_PARAM->pLex->lasttok[ 0 ] == '\n' )
   {
      if( ZH_COMP_PARAM->iErrorCount == 0 || ! zh_pp_eof( ZH_COMP_PARAM->pLex->pPP ) )
         zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_INCOMPLETE_STMT, NULL, NULL );
   }
   else if( ZH_COMP_PARAM->pLex->iState == NEXT )
      zh_compErrStru( ZH_COMP_PARAM, ZH_COMP_ERR_NEXTFOR );
   else if( ZH_COMP_PARAM->pLex->iState == ELSE )
      zh_compErrStru( ZH_COMP_PARAM, ZH_COMP_ERR_UNMATCHED_ELSE );
   else if( ZH_COMP_PARAM->pLex->iState == ELSEIF )
      zh_compErrStru( ZH_COMP_PARAM, ZH_COMP_ERR_UNMATCHED_ELSEIF );
   else if( ZH_COMP_PARAM->pLex->iState == ENDIF || ZH_COMP_PARAM->pLex->iState == END )
      zh_compErrStru( ZH_COMP_PARAM, ZH_COMP_ERR_ENDIF );
   else if( ZH_COMP_PARAM->pLex->iState == CASE || ZH_COMP_PARAM->pLex->iState == OTHERWISE )
      zh_compErrStru( ZH_COMP_PARAM, ZH_COMP_ERR_CASE );
   else if( ZH_COMP_PARAM->pLex->iState == ENDCASE )
      zh_compErrStru( ZH_COMP_PARAM, ZH_COMP_ERR_ENDCASE );
   else if( ZH_COMP_PARAM->pLex->iState == ENDDO )
      zh_compErrStru( ZH_COMP_PARAM, ZH_COMP_ERR_ENDDO );
   else if( ZH_COMP_PARAM->pLex->iState == ENDWITH )
      zh_compErrStru( ZH_COMP_PARAM, ZH_COMP_ERR_ENDWITH );
   else if( ZH_COMP_PARAM->pLex->iState == ENDSEQ )
      zh_compErrStru( ZH_COMP_PARAM, ZH_COMP_ERR_ENDSEQ );
   else if( ZH_COMP_PARAM->pLex->iState == ENDSWITCH )
      zh_compErrStru( ZH_COMP_PARAM, ZH_COMP_ERR_ENDSWITCH );
   else
      zh_compGenError( ZH_COMP_PARAM, zh_comp_szErrors, 'E', ZH_COMP_ERR_YACC, s, ZH_COMP_PARAM->pLex->lasttok );
}
